export 0 = &function ['./test/end-to-end/tests/function-calls.test.mvms:run'];

slot ['./test/end-to-end/tests/function-calls.test.mvms:#entry'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:#entry'];
slot ['./test/end-to-end/tests/function-calls.test.mvms:bar'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:bar'];
slot ['./test/end-to-end/tests/function-calls.test.mvms:concat'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:concat'];
slot ['./test/end-to-end/tests/function-calls.test.mvms:exports'] = &allocation 1;
slot ['./test/end-to-end/tests/function-calls.test.mvms:foo'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:foo'];
slot ['./test/end-to-end/tests/function-calls.test.mvms:run'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:run'];
slot ['global:Infinity'] = null;
slot ['global:NaN'] = null;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:isNaN'] = host function 65533;
slot ['global:overflowChecks'] = false;
slot ['global:print'] = host function 1;
slot ['global:undefined'] = undefined;
slot ['global:vmExport'] = &ephemeral vmExport;

function ['./test/end-to-end/tests/function-calls.test.mvms:#entry']() {
  entry:
    LoadArg(index 0);
    StoreGlobal(name './test/end-to-end/tests/function-calls.test.mvms:exports');
    LoadGlobal(name 'global:vmExport');
    Literal(lit 0);
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:run');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/function-calls.test.mvms:bar']() {
  entry:
    LoadArg(index 0);
    LoadArg(index 1);
    LoadVar(index 0);
    Literal(lit 'bar ');
    LoadVar(index 1);
    BinOp(op '+');
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/function-calls.test.mvms:concat']() {
  entry:
    LoadArg(index 0);
    LoadArg(index 1);
    LoadArg(index 2);
    LoadVar(index 0);
    Literal(lit ' ');
    BinOp(op '+');
    LoadVar(index 1);
    BinOp(op '+');
    Literal(lit ' ');
    BinOp(op '+');
    LoadVar(index 2);
    BinOp(op '+');
    Return();
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/function-calls.test.mvms:foo']() {
  entry:
    LoadArg(index 0);
    LoadGlobal(name 'global:print');
    Literal(lit 'foo ');
    LoadVar(index 0);
    BinOp(op '+');
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/function-calls.test.mvms:run']() {
  entry:
    // Basic function
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:foo');
    Literal(lit 'a');
    Call(count 1);
    Pop(count 1);
    // Higher-order function
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:bar');
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:foo');
    Literal(lit 'b');
    Call(count 2);
    Pop(count 1);
    // Arguments and return value
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:concat');
    Literal(lit 'a');
    Literal(lit 'b');
    Literal(lit 'c');
    Call(count 3);
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:foo');
    LoadVar(index 0);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 1 = {
};
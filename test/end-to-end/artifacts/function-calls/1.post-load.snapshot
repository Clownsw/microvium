export 0 = &function ['./test/end-to-end/tests/function-calls.test.mvms:run'];

slot ['./test/end-to-end/tests/function-calls.test.mvms:bar'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:bar'];
slot ['./test/end-to-end/tests/function-calls.test.mvms:concat'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:concat'];
slot ['./test/end-to-end/tests/function-calls.test.mvms:foo'] = &function ['./test/end-to-end/tests/function-calls.test.mvms:foo'];
slot ['global:print'] = host function 1;

function ['./test/end-to-end/tests/function-calls.test.mvms:bar']() {
  entry:
    LoadArg(index 1);
    LoadArg(index 2);
    LoadVar(index 0);
    Literal(lit undefined);
    Literal(lit 'bar ');
    LoadVar(index 1);
    BinOp(op '+');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/function-calls.test.mvms:concat']() {
  entry:
    LoadArg(index 1);
    LoadArg(index 2);
    LoadArg(index 3);
    LoadVar(index 0);
    Literal(lit ' ');
    BinOp(op '+');
    LoadVar(index 1);
    BinOp(op '+');
    Literal(lit ' ');
    BinOp(op '+');
    LoadVar(index 2);
    BinOp(op '+');
    Return();
}

function ['./test/end-to-end/tests/function-calls.test.mvms:foo']() {
  entry:
    LoadArg(index 1);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'foo ');
    LoadVar(index 0);
    BinOp(op '+');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/function-calls.test.mvms:run']() {
  entry:
    // Basic function
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:foo');
    Literal(lit undefined);
    Literal(lit 'a');
    Call(count 2);
    Pop(count 1);
    // Higher-order function
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:bar');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:foo');
    Literal(lit 'b');
    Call(count 3);
    Pop(count 1);
    // Arguments and return value
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:concat');
    Literal(lit undefined);
    Literal(lit 'a');
    Literal(lit 'b');
    Literal(lit 'c');
    Call(count 4);
    LoadGlobal(name './test/end-to-end/tests/function-calls.test.mvms:foo');
    Literal(lit undefined);
    LoadVar(index 0);
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['<builtin>:Array_push']() {
  entry:
    LoadArg(index 1);
    LoadVar(index 0);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 3 = {
  push: &function ['<builtin>:Array_push'],
};
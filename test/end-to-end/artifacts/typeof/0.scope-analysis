[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'assertEqual'
[free var] 'undefined'
[global slot] 'thisModule'; [global slot] 'run'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings { function 'run' # binding_1 @ global['run'] }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue { func 'run' -> global['run'] }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_2 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        assertEqual @ free assertEqual
        undefined @ free undefined
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        run @ binding_1
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
      }

      function '<anonymous>' as 'anonymous' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        No references

        prologue {  }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }
}
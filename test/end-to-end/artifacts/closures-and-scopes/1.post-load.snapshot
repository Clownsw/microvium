export 0 = &function run;

slot basics = &function basics;
slot closureOperations = &function closureOperations;
slot differentVariableTypes = &function differentVariableTypes;
slot ['global:Number'] = &allocation 2;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot makeIncrementorA = &function makeIncrementorA;
slot makeIncrementorA2 = &function makeIncrementorA2;
slot makeIncrementorB = &function makeIncrementorB;
slot makeIncrementorC = &function makeIncrementorC;
slot nestedLexicalScopes = &function nestedLexicalScopes;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function Number_isNaN() {
  entry:
    // NaN is the only value that is not equal to itself
    LoadArg(index 1);
    LoadArg(index 1);
    BinOp(op '!==');
    Return();
}

function anonymous() {
  entry:
    LoadScoped(index 0);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 0);
    Return();
}

function anonymous1() {
  entry:
    LoadScoped(index 0);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 0);
    Return();
}

function anonymous10() {
  entry:
    Literal(lit undefined);
    Return();
}

function anonymous11() {
  entry:
    Literal(lit undefined);
    Return();
}

function anonymous2() {
  entry:
    Literal(lit &function anonymous3);
    ClosureNew();
    Return();
}

function anonymous3() {
  entry:
    LoadScoped(index 0);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 0);
    Return();
}

function anonymous4() {
  entry:
    LoadScoped(index 1);
    LoadVar(index 0);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 1);
    StoreScoped(index 1);
    Pop(count 1);
    Return();
}

function anonymous5() {
  entry:
    LoadScoped(index 2);
    LoadVar(index 0);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 1);
    StoreScoped(index 2);
    Pop(count 1);
    Return();
}

function anonymous6() {
  entry:
    LoadScoped(index 0);
    LoadVar(index 0);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 1);
    StoreScoped(index 0);
    Pop(count 1);
    Return();
}

function anonymous7() {
  entry:
    ScopePush(count 8);
    LoadArg(index 1);
    StoreScoped(index 0);
    LoadArg(index 3);
    StoreScoped(index 1);
    Literal(lit undefined);
    StoreScoped(index 2);
    Literal(lit undefined);
    StoreScoped(index 3);
    // mutated parameter
    Literal(lit 5);
    StoreScoped(index 4);
    // const
    Literal(lit 6);
    StoreScoped(index 2);
    // var
    Literal(lit 7);
    StoreScoped(index 5);
    // let
    // New block scope
    Literal(lit 5);
    StoreScoped(index 6);
    // const
    Literal(lit 6);
    StoreScoped(index 3);
    // var
    Literal(lit 7);
    StoreScoped(index 7);
    // let
    Literal(lit &function anonymous8);
    ClosureNew();
    Return();
}

function anonymous8() {
  entry:
    ScopePush(count 8);
    LoadArg(index 1);
    StoreScoped(index 0);
    LoadArg(index 3);
    StoreScoped(index 1);
    Literal(lit undefined);
    StoreScoped(index 2);
    Literal(lit undefined);
    StoreScoped(index 3);
    // local mutated parameter
    Literal(lit 5);
    StoreScoped(index 4);
    // const
    Literal(lit 6);
    StoreScoped(index 2);
    // var
    Literal(lit 7);
    StoreScoped(index 5);
    // let
    // New block scope
    Literal(lit 5);
    StoreScoped(index 6);
    // const
    Literal(lit 6);
    StoreScoped(index 3);
    // var
    Literal(lit 7);
    StoreScoped(index 7);
    // let
    Literal(lit &function anonymous9);
    ClosureNew();
    Return();
}

function anonymous9() {
  entry:
    LoadArg(index 3);
    // local mutated parameter
    Literal(lit 0);
    LoadScoped(index 8);
    Literal(lit 2);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 9);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 9);
    Pop(count 1);
    Literal(lit 3);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 12);
    Literal(lit 5);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 10);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 10);
    Pop(count 1);
    Literal(lit 7);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 13);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 13);
    Pop(count 1);
    Literal(lit 11);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 14);
    Literal(lit 13);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 11);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 11);
    Pop(count 1);
    Literal(lit 17);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 15);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 15);
    Pop(count 1);
    Literal(lit 19);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 0);
    Literal(lit 23);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 1);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit 29);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 4);
    Literal(lit 31);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 2);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 2);
    Pop(count 1);
    Literal(lit 37);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 5);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 5);
    Pop(count 1);
    Literal(lit 41);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 6);
    Literal(lit 43);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 3);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 3);
    Pop(count 1);
    Literal(lit 47);
    BinOp(op '*');
    BinOp(op '+');
    LoadScoped(index 7);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 7);
    Pop(count 1);
    Literal(lit 53);
    BinOp(op '*');
    BinOp(op '+');
    LoadArg(index 1);
    BinOp(op '+');
    LoadVar(index 0);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    Literal(lit 59);
    BinOp(op '*');
    BinOp(op '+');
    Return();
}

function basics() {
  entry:
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    LoadGlobal(name 'makeIncrementorA');
    Literal(lit undefined);
    Call(count 1);
    StoreVar(index 0);
    LoadGlobal(name 'makeIncrementorA');
    Literal(lit undefined);
    Call(count 1);
    StoreVar(index 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 1);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 1);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'makeIncrementorA2');
    Literal(lit undefined);
    Call(count 1);
    StoreVar(index 2);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'makeIncrementorB');
    Literal(lit undefined);
    Call(count 1);
    StoreVar(index 3);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 3);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 3);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'makeIncrementorC');
    Literal(lit undefined);
    Call(count 1);
    StoreVar(index 4);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 4);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 4);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    Pop(count 5);
    Literal(lit undefined);
    Return();
}

function closureOperations() {
  entry:
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit &function anonymous10);
    StoreVar(index 0);
    Literal(lit &function anonymous11);
    StoreVar(index 1);
    // Check equality operator
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    LoadVar(index 0);
    BinOp(op '===');
    Literal(lit true);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    LoadVar(index 1);
    BinOp(op '===');
    Literal(lit false);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    LoadVar(index 0);
    BinOp(op '!==');
    Literal(lit false);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    LoadVar(index 1);
    BinOp(op '!==');
    Literal(lit true);
    Call(count 3);
    Pop(count 1);
    // Other operations
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 0);
    BinOp(op '|');
    Literal(lit 0);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assert');
    Literal(lit undefined);
    LoadGlobal(name 'global:Number');
    LoadVar(index 4);
    Literal(lit 'isNaN');
    ObjectGet();
    LoadVar(index 4);
    LoadVar(index 0);
    UnOp(op '+');
    Call(count 2);
    StoreVar(index 4);
    Call(count 2);
    Pop(count 1);
    Pop(count 2);
    Literal(lit undefined);
    Return();
}

function differentVariableTypes() {
  entry:
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit &function anonymous7);
    StoreVar(index 0);
    LoadVar(index 0);
    Literal(lit undefined);
    Literal(lit 1);
    Literal(lit 2);
    Literal(lit 3);
    Call(count 4);
    StoreVar(index 1);
    LoadVar(index 1);
    Literal(lit undefined);
    Literal(lit 4);
    Literal(lit 5);
    Literal(lit 6);
    Call(count 4);
    StoreVar(index 2);
    LoadVar(index 1);
    Literal(lit undefined);
    Literal(lit 7);
    Literal(lit 8);
    Literal(lit 9);
    Call(count 4);
    StoreVar(index 3);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit undefined);
    Literal(lit 10);
    Literal(lit 11);
    Literal(lit 12);
    Call(count 4);
    Literal(lit 2971);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit undefined);
    Literal(lit 13);
    Literal(lit 14);
    Literal(lit 15);
    Call(count 4);
    Literal(lit 3415);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit undefined);
    Literal(lit 16);
    Literal(lit 17);
    Literal(lit 19);
    Call(count 4);
    Literal(lit 3918);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 3);
    Literal(lit undefined);
    Literal(lit 19);
    Literal(lit 20);
    Literal(lit 21);
    Call(count 4);
    Literal(lit 3838);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 3);
    Literal(lit undefined);
    Literal(lit 22);
    Literal(lit 23);
    Literal(lit 24);
    Call(count 4);
    Literal(lit 4282);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 3);
    Literal(lit undefined);
    Literal(lit 25);
    Literal(lit 26);
    Literal(lit 27);
    Call(count 4);
    Literal(lit 4726);
    Call(count 3);
    Pop(count 1);
    Pop(count 4);
    Literal(lit undefined);
    Return();
}

function increment() {
  entry:
    LoadScoped(index 0);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 0);
    Return();
}

function makeIncrementorA() {
  entry:
    ScopePush(count 1);
    Literal(lit 0);
    StoreScoped(index 0);
    // Arrow function
    Literal(lit &function anonymous);
    ClosureNew();
    Return();
}

function makeIncrementorA2() {
  entry:
    ScopePush(count 1);
    Literal(lit 0);
    StoreScoped(index 0);
    // Function expression (note that we do not support named function expressions, yet)
    Literal(lit &function anonymous1);
    ClosureNew();
    Return();
}

function makeIncrementorB() {
  entry:
    ScopePush(count 1);
    Literal(lit &function increment);
    ClosureNew();
    Literal(lit 0);
    StoreScoped(index 0);
    LoadVar(index 0);
    Return();
}

function makeIncrementorC() {
  entry:
    ScopePush(count 1);
    Literal(lit 0);
    StoreScoped(index 0);
    // The inner-most function doesn't access its direct outer scope. It accesses
    // its grandparent scope.
    Literal(lit &function anonymous2);
    ClosureNew();
    Return();
}

function nestedLexicalScopes() {
  entry:
    ScopePush(count 3);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit 1);
    StoreScoped(index 0);
    Literal(lit undefined);
    StoreVar(index 0);
    Literal(lit undefined);
    StoreVar(index 1);
    Literal(lit undefined);
    StoreVar(index 2);
    Literal(lit 50);
    StoreScoped(index 1);
    Literal(lit &function anonymous4);
    ClosureNew();
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    Literal(lit 100);
    StoreScoped(index 2);
    Literal(lit &function anonymous5);
    ClosureNew();
    LoadVar(index 3);
    StoreVar(index 1);
    Pop(count 1);
    Literal(lit &function anonymous6);
    ClosureNew();
    LoadVar(index 3);
    StoreVar(index 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 50);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 51);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 1);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 100);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 1);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 101);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    Pop(count 3);
    Literal(lit undefined);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'basics');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'nestedLexicalScopes');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'differentVariableTypes');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'closureOperations');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 2 = {
  isNaN: &function Number_isNaN,
};

allocation 3 = {
  push: &function Array_push,
};
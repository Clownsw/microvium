[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'assertEqual'
[free var] 'assert'
[free var] 'Number'
[global slot] 'thisModule'
[global slot] 'basics'
[global slot] 'makeIncrementorA'
[global slot] 'makeIncrementorA2'
[global slot] 'makeIncrementorB'
[global slot] 'makeIncrementorC'
[global slot] 'nestedLexicalScopes'
[global slot] 'differentVariableTypes'
[global slot] 'closureOperations'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'basics' # binding_2 @ global['basics'];
    function 'makeIncrementorA' # binding_3 @ global['makeIncrementorA'];
    function 'makeIncrementorA2' # binding_4 @ global['makeIncrementorA2'];
    function 'makeIncrementorB' # binding_5 @ global['makeIncrementorB'];
    function 'makeIncrementorC' # binding_6 @ global['makeIncrementorC'];
    function 'nestedLexicalScopes' # binding_7 @ global['nestedLexicalScopes'];
    function 'differentVariableTypes' # binding_8 @ global['differentVariableTypes'];
    function 'closureOperations' # binding_9 @ global['closureOperations']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]
    func 'basics' -> global['basics']
    func 'makeIncrementorA' -> global['makeIncrementorA']
    func 'makeIncrementorA2' -> global['makeIncrementorA2']
    func 'makeIncrementorB' -> global['makeIncrementorB']
    func 'makeIncrementorC' -> global['makeIncrementorC']
    func 'nestedLexicalScopes' -> global['nestedLexicalScopes']
    func 'differentVariableTypes' -> global['differentVariableTypes']
    func 'closureOperations' -> global['closureOperations']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_10 @ arg[0] }

    No references

    prologue {  }

    block {
      epiloguePopCount: 0

      bindings {  }

      prologue {  }

      references {
        basics @ binding_2
        nestedLexicalScopes @ binding_7
        differentVariableTypes @ binding_8
        closureOperations @ binding_9
      }
    }
  }

  function basics as 'basics' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_11 @ arg[0] }

    No references

    prologue {  }

    block {
      epiloguePopCount: 5

      bindings {
        readonly const 'incrementor1' # binding_12 @ local[0];
        readonly const 'incrementor2' # binding_13 @ local[1];
        readonly const 'incrementor3' # binding_14 @ local[2];
        readonly const 'incrementor4' # binding_15 @ local[3];
        readonly const 'incrementorC' # binding_16 @ local[4]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
        new let -> local[3]
        new let -> local[4]
      }

      references {
        makeIncrementorA @ binding_3
        makeIncrementorA @ binding_3
        assertEqual @ free assertEqual
        incrementor1 @ binding_12
        assertEqual @ free assertEqual
        incrementor1 @ binding_12
        assertEqual @ free assertEqual
        incrementor2 @ binding_13
        assertEqual @ free assertEqual
        incrementor2 @ binding_13
        makeIncrementorA2 @ binding_4
        assertEqual @ free assertEqual
        incrementor3 @ binding_14
        assertEqual @ free assertEqual
        incrementor3 @ binding_14
        makeIncrementorB @ binding_5
        assertEqual @ free assertEqual
        incrementor4 @ binding_15
        assertEqual @ free assertEqual
        incrementor4 @ binding_15
        makeIncrementorC @ binding_6
        assertEqual @ free assertEqual
        incrementorC @ binding_16
        assertEqual @ free assertEqual
        incrementorC @ binding_16
      }
    }
  }

  function makeIncrementorA as 'makeIncrementorA' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_17 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      epiloguePopCount: 0

      bindings {
        writable let 'x' # binding_18 @ scoped[!0]
      }

      prologue {  }

      No references

      closure function '<anonymous>' as 'anonymous' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        references {
          x @ binding_18 using relative slot index 0
        }

        prologue {  }
      }
    }
  }

  function makeIncrementorA2 as 'makeIncrementorA2' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_19 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      epiloguePopCount: 0

      bindings {
        writable let 'x' # binding_20 @ scoped[!0]
      }

      prologue {  }

      No references

      closure function '<anonymous>' as 'anonymous1' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        No references

        prologue {  }

        block {
          epiloguePopCount: 0

          bindings {  }

          prologue {  }

          references {
            x @ binding_20 using relative slot index 0
          }
        }
      }
    }
  }

  function makeIncrementorB as 'makeIncrementorB' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_21 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      epiloguePopCount: 1

      bindings {
        writable let 'x' # binding_22 @ scoped[!0];
        function 'increment' # binding_23 @ local[0]
      }

      prologue {
        func 'increment' -> local[0] [capture scope]
      }

      references { increment @ binding_23 }

      closure function increment as 'increment' {
        [no closure scope]; [0 var declarations]

        bindings { this '#this' # binding_24 @ arg[0] }

        No references

        prologue {  }

        block {
          epiloguePopCount: 0

          bindings {  }

          prologue {  }

          references {
            x @ binding_22 using relative slot index 0
          }
        }
      }
    }
  }

  function makeIncrementorC as 'makeIncrementorC' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_25 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      epiloguePopCount: 0

      bindings {
        writable let 'x' # binding_26 @ scoped[!0]
      }

      prologue {  }

      No references

      closure function '<anonymous>' as 'anonymous2' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        No references

        prologue {  }

        closure function '<anonymous>' as 'anonymous3' {
          [no closure scope]; [0 var declarations]

          bindings {  }

          references {
            x @ binding_26 using relative slot index 0
          }

          prologue {  }
        }
      }
    }
  }

  function nestedLexicalScopes as 'nestedLexicalScopes' {
    [closure scope with 3 slots]; [0 var declarations]

    bindings { this '#this' # binding_27 @ arg[0] }

    No references

    prologue { new scope[3] }

    block {
      epiloguePopCount: 3

      bindings {
        writable let 'x' # binding_28 @ scoped[!0];
        writable let 'f1' # binding_29 @ local[0];
        writable let 'f2' # binding_30 @ local[1];
        writable let 'f3' # binding_31 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      references {
        f3 @ binding_31
        assertEqual @ free assertEqual
        f1 @ binding_29
        assertEqual @ free assertEqual
        f1 @ binding_29
        assertEqual @ free assertEqual
        f2 @ binding_30
        assertEqual @ free assertEqual
        f2 @ binding_30
        assertEqual @ free assertEqual
        f3 @ binding_31
        assertEqual @ free assertEqual
        f3 @ binding_31
      }

      block {
        epiloguePopCount: 0

        bindings {
          writable let 'x' # binding_32 @ scoped[!1]
        }

        prologue {  }

        references { f1 @ binding_29 }

        closure function '<anonymous>' as 'anonymous4' {
          [no closure scope]; [0 var declarations]

          bindings {  }

          references {
            x @ binding_32 using relative slot index 1
          }

          prologue {  }
        }
      }

      block {
        epiloguePopCount: 0

        bindings {
          writable let 'x' # binding_33 @ scoped[!2]
        }

        prologue {  }

        references { f2 @ binding_30 }

        closure function '<anonymous>' as 'anonymous5' {
          [no closure scope]; [0 var declarations]

          bindings {  }

          references {
            x @ binding_33 using relative slot index 2
          }

          prologue {  }
        }
      }

      closure function '<anonymous>' as 'anonymous6' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        references {
          x @ binding_28 using relative slot index 0
        }

        prologue {  }
      }
    }
  }

  function differentVariableTypes as 'differentVariableTypes' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_34 @ arg[0] }

    No references

    prologue {  }

    block {
      epiloguePopCount: 4

      bindings {
        readonly const 'foo' # binding_35 @ local[0];
        readonly const 'f1' # binding_36 @ local[1];
        readonly const 'f2' # binding_37 @ local[2];
        readonly const 'f3' # binding_38 @ local[3]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
        new let -> local[3]
      }

      references {
        foo @ binding_35
        f1 @ binding_36
        f1 @ binding_36
        assertEqual @ free assertEqual
        f2 @ binding_37
        assertEqual @ free assertEqual
        f2 @ binding_37
        assertEqual @ free assertEqual
        f2 @ binding_37
        assertEqual @ free assertEqual
        f3 @ binding_38
        assertEqual @ free assertEqual
        f3 @ binding_38
        assertEqual @ free assertEqual
        f3 @ binding_38
      }

      function '<anonymous>' as 'anonymous7' {
        [closure scope with 8 slots]; [2 var declarations]

        bindings {
          param 'x1' # binding_39 @ scoped[!0];
          param 'x2' # binding_40 @ arg[2];
          writable param 'x3' # binding_41 @ scoped[!1];
          writable var 'x5' # binding_42 @ scoped[!2];
          writable var 'x8' # binding_43 @ scoped[!3]
        }

        No references

        prologue {
          new scope[8]
          arg[1] -> scoped[+0]
          arg[3] -> scoped[+1]
          new var -> scoped[+2]
          new var -> scoped[+3]
        }

        block {
          epiloguePopCount: 0

          bindings {
            readonly const 'x4' # binding_44 @ scoped[!4];
            writable let 'x6' # binding_45 @ scoped[!5]
          }

          prologue {  }

          No references

          block {
            epiloguePopCount: 0

            bindings {
              readonly const 'x7' # binding_46 @ scoped[!6];
              writable let 'x9' # binding_47 @ scoped[!7]
            }

            prologue {  }

            No references

            closure function '<anonymous>' as 'anonymous8' {
              [closure scope with 8 slots]
              [2 var declarations]

              bindings {
                param 'x10' # binding_48 @ scoped[!0];
                param 'x11' # binding_49 @ arg[2];
                writable param 'x12' # binding_50 @ scoped[!1];
                writable var 'x14' # binding_51 @ scoped[!2];
                writable var 'x17' # binding_52 @ scoped[!3]
              }

              No references

              prologue {
                new scope[8]
                arg[1] -> scoped[+0]
                arg[3] -> scoped[+1]
                new var -> scoped[+2]
                new var -> scoped[+3]
              }

              block {
                epiloguePopCount: 0

                bindings {
                  readonly const 'x13' # binding_53 @ scoped[!4];
                  writable let 'x15' # binding_54 @ scoped[!5]
                }

                prologue {  }

                No references

                block {
                  epiloguePopCount: 0

                  bindings {
                    readonly const 'x16' # binding_55 @ scoped[!6];
                    writable let 'x18' # binding_56 @ scoped[!7]
                  }

                  prologue {  }

                  No references

                  closure function '<anonymous>' as 'anonymous9' {
                    [no closure scope]; [0 var declarations]

                    bindings {
                      param 'x19' # binding_57 @ arg[1];
                      param 'x20' # binding_58 @ arg[2];
                      writable param 'x21' # binding_59 @ local[0]
                    }

                    references {
                      x1 @ binding_39 using relative slot index 8
                      x3 @ binding_41 using relative slot index 9
                      x4 @ binding_44 using relative slot index 12
                      x5 @ binding_42 using relative slot index 10
                      x6 @ binding_45 using relative slot index 13
                      x7 @ binding_46 using relative slot index 14
                      x8 @ binding_43 using relative slot index 11
                      x9 @ binding_47 using relative slot index 15
                      x10 @ binding_48 using relative slot index 0
                      x12 @ binding_50 using relative slot index 1
                      x13 @ binding_53 using relative slot index 4
                      x14 @ binding_51 using relative slot index 2
                      x15 @ binding_54 using relative slot index 5
                      x16 @ binding_55 using relative slot index 6
                      x17 @ binding_52 using relative slot index 3
                      x18 @ binding_56 using relative slot index 7
                      x19 @ binding_57
                      x21 @ binding_59
                    }

                    prologue { arg[3] -> local[0] }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  function closureOperations as 'closureOperations' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_60 @ arg[0] }

    No references

    prologue {  }

    block {
      epiloguePopCount: 2

      bindings {
        readonly const 'f1' # binding_61 @ local[0];
        readonly const 'f2' # binding_62 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      references {
        assertEqual @ free assertEqual
        f1 @ binding_61
        f1 @ binding_61
        assertEqual @ free assertEqual
        f1 @ binding_61
        f2 @ binding_62
        assertEqual @ free assertEqual
        f1 @ binding_61
        f1 @ binding_61
        assertEqual @ free assertEqual
        f1 @ binding_61
        f2 @ binding_62
        assertEqual @ free assertEqual
        f1 @ binding_61
        assert @ free assert
        Number @ free Number
        f1 @ binding_61
      }

      function '<anonymous>' as 'anonymous10' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        No references

        prologue {  }

        block {
          epiloguePopCount: 0

          bindings {  }

          prologue {  }

          No references
        }
      }

      function '<anonymous>' as 'anonymous11' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        No references

        prologue {  }

        block {
          epiloguePopCount: 0

          bindings {  }

          prologue {  }

          No references
        }
      }
    }
  }
}
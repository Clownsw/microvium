[this module slot] 'thisModule'
[free var] 'vmExport'; [free var] 'assertEqual'
[global slot] 'thisModule'; [global slot] 'makeIncrementorA'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'makeIncrementorA' # binding_2 @ global['makeIncrementorA']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]
    func 'makeIncrementorA' -> global['makeIncrementorA']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_3 @ arg[0] }

    No references

    prologue {  }

    block {
      epiloguePopCount: 2

      bindings {
        readonly const 'incrementor1' # binding_4 @ local[0];
        readonly const 'incrementor2' # binding_5 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      references {
        makeIncrementorA @ binding_2
        makeIncrementorA @ binding_2
        assertEqual @ free assertEqual
        incrementor1 @ binding_4
        assertEqual @ free assertEqual
        incrementor1 @ binding_4
        assertEqual @ free assertEqual
        incrementor2 @ binding_5
        assertEqual @ free assertEqual
        incrementor2 @ binding_5
      }
    }
  }

  function makeIncrementorA as 'makeIncrementorA' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_6 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      epiloguePopCount: 0

      bindings { let 'x' # binding_7 @ scoped[!0] }

      prologue {  }

      No references

      closure function '<anonymous>' as 'anonymous' {
        [no closure scope]; [0 var declarations]

        bindings {  }

        references {
          x @ binding_7 using relative slot index 0
        }

        prologue {  }
      }
    }
  }
}
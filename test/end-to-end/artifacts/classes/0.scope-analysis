[this module slot] 'thisModule'
[free var] 'vmExport'
[global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    class 'MyClass' # binding_1 @ local[1];
    function 'run' # binding_2 @ local[0];
    this '#this' # binding_3
  }

  references { vmExport @ free vmExport; run @ binding_2 }

  prologue { func 'run' -> local[0]; new let -> local[1] }

  constructor MyClass as 'MyClass' {
    [no closure scope]; [0 var declarations]

    bindings {  }

    No references

    prologue {  }
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_4 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      No references
    }
  }
}
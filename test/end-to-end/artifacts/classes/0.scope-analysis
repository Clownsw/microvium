[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'assertEqual'
[free var] 'assert'
[free var] 'Microvium'
[free var] 'Number'
[global slot] 'thisModule'
[global slot] 'x'
[global slot] 'GlobalClass'
[global slot] 'globalInst'
[global slot] 'test_globalInstance'
[global slot] 'test_globalClass'
[global slot] 'test_localClass'
[global slot] 'test_inheritedProperties'
[global slot] 'test_proto'
[global slot] 'test_returnFromConstructor'
[global slot] 'test_operators'
[global slot] 'test_classAsMember'
[global slot] 'test_closingOverClass'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    readonly const 'x' # binding_1 @ global['x'];
    class 'GlobalClass' # binding_2 @ global['GlobalClass'];
    readonly const 'globalInst' # binding_3 @ global['globalInst'];
    function 'run' # binding_4 @ local[0];
    function 'test_globalInstance' # binding_5 @ global['test_globalInstance'];
    function 'test_globalClass' # binding_6 @ global['test_globalClass'];
    function 'test_localClass' # binding_7 @ global['test_localClass'];
    function 'test_inheritedProperties' # binding_8 @ global['test_inheritedProperties'];
    function 'test_proto' # binding_9 @ global['test_proto'];
    function 'test_returnFromConstructor' # binding_10 @ global['test_returnFromConstructor'];
    function 'test_operators' # binding_11 @ global['test_operators'];
    function 'test_classAsMember' # binding_12 @ global['test_classAsMember'];
    function 'test_closingOverClass' # binding_13 @ global['test_closingOverClass']
  }

  references {
    vmExport @ free vmExport
    run @ binding_4
    GlobalClass @ binding_2
    GlobalClass @ binding_2
  }

  prologue {
    func 'run' -> local[0]
    func 'test_globalInstance' -> global['test_globalInstance']
    func 'test_globalClass' -> global['test_globalClass']
    func 'test_localClass' -> global['test_localClass']
    func 'test_inheritedProperties' -> global['test_inheritedProperties']
    func 'test_proto' -> global['test_proto']
    func 'test_returnFromConstructor' -> global['test_returnFromConstructor']
    func 'test_operators' -> global['test_operators']
    func 'test_classAsMember' -> global['test_classAsMember']
    func 'test_closingOverClass' -> global['test_closingOverClass']
  }

  class GlobalClass with constructor 'GlobalClass' {
    bindings {  }

    prologue {  }

    epilogue {  }

    No references

    function GlobalClass_constructor as 'GlobalClass_constructor' {
      [no closure scope]; [0 var declarations]

      bindings {
        this '#this' # binding_14 @ arg[0];
        param 'y' # binding_15 @ arg[1]
      }

      No references

      prologue {  }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue {  }

        references { '#this' @ binding_14; y @ binding_15 }
      }
    }

    function GlobalClass_myMethod as 'GlobalClass_myMethod' {
      [no closure scope]; [0 var declarations]

      bindings { this '#this' # binding_16 @ arg[0] }

      No references

      prologue {  }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue {  }

        references { '#this' @ binding_16 }
      }
    }

    function GlobalClass_method as 'GlobalClass_method' {
      [no closure scope]; [0 var declarations]

      bindings { this '#this' # binding_17 @ arg[0] }

      references { x @ binding_1 }

      prologue {  }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue {  }

        references { '#this' @ binding_17 }
      }
    }

    function GlobalClass_myStaticMethod as 'GlobalClass_myStaticMethod' {
      [no closure scope]; [0 var declarations]

      bindings { this '#this' # binding_18 @ arg[0] }

      No references

      prologue {  }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue {  }

        references {
          '#this' @ binding_18
          '#this' @ binding_18
          '#this' @ binding_18
        }
      }
    }
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_19 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        test_globalClass @ binding_6
        test_globalInstance @ binding_5
        test_localClass @ binding_7
        test_inheritedProperties @ binding_8
        test_proto @ binding_9
        test_returnFromConstructor @ binding_10
        test_operators @ binding_11
        test_classAsMember @ binding_12
        test_closingOverClass @ binding_13
      }
    }
  }

  function test_globalInstance as 'test_globalInstance' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_20 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        readonly const 'y' # binding_21 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual
        globalInst @ binding_3
        assertEqual @ free assertEqual
        globalInst @ binding_3
        assertEqual @ free assertEqual
        globalInst @ binding_3
        assertEqual @ free assertEqual
        globalInst @ binding_3
        x @ binding_1
        y @ binding_21
        assertEqual @ free assertEqual
        globalInst @ binding_3
      }
    }
  }

  function test_globalClass as 'test_globalClass' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_22 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        readonly const 'inst' # binding_23 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual
        GlobalClass @ binding_2
        assertEqual @ free assertEqual
        GlobalClass @ binding_2
        assertEqual @ free assertEqual
        GlobalClass @ binding_2
        GlobalClass @ binding_2
        assertEqual @ free assertEqual
        inst @ binding_23
        assertEqual @ free assertEqual
        inst @ binding_23
        assertEqual @ free assertEqual
        inst @ binding_23
      }
    }
  }

  function test_localClass as 'test_localClass' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_24 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_25 @ local[0];
        readonly const 'inst' # binding_26 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_25
        assertEqual @ free assertEqual
        LocalClass @ binding_25
        assertEqual @ free assertEqual
        LocalClass @ binding_25
        assertEqual @ free assertEqual
        LocalClass @ binding_25
        LocalClass @ binding_25
        assertEqual @ free assertEqual
        inst @ binding_26
        assertEqual @ free assertEqual
        inst @ binding_26
        assertEqual @ free assertEqual
        inst @ binding_26
      }

      class LocalClass with constructor 'LocalClass' {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        function LocalClass_constructor as 'LocalClass_constructor' {
          [no closure scope]; [0 var declarations]

          bindings {
            this '#this' # binding_27 @ arg[0];
            param 'y' # binding_28 @ arg[1]
          }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            references {
              '#this' @ binding_27; y @ binding_28
            }
          }
        }

        function LocalClass_myMethod as 'LocalClass_myMethod' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_29 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            references { '#this' @ binding_29 }
          }
        }

        function LocalClass_myStaticMethod as 'LocalClass_myStaticMethod' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_30 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            references {
              '#this' @ binding_30
              '#this' @ binding_30
              '#this' @ binding_30
            }
          }
        }
      }
    }
  }

  function test_inheritedProperties as 'test_inheritedProperties' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_31 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_32 @ local[0];
        readonly const 'inst1' # binding_33 @ local[1];
        readonly const 'inst2' # binding_34 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        LocalClass @ binding_32
        LocalClass @ binding_32
        LocalClass @ binding_32
        assertEqual @ free assertEqual
        inst1 @ binding_33
        assertEqual @ free assertEqual
        inst2 @ binding_34
        inst1 @ binding_33
        LocalClass @ binding_32
        assertEqual @ free assertEqual
        inst1 @ binding_33
        assertEqual @ free assertEqual
        inst2 @ binding_34
        assertEqual @ free assertEqual
        LocalClass @ binding_32
      }

      class LocalClass with constructor 'LocalClass1' {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references
      }
    }
  }

  function test_proto as 'test_proto' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_35 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass1' # binding_36 @ local[0];
        class 'LocalClass2' # binding_37 @ local[1];
        readonly const 'inst1' # binding_38 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        LocalClass1 @ binding_36
        assert @ free assert
        inst1 @ binding_38
        LocalClass1 @ binding_36
        assert @ free assert
        inst1 @ binding_38
        LocalClass2 @ binding_37
      }

      class LocalClass1 with constructor 'LocalClass2' {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references
      }

      class LocalClass2 with constructor 'LocalClass3' {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references
      }
    }
  }

  function test_returnFromConstructor as 'test_returnFromConstructor' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_39 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_40 @ local[0];
        readonly const 'inst' # binding_41 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_40
        assert @ free assert
        inst @ binding_41
        LocalClass @ binding_40
        assert @ free assert
        inst @ binding_41
      }

      class LocalClass with constructor 'LocalClass4' {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        function LocalClass_constructor as 'LocalClass_constructor1' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_42 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            No references
          }
        }
      }
    }
  }

  function test_operators as 'test_operators' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_43 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_44 @ local[0];
        readonly const 'inst' # binding_45 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_44
        assertEqual @ free assertEqual
        LocalClass @ binding_44
        assertEqual @ free assertEqual
        inst @ binding_45
        assertEqual @ free assertEqual
        Microvium @ free Microvium
        LocalClass @ binding_44
        assertEqual @ free assertEqual
        Microvium @ free Microvium
        inst @ binding_45
        assertEqual @ free assertEqual
        LocalClass @ binding_44
        assertEqual @ free assertEqual
        inst @ binding_45
        assert @ free assert
        Number @ free Number
        LocalClass @ binding_44
        assert @ free assert
        Number @ free Number
        inst @ binding_45
      }

      class LocalClass with constructor 'LocalClass5' {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references
      }
    }
  }

  function test_classAsMember as 'test_classAsMember' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_46 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_47 @ local[0];
        readonly const 'obj' # binding_48 @ local[1];
        readonly const 'inst' # binding_49 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        LocalClass @ binding_47
        obj @ binding_48
        assertEqual @ free assertEqual
        inst @ binding_49
        assertEqual @ free assertEqual
        inst @ binding_49
      }

      class LocalClass with constructor 'LocalClass6' {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        function LocalClass_constructor as 'LocalClass_constructor2' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_50 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            references { '#this' @ binding_50 }
          }
        }

        function LocalClass_foo as 'LocalClass_foo' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_51 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            No references
          }
        }
      }
    }
  }

  function test_closingOverClass as 'test_closingOverClass' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_52 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        function 'inner' # binding_53 @ local[0];
        readonly const 'LocalClass' # binding_54 @ local[1];
        readonly const 'inst' # binding_55 @ local[2]
      }

      prologue {
        func 'inner' -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        inner @ binding_53
        LocalClass @ binding_54
        assertEqual @ free assertEqual
        inst @ binding_55
        assertEqual @ free assertEqual
        inst @ binding_55
      }

      function inner as 'inner' {
        [closure scope with 1 slots]; [0 var declarations]

        bindings { this '#this' # binding_56 @ arg[0] }

        No references

        prologue { new scope[1] }

        block {
          sameLifetimeAsParent: true

          bindings {
            class 'LocalClass' # binding_57 @ scoped[!0]
          }

          prologue {  }

          epilogue {  }

          No references

          class LocalClass with constructor 'LocalClass7' {
            bindings {  }

            prologue {  }

            epilogue {  }

            No references

            function LocalClass_constructor as 'LocalClass_constructor3' {
              [no closure scope]; [0 var declarations]

              bindings {
                this '#this' # binding_58 @ arg[0]
              }

              No references

              prologue {  }

              block {
                sameLifetimeAsParent: true

                bindings {  }

                prologue {  }

                epilogue {  }

                references { '#this' @ binding_58 }
              }
            }

            function LocalClass_foo as 'LocalClass_foo1' {
              [no closure scope]; [0 var declarations]

              bindings {
                this '#this' # binding_59 @ arg[0]
              }

              No references

              prologue {  }

              block {
                sameLifetimeAsParent: true

                bindings {  }

                prologue {  }

                epilogue {  }

                No references
              }
            }
          }

          closure function '<anonymous>' as 'anonymous' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              LocalClass @ binding_57 using relative slot index 1
            }

            prologue {  }
          }
        }
      }
    }
  }
}
[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'assertEqual'
[free var] 'assert'
[free var] 'Microvium'
[free var] 'Number'
[free var] 'undefined'
[free var] 'Reflect'
[global slot] 'thisModule'
[global slot] 'x'
[global slot] 'GlobalClass'
[global slot] 'globalInst'
[global slot] 'test_globalClass'
[global slot] 'test_globalInstance'
[global slot] 'test_localClass'
[global slot] 'test_inheritedProperties'
[global slot] 'test_proto'
[global slot] 'test_returnFromConstructor'
[global slot] 'test_operators'
[global slot] 'test_classAsMember'
[global slot] 'test_closingOverClass'
[global slot] 'test_closureInConstructor'
[global slot] 'test_classProperty'
[global slot] 'test_closureMethod'
[global slot] 'test_thisInInitializer'
[global slot] 'test_initializerClosingOverThis'
[global slot] 'test_initializerClosingOverOuter'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    readonly const 'x' # binding_2 @ global['x'];
    class 'GlobalClass' # binding_3 @ global['GlobalClass'];
    readonly const 'globalInst' # binding_4 @ global['globalInst'];
    function 'test_globalClass' # binding_5 @ global['test_globalClass'];
    function 'test_globalInstance' # binding_6 @ global['test_globalInstance'];
    function 'test_localClass' # binding_7 @ global['test_localClass'];
    function 'test_inheritedProperties' # binding_8 @ global['test_inheritedProperties'];
    function 'test_proto' # binding_9 @ global['test_proto'];
    function 'test_returnFromConstructor' # binding_10 @ global['test_returnFromConstructor'];
    function 'test_operators' # binding_11 @ global['test_operators'];
    function 'test_classAsMember' # binding_12 @ global['test_classAsMember'];
    function 'test_closingOverClass' # binding_13 @ global['test_closingOverClass'];
    function 'test_closureInConstructor' # binding_14 @ global['test_closureInConstructor'];
    function 'test_classProperty' # binding_15 @ global['test_classProperty'];
    function 'test_closureMethod' # binding_16 @ global['test_closureMethod'];
    function 'test_thisInInitializer' # binding_17 @ global['test_thisInInitializer'];
    function 'test_initializerClosingOverThis' # binding_18 @ global['test_initializerClosingOverThis'];
    function 'test_initializerClosingOverOuter' # binding_19 @ global['test_initializerClosingOverOuter']
  }

  references {
    vmExport @ free vmExport
    run @ binding_1
    GlobalClass @ binding_3
    GlobalClass @ binding_3
  }

  prologue {
    func 'run' -> local[0]
    func 'test_globalClass' -> global['test_globalClass']
    func 'test_globalInstance' -> global['test_globalInstance']
    func 'test_localClass' -> global['test_localClass']
    func 'test_inheritedProperties' -> global['test_inheritedProperties']
    func 'test_proto' -> global['test_proto']
    func 'test_returnFromConstructor' -> global['test_returnFromConstructor']
    func 'test_operators' -> global['test_operators']
    func 'test_classAsMember' -> global['test_classAsMember']
    func 'test_closingOverClass' -> global['test_closingOverClass']
    func 'test_closureInConstructor' -> global['test_closureInConstructor']
    func 'test_classProperty' -> global['test_classProperty']
    func 'test_closureMethod' -> global['test_closureMethod']
    func 'test_thisInInitializer' -> global['test_thisInInitializer']
    func 'test_initializerClosingOverThis' -> global['test_initializerClosingOverThis']
    func 'test_initializerClosingOverOuter' -> global['test_initializerClosingOverOuter']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_20 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        test_globalClass @ binding_5
        test_globalInstance @ binding_6
        test_localClass @ binding_7
        test_inheritedProperties @ binding_8
        test_proto @ binding_9
        test_returnFromConstructor @ binding_10
        test_operators @ binding_11
        test_classAsMember @ binding_12
        test_closingOverClass @ binding_13
        test_closureInConstructor @ binding_14
        test_classProperty @ binding_15
        test_closureMethod @ binding_16
        test_thisInInitializer @ binding_17
        test_initializerClosingOverThis @ binding_18
        test_initializerClosingOverOuter @ binding_19
      }
    }
  }

  class GlobalClass with {
    bindings {  }

    prologue {  }

    epilogue {  }

    No references

    function GlobalClass_myMethod as 'GlobalClass_myMethod' {
      [no closure scope]; [0 var declarations]

      bindings { this '#this' # binding_21 @ arg[0] }

      No references

      prologue {  }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue {  }

        references { '#this' @ binding_21 }
      }
    }

    function GlobalClass_myStaticMethod as 'GlobalClass_myStaticMethod' {
      [no closure scope]; [0 var declarations]

      bindings { this '#this' # binding_22 @ arg[0] }

      No references

      prologue {  }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue {  }

        references {
          '#this' @ binding_22
          '#this' @ binding_22
          '#this' @ binding_22
        }
      }
    }

    block {
      sameLifetimeAsParent: true

      bindings { this '#this' # binding_23 @ arg[0] }

      prologue {  }

      epilogue {  }

      No references
    }

    function GlobalClass as 'GlobalClass' {
      [no closure scope]; [0 var declarations]

      bindings { this '#this' # binding_24 @ arg[0] }

      No references

      prologue {  }

      block {
        sameLifetimeAsParent: true

        bindings { param 'y' # binding_25 @ arg[1] }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            '#this' @ binding_24; y @ binding_25
          }
        }
      }
    }
  }

  function test_globalClass as 'test_globalClass' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_26 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        readonly const 'inst' # binding_27 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual
        GlobalClass @ binding_3
        assertEqual @ free assertEqual
        GlobalClass @ binding_3
        assertEqual @ free assertEqual
        GlobalClass @ binding_3
        GlobalClass @ binding_3
        assertEqual @ free assertEqual
        inst @ binding_27
        assertEqual @ free assertEqual
        inst @ binding_27
        assertEqual @ free assertEqual
        inst @ binding_27
      }
    }
  }

  function test_globalInstance as 'test_globalInstance' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_28 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        readonly const 'y' # binding_29 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual
        globalInst @ binding_4
        assertEqual @ free assertEqual
        globalInst @ binding_4
        assertEqual @ free assertEqual
        globalInst @ binding_4
        assertEqual @ free assertEqual
        globalInst @ binding_4
        x @ binding_2
        y @ binding_29
      }
    }
  }

  function test_localClass as 'test_localClass' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_30 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_31 @ local[0];
        readonly const 'inst' # binding_32 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_31
        assertEqual @ free assertEqual
        LocalClass @ binding_31
        assertEqual @ free assertEqual
        LocalClass @ binding_31
        assertEqual @ free assertEqual
        LocalClass @ binding_31
        LocalClass @ binding_31
        assertEqual @ free assertEqual
        inst @ binding_32
        assertEqual @ free assertEqual
        inst @ binding_32
        assertEqual @ free assertEqual
        inst @ binding_32
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        function LocalClass_myMethod as 'LocalClass_myMethod' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_33 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            references { '#this' @ binding_33 }
          }
        }

        function LocalClass_myStaticMethod as 'LocalClass_myStaticMethod' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_34 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            references {
              '#this' @ binding_34
              '#this' @ binding_34
              '#this' @ binding_34
            }
          }
        }

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_35 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_36 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings { param 'y' # binding_37 @ arg[1] }

            prologue {  }

            epilogue {  }

            No references

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references {
                '#this' @ binding_36; y @ binding_37
              }
            }
          }
        }
      }
    }
  }

  function test_inheritedProperties as 'test_inheritedProperties' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_38 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_39 @ local[0];
        readonly const 'inst1' # binding_40 @ local[1];
        readonly const 'inst2' # binding_41 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        LocalClass @ binding_39
        LocalClass @ binding_39
        LocalClass @ binding_39
        assertEqual @ free assertEqual
        inst1 @ binding_40
        assertEqual @ free assertEqual
        inst2 @ binding_41
        inst1 @ binding_40
        LocalClass @ binding_39
        assertEqual @ free assertEqual
        inst1 @ binding_40
        assertEqual @ free assertEqual
        inst2 @ binding_41
        assertEqual @ free assertEqual
        LocalClass @ binding_39
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_42 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass1' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_43 @ arg[0] }

          No references

          prologue {  }
        }
      }
    }
  }

  function test_proto as 'test_proto' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_44 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass1' # binding_45 @ local[0];
        class 'LocalClass2' # binding_46 @ local[1];
        readonly const 'inst1' # binding_47 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        LocalClass1 @ binding_45
        assert @ free assert
        inst1 @ binding_47
        LocalClass1 @ binding_45
        assert @ free assert
        inst1 @ binding_47
        LocalClass2 @ binding_46
      }

      class LocalClass1 with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_48 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass1 as 'LocalClass2' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_49 @ arg[0] }

          No references

          prologue {  }
        }
      }

      class LocalClass2 with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_50 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass2 as 'LocalClass3' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_51 @ arg[0] }

          No references

          prologue {  }
        }
      }
    }
  }

  function test_returnFromConstructor as 'test_returnFromConstructor' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_52 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_53 @ local[0];
        readonly const 'inst' # binding_54 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_53
        assert @ free assert
        inst @ binding_54
        LocalClass @ binding_53
        assert @ free assert
        inst @ binding_54
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_55 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass4' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_56 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            No references

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              No references
            }
          }
        }
      }
    }
  }

  function test_operators as 'test_operators' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_57 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_58 @ local[0];
        readonly const 'inst' # binding_59 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_58
        assertEqual @ free assertEqual
        LocalClass @ binding_58
        assertEqual @ free assertEqual
        inst @ binding_59
        assertEqual @ free assertEqual
        Microvium @ free Microvium
        LocalClass @ binding_58
        assertEqual @ free assertEqual
        Microvium @ free Microvium
        inst @ binding_59
        assertEqual @ free assertEqual
        LocalClass @ binding_58
        assertEqual @ free assertEqual
        inst @ binding_59
        assert @ free assert
        Number @ free Number
        LocalClass @ binding_58
        assert @ free assert
        Number @ free Number
        inst @ binding_59
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_60 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass5' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_61 @ arg[0] }

          No references

          prologue {  }
        }
      }
    }
  }

  function test_classAsMember as 'test_classAsMember' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_62 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_63 @ local[0];
        readonly const 'obj' # binding_64 @ local[1];
        readonly const 'inst' # binding_65 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        LocalClass @ binding_63
        obj @ binding_64
        assertEqual @ free assertEqual
        inst @ binding_65
        assertEqual @ free assertEqual
        inst @ binding_65
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        function LocalClass_foo as 'LocalClass_foo' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_66 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            No references
          }
        }

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_67 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass6' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_68 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            No references

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { '#this' @ binding_68 }
            }
          }
        }
      }
    }
  }

  function test_closingOverClass as 'test_closingOverClass' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_69 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        function 'inner' # binding_70 @ local[0];
        readonly const 'LocalClass' # binding_71 @ local[1];
        readonly const 'inst' # binding_72 @ local[2]
      }

      prologue {
        func 'inner' -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        inner @ binding_70
        LocalClass @ binding_71
        assertEqual @ free assertEqual
        inst @ binding_72
        assertEqual @ free assertEqual
        inst @ binding_72
      }

      function inner as 'inner' {
        [closure scope with 1 slots]; [0 var declarations]

        bindings { this '#this' # binding_73 @ arg[0] }

        No references

        prologue { new scope[1] }

        block {
          sameLifetimeAsParent: true

          bindings {
            class 'LocalClass' # binding_74 @ scoped[!0]
          }

          prologue {  }

          epilogue {  }

          No references

          class LocalClass with {
            bindings {  }

            prologue {  }

            epilogue {  }

            No references

            function LocalClass_foo as 'LocalClass_foo1' {
              [no closure scope]; [0 var declarations]

              bindings {
                this '#this' # binding_75 @ arg[0]
              }

              No references

              prologue {  }

              block {
                sameLifetimeAsParent: true

                bindings {  }

                prologue {  }

                epilogue {  }

                No references
              }
            }

            block {
              sameLifetimeAsParent: true

              bindings {
                this '#this' # binding_76 @ arg[0]
              }

              prologue {  }

              epilogue {  }

              No references
            }

            function LocalClass as 'LocalClass7' {
              [no closure scope]; [0 var declarations]

              bindings {
                this '#this' # binding_77 @ arg[0]
              }

              No references

              prologue {  }

              block {
                sameLifetimeAsParent: true

                bindings {  }

                prologue {  }

                epilogue {  }

                No references

                block {
                  sameLifetimeAsParent: true

                  bindings {  }

                  prologue {  }

                  epilogue {  }

                  references { '#this' @ binding_77 }
                }
              }
            }
          }

          closure function '<anonymous>' as 'anonymous' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              LocalClass @ binding_74 using relative slot index 1
            }

            prologue {  }
          }
        }
      }
    }
  }

  function test_closureInConstructor as 'test_closureInConstructor' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_78 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_79 @ local[0];
        readonly const 'inst' # binding_80 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_79
        assertEqual @ free assertEqual
        inst @ binding_80
        undefined @ free undefined
        assertEqual @ free assertEqual
        inst @ binding_80
        assertEqual @ free assertEqual
        inst @ binding_80
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_81 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass8' {
          [closure scope with 1 slots]; [0 var declarations]

          bindings { this '#this' # binding_82 @ arg[0] }

          No references

          prologue { new scope[1] }

          block {
            sameLifetimeAsParent: true

            bindings {
              writable param 'x' # binding_83 @ scoped[!0]
            }

            prologue { arg[1] -> scoped[+1] }

            epilogue {  }

            No references

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { '#this' @ binding_82 }

              closure function '<anonymous>' as 'anonymous1' {
                [no closure scope]; [0 var declarations]

                bindings {  }

                references {
                  x @ binding_83 using relative slot index 1
                }

                prologue {  }
              }
            }
          }
        }
      }
    }
  }

  function test_classProperty as 'test_classProperty' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_84 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_85 @ local[0];
        readonly const 'inst1' # binding_86 @ local[1];
        readonly const 'inst2' # binding_87 @ local[2];
        readonly const 'keys' # binding_88 @ local[3]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
        new let -> local[3]
      }

      epilogue { Pop(4) }

      references {
        LocalClass @ binding_85
        LocalClass @ binding_85
        assertEqual @ free assertEqual
        inst1 @ binding_86
        inst1 @ binding_86
        assertEqual @ free assertEqual
        inst1 @ binding_86
        assertEqual @ free assertEqual
        inst1 @ binding_86
        undefined @ free undefined
        assertEqual @ free assertEqual
        inst2 @ binding_87
        Reflect @ free Reflect
        inst1 @ binding_86
        assertEqual @ free assertEqual
        keys @ binding_88
        assertEqual @ free assertEqual
        keys @ binding_88
        assertEqual @ free assertEqual
        keys @ binding_88
        assertEqual @ free assertEqual
        inst1 @ binding_86
        undefined @ free undefined
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_89 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass9' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_90 @ arg[0] }

          No references

          prologue {  }
        }
      }
    }
  }

  function test_closureMethod as 'test_closureMethod' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_91 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'x' # binding_92 @ scoped[!0];
        class 'LocalClass' # binding_93 @ local[0];
        readonly const 'inst' # binding_94 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_93
        assertEqual @ free assertEqual
        inst @ binding_94
        assertEqual @ free assertEqual
        inst @ binding_94
        assertEqual @ free assertEqual
        x @ binding_92 using relative slot index 1
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        closure function LocalClass_method as 'LocalClass_method' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_95 @ arg[0] }

          No references

          prologue {  }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue {  }

            references {
              x @ binding_92 using relative slot index 1
            }
          }
        }

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_96 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass10' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_97 @ arg[0] }

          No references

          prologue {  }
        }
      }
    }
  }

  function test_thisInInitializer as 'test_thisInInitializer' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_98 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_99 @ local[0];
        readonly const 'inst' # binding_100 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_99
        assertEqual @ free assertEqual
        inst @ binding_100
        assertEqual @ free assertEqual
        inst @ binding_100
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_101 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass11' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_102 @ arg[0] }

          references { '#this' @ binding_102 }

          prologue {  }
        }
      }
    }
  }

  function test_initializerClosingOverThis as 'test_initializerClosingOverThis' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_103 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        class 'LocalClass' # binding_104 @ local[0];
        readonly const 'inst' # binding_105 @ local[1];
        readonly const 'f' # binding_106 @ local[2]
      }

      prologue {
        new let -> local[0]
        new let -> local[1]
        new let -> local[2]
      }

      epilogue { Pop(3) }

      references {
        LocalClass @ binding_104
        inst @ binding_105
        assertEqual @ free assertEqual
        f @ binding_106
        assertEqual @ free assertEqual
        f @ binding_106
        assertEqual @ free assertEqual
        inst @ binding_105
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_107 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        function LocalClass as 'LocalClass12' {
          [closure scope with 1 slots]; [0 var declarations]

          bindings {
            this '#this' # binding_108 @ scoped[!0]
          }

          No references

          prologue {
            new scope[1]; arg[0] as this -> scoped[+1]
          }

          closure function '<anonymous>' as 'anonymous2' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              '#this' @ binding_108 using relative slot index 1
            }

            prologue {  }
          }
        }
      }
    }
  }

  function test_initializerClosingOverOuter as 'test_initializerClosingOverOuter' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_109 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'count' # binding_110 @ scoped[!0];
        class 'LocalClass' # binding_111 @ local[0];
        readonly const 'inst' # binding_112 @ local[1]
      }

      prologue { new let -> local[0]; new let -> local[1] }

      epilogue { Pop(2) }

      references {
        LocalClass @ binding_111
        assertEqual @ free assertEqual
        inst @ binding_112
        assertEqual @ free assertEqual
        inst @ binding_112
        assertEqual @ free assertEqual
        count @ binding_110 using relative slot index 1
      }

      class LocalClass with {
        bindings {  }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameLifetimeAsParent: true

          bindings { this '#this' # binding_113 @ arg[0] }

          prologue {  }

          epilogue {  }

          No references
        }

        closure function LocalClass as 'LocalClass13' {
          [no closure scope]; [0 var declarations]

          bindings { this '#this' # binding_114 @ arg[0] }

          No references

          prologue {  }

          closure function '<anonymous>' as 'anonymous3' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              count @ binding_110 using relative slot index 1
            }

            prologue {  }
          }
        }
      }
    }
  }
}
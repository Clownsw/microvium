export 0 = &function run;

slot ['global:Promise'] = &allocation 5;
slot ['global:Reflect'] = &allocation 1;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:asyncTestComplete'] = host function 6;
slot myAsyncFunc = &function myAsyncFunc;
slot runAsync = &function runAsync;
slot test_asyncReturnsPromise = &function test_asyncReturnsPromise;
slot test_promiseKeys = &function test_promiseKeys;

function ['Reflect.ownKeys']() {
  entry:
    LoadArg(index 1);
    ObjectKeys();
    Return();
}

function asyncCatchBlock() {
  entry:
    Literal(lit false);
    AsyncComplete();
}

function asyncContinue() {
  entry:
    LoadScoped(index 1);
    Literal(lit undefined);
    LoadScoped(index 2);
    LoadScoped(index 3);
    Call(count 3, flag false);
    Return();
}

function asyncHostCallback() {
  entry:
    Literal(lit undefined);
    LoadArg(index 2);
    LoadArg(index 1);
    AsyncComplete();
}

function myAsyncFunc() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function run() {
  entry:
    // Void-call async function
    LoadGlobal(name 'runAsync');
    Literal(lit undefined);
    Call(count 1, flag true);
    Literal(lit undefined);
    Return();
}

function runAsync() {
  entry:
    AsyncStart(count 2, flag false);
    StartTry(@block1);
    LoadGlobal(name 'test_asyncReturnsPromise');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_promiseKeys');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'global:asyncTestComplete');
    Literal(lit undefined);
    Literal(lit true);
    Literal(lit undefined);
    Call(count 3, flag true);
    EndTry();
    Jump(@block2);
  block1:
    LoadGlobal(name 'global:asyncTestComplete');
    Literal(lit undefined);
    Literal(lit false);
    LoadVar(index 3);
    Call(count 3, flag true);
    Pop(count 1);
    Jump(@block2);
  block2:
    Literal(lit undefined);
    AsyncReturn();
}

function test_asyncReturnsPromise() {
  entry:
    Literal(lit deleted);
    LoadGlobal(name 'myAsyncFunc');
    Literal(lit undefined);
    Call(count 1, flag false);
    StoreVar(index 0);
    LoadGlobal(name 'global:assert');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit '__proto__');
    ObjectGet();
    LoadGlobal(name 'global:Promise');
    Literal(lit 'prototype');
    ObjectGet();
    BinOp(op '===');
    Call(count 2, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_promiseKeys() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    LoadGlobal(name 'myAsyncFunc');
    Literal(lit undefined);
    Call(count 1, flag false);
    StoreVar(index 3);
    Literal(lit undefined);
    LoadGlobal(name 'global:Reflect');
    LoadVar(index 7);
    Literal(lit 'ownKeys');
    ObjectGet();
    StoreVar(index 6);
    LoadVar(index 3);
    Call(count 2, flag false);
    StoreVar(index 4);
    // Even though the promise has 2 internal slots, which occupy the first
    // key-value pair slot, it should still have no own properties since the
    // the key used for internal slots is not a valid property key.
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 4);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 0);
    Call(count 3, flag true);
    // Reflect.ownKeys is ignoring the internal slots but should not ignore the
    // properties that follow the internal slots
    Literal(lit 5);
    LoadVar(index 3);
    Literal(lit 'prop');
    LoadVar(index 6);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    LoadGlobal(name 'global:Reflect');
    LoadVar(index 7);
    Literal(lit 'ownKeys');
    ObjectGet();
    StoreVar(index 6);
    LoadVar(index 3);
    Call(count 2, flag false);
    StoreVar(index 5);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 5);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 1);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 5);
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'prop');
    Call(count 3, flag true);
    Pop(count 3);
    Literal(lit undefined);
    AsyncReturn();
}

allocation 1 = {
  ownKeys: &function ['Reflect.ownKeys'],
};

allocation 5 = {
  prototype: &allocation 6,
};

allocation 6 = {
};
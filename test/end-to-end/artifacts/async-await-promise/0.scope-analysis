[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'asyncTestComplete'
[free var] 'undefined'
[free var] 'assert'
[free var] 'Promise'
[free var] 'Reflect'
[free var] 'assertEqual'
[global slot] 'thisModule'
[global slot] 'Error'
[global slot] 'runAsync'
[global slot] 'test_asyncReturnsPromise'
[global slot] 'myAsyncFunc'
[global slot] 'test_promiseKeys'
[global slot] 'test_promiseAwait'
[global slot] 'test_promiseAwaitReject'
[global slot] 'myAsyncFuncReject'
[global slot] 'test_awaitMustBeAsynchronous'
[global slot] 'test_promiseConstructor'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    class 'Error' # binding_1 @ global['Error'];
    function 'run' # binding_2 @ local[0];
    function 'runAsync' # binding_3 @ global['runAsync'];
    function 'test_asyncReturnsPromise' # binding_4 @ global['test_asyncReturnsPromise'];
    function 'myAsyncFunc' # binding_5 @ global['myAsyncFunc'];
    function 'test_promiseKeys' # binding_6 @ global['test_promiseKeys'];
    function 'test_promiseAwait' # binding_7 @ global['test_promiseAwait'];
    function 'test_promiseAwaitReject' # binding_8 @ global['test_promiseAwaitReject'];
    function 'myAsyncFuncReject' # binding_9 @ global['myAsyncFuncReject'];
    function 'test_awaitMustBeAsynchronous' # binding_10 @ global['test_awaitMustBeAsynchronous'];
    function 'test_promiseConstructor' # binding_11 @ global['test_promiseConstructor']
  }

  references { vmExport @ free vmExport; run @ binding_2 }

  prologue {
    func 'run' -> local[0]
    func 'runAsync' -> global['runAsync']
    func 'test_asyncReturnsPromise' -> global['test_asyncReturnsPromise']
    func 'myAsyncFunc' -> global['myAsyncFunc']
    func 'test_promiseKeys' -> global['test_promiseKeys']
    func 'test_promiseAwait' -> global['test_promiseAwait']
    func 'test_promiseAwaitReject' -> global['test_promiseAwaitReject']
    func 'myAsyncFuncReject' -> global['myAsyncFuncReject']
    func 'test_awaitMustBeAsynchronous' -> global['test_awaitMustBeAsynchronous']
    func 'test_promiseConstructor' -> global['test_promiseConstructor']
  }

  class Error with {
    bindings {  }

    prologue {  }

    epilogue {  }

    No references

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings { this '#this' # binding_12 @ arg[0] }

      prologue {  }

      epilogue {  }

      No references
    }

    function Error as 'Error' {
      [no closure scope]; [0 var declarations]

      bindings { this '#this' # binding_13 @ arg[0] }

      No references

      prologue {  }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { param 'message' # binding_14 @ arg[1] }

        prologue {  }

        epilogue {  }

        No references

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            '#this' @ binding_13; message @ binding_14
          }
        }
      }
    }
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_15 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      references { runAsync @ binding_3 }
    }
  }

  function runAsync as 'runAsync' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_16 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          test_asyncReturnsPromise @ binding_4
          test_promiseKeys @ binding_6
          test_promiseAwait @ binding_7
          test_promiseAwaitReject @ binding_8
          test_awaitMustBeAsynchronous @ binding_10
          test_promiseConstructor @ binding_11
          asyncTestComplete @ free asyncTestComplete
          undefined @ free undefined
        }
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { catch-param 'e' # binding_17 @ local[3] }

        prologue { Stack has exception }

        epilogue { Pop(1) }

        references {
          asyncTestComplete @ free asyncTestComplete
          e @ binding_17
        }
      }
    }
  }

  function test_asyncReturnsPromise as 'test_asyncReturnsPromise' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_18 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'promise' # binding_19 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        myAsyncFunc @ binding_5
        assert @ free assert
        promise @ binding_19
        Promise @ free Promise
      }
    }
  }

  function myAsyncFunc as 'myAsyncFunc' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_20 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      No references
    }
  }

  function test_promiseKeys as 'test_promiseKeys' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_21 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'promise' # binding_22 @ local[3];
        readonly const 'keys' # binding_23 @ local[4];
        readonly const 'keys2' # binding_24 @ local[5]
      }

      prologue {
        new let -> local[3]
        new let -> local[4]
        new let -> local[5]
      }

      epilogue { Pop(3) }

      references {
        myAsyncFunc @ binding_5
        Reflect @ free Reflect
        promise @ binding_22
        assertEqual @ free assertEqual
        keys @ binding_23
        promise @ binding_22
        Reflect @ free Reflect
        promise @ binding_22
        assertEqual @ free assertEqual
        keys2 @ binding_24
        assertEqual @ free assertEqual
        keys2 @ binding_24
      }
    }
  }

  function test_promiseAwait as 'test_promiseAwait' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_25 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'promise' # binding_26 @ local[3];
        readonly const 'result' # binding_27 @ local[4]
      }

      prologue { new let -> local[3]; new let -> local[4] }

      epilogue { Pop(2) }

      references {
        myAsyncFunc @ binding_5
        promise @ binding_26
        assertEqual @ free assertEqual
        result @ binding_27
      }
    }
  }

  function test_promiseAwaitReject as 'test_promiseAwaitReject' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_28 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'promise' # binding_29 @ local[3]
      }

      prologue { new let -> local[3] }

      epilogue { Pop(1) }

      references { myAsyncFuncReject @ binding_9 }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          promise @ binding_29; assert @ free assert
        }
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { catch-param 'e' # binding_30 @ local[4] }

        prologue { Stack has exception }

        epilogue { Pop(1) }

        references {
          assertEqual @ free assertEqual; e @ binding_30
        }
      }
    }
  }

  function myAsyncFuncReject as 'myAsyncFuncReject' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_31 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      references { Error @ binding_1 }
    }
  }

  function test_awaitMustBeAsynchronous as 'test_awaitMustBeAsynchronous' {
    [closure scope with 3 slots: async-continuation, async-callback, s]
    [0 var declarations]

    bindings { this '#this' # binding_32 @ arg[0] }

    No references

    prologue { AsyncStart(3, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 's' # binding_33 @ scoped[!2];
        readonly const 'promise' # binding_34 @ local[4];
        function 'inner' # binding_35 @ local[3]
      }

      prologue {
        func 'inner' -> local[3] [non-embedded closure]
        new let -> local[4]
      }

      epilogue { Pop(2) }

      references {
        inner @ binding_35
        s @ binding_33 using relative slot index 2
        promise @ binding_34
        assertEqual @ free assertEqual
        s @ binding_33 using relative slot index 2
      }

      closure function inner as 'inner' {
        [closure scope with 3 slots: async-continuation, async-callback, parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_36 @ arg[0] }

        No references

        prologue { AsyncStart(3, true) }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {
            readonly const 'promise' # binding_37 @ local[3]
          }

          prologue { new let -> local[3] }

          epilogue { Pop(1) }

          references {
            myAsyncFunc @ binding_5
            s @ binding_33 using relative slot index 7
            promise @ binding_37
            s @ binding_33 using relative slot index 7
          }
        }
      }
    }
  }

  function test_promiseConstructor as 'test_promiseConstructor' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_38 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'promise' # binding_39 @ local[3];
        readonly const 'result' # binding_40 @ local[4]
      }

      prologue { new let -> local[3]; new let -> local[4] }

      epilogue { Pop(2) }

      references {
        Promise @ free Promise
        promise @ binding_39
        assertEqual @ free assertEqual
        result @ binding_40
      }

      function '<anonymous>' as 'anonymous' {
        [no closure scope]; [0 var declarations]

        bindings {
          param 'resolve' # binding_41 @ arg[1];
          param 'reject' # binding_42 @ arg[2]
        }

        No references

        prologue {  }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references { resolve @ binding_41 }
        }
      }
    }
  }
}
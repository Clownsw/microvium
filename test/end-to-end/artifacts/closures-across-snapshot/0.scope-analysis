[this module slot] 'thisModule'
[free var] 'vmExport'; [free var] 'assertEqual'
[global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings { function 'init' # binding_1 @ local[0] }

  references { init @ binding_1 }

  prologue { func 'init' -> local[0] }

  function init as 'init' {
    [closure scope with 2 slots: embedded-closure:run, x]
    [0 var declarations]

    bindings { this '#this' # binding_2 @ arg[0] }

    No references

    prologue { ScopeNew(2) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        let 'x' # binding_3 @ scoped[!1];
        function 'run' # binding_4 @ local[0]
      }

      prologue { func 'run' -> local[0] [embedded closure] }

      epilogue { Pop(1) }

      references {
        vmExport @ free vmExport; run @ binding_4
      }

      embedded closure function run as 'run' {
        [no closure scope]; [0 var declarations]

        bindings { this '#this' # binding_5 @ arg[0] }

        No references

        prologue {  }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            assertEqual @ free assertEqual
            x @ binding_3 using relative slot index 1
          }
        }
      }
    }
  }
}
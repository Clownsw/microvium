export 0 = &function ['./test/end-to-end/tests/bitwise-operations.test.mvms:run'];

slot ['global:Infinity'] = Infinity;
slot ['global:NaN'] = NaN;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:isNaN'] = host function 65533;
slot ['global:overflowChecks'] = false;
slot ['global:print'] = host function 1;
slot ['global:undefined'] = undefined;
slot ['global:vmExport'] = &ephemeral vmExport;

function ['./test/end-to-end/tests/bitwise-operations.test.mvms:run']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3);
    Literal(lit 0);
    BinOp(op '<<');
    Literal(lit 3);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3);
    Literal(lit 2);
    BinOp(op '<<');
    Literal(lit 12);
    Call(count 2);
    Pop(count 1);
    // Wrap around
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3);
    Literal(lit 34);
    BinOp(op '<<');
    Literal(lit 12);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3);
    Literal(lit 32);
    BinOp(op '<<');
    Literal(lit 3);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 2);
    Literal(lit 31);
    BinOp(op '<<');
    Literal(lit 0);
    Call(count 2);
    Pop(count 1);
    // Left shift negative numbers
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -2);
    Literal(lit 2);
    BinOp(op '<<');
    Literal(lit -8);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 8);
    Literal(lit 1);
    BinOp(op '>>');
    Literal(lit 4);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 8);
    Literal(lit 1);
    BinOp(op '>>>');
    Literal(lit 4);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -8);
    Literal(lit 1);
    BinOp(op '>>');
    Literal(lit -4);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -8);
    Literal(lit 1);
    BinOp(op '>>>');
    Literal(lit 2147483644);
    Call(count 2);
    Pop(count 1);
    // Shifting by zero
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 4);
    Literal(lit 0);
    BinOp(op '>>');
    Literal(lit 4);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 4);
    Literal(lit 0);
    BinOp(op '>>>');
    Literal(lit 4);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -4);
    Literal(lit 0);
    BinOp(op '>>');
    Literal(lit -4);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -4);
    Literal(lit 0);
    BinOp(op '>>>');
    LoadGlobal(name 'global:overflowChecks');
    Branch(@block1, @block2);
  block1:
    Literal(lit 4294967292);
    Jump(@block3);
  block2:
    Literal(lit -4);
    Jump(@block3);
  block3:
    Call(count 2);
    Pop(count 1);
    // Shifting by negative numbers
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 8);
    Literal(lit -30);
    BinOp(op '>>');
    Literal(lit 8);
    Literal(lit 2);
    BinOp(op '>>');
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 8);
    Literal(lit -30);
    BinOp(op '>>>');
    Literal(lit 8);
    Literal(lit 2);
    BinOp(op '>>>');
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 8);
    Literal(lit -30);
    BinOp(op '<<');
    Literal(lit 8);
    Literal(lit 2);
    BinOp(op '<<');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 1 = {
};
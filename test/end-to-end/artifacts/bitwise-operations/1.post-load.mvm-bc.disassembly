Bytecode size: 467 B

Ofst Addr    Size
==== ==== =======
0000        44  - # Header
0000            1     bytecodeVersion: 1
0001            1     headerSize: 44
0002            2     bytecodeSize: 467
0004            2     expectedCRC: cdd1
0006            2     requiredEngineVersion: 0
0008            4     requiredFeatureFlags: 1
000c            2     globalVariableCount: 2
000e            2     initialDataOffset: 002c
0010            2     initialDataSize: 4
0012            2     initialHeapOffset: 0030
0014            2     initialHeapSize: 10
0016            2     gcRootsOffset: 003a
0018            2     gcRootsCount: 0
001a            2     importTableOffset: 003a
001c            2     importTableSize: 2
001e            2     exportTableOffset: 003c
0020            2     exportTableSize: 4
0022            2     shortCallTableOffset: 0040
0024            2     shortCallTableSize: 0
0026            2     stringTableOffset: 0040
0028            2     stringTableSize: 2
002a            2     arrayProtoPointer: &4002
002c 8000    4  - # Globals
002c 8000       2     [0]: &c044
002e 8002       2     [1]: false
0030 4000   10  - # GC allocations
0030 4000       2     Header [Size: 2, Type: TC_REF_PROPERTY_LIST]
0032 4002    2  -     # Object as TsPropertyList
0032 4002       2         first: &4004
0034 4004    6  -     # TsPropertyCell
0034 4004       2         next: &0000
0036 4006       2         key: &c048
0038 4008       2         value: &c05f
003a c03a    2  - # Import Table
003a c03a       2     [0]: 3
003c c03c    4  - # Export Table
003c c03c       4     [0]: &c06f
0040 c040    2  - # String Table
0040 c040       2     [0]: &c048
0042 c042  401  - # ROM allocations
0042 c042       2     Header [Size: 2, Type: TC_REF_HOST_FUNC]
0044 c044       2     Value: Import Table [0] (&c03a)
0046 c046       2     Header [Size: 5, Type: TC_REF_UNIQUE_STRING]
0048 c048       5     Value: 'push'
004d c04d       2     Header [Size: 4, Type: TC_REF_INT32]
004f c04f       4     Value: 2147483644
0053 c053       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0055 c055       8     Value: 4294967292
005d c05d       2     Header [Size: 14, Type: TC_REF_FUNCTION]
005f c05f   14  -     # Function <builtin>:Array_push
005f c05f       1         maxStackDepth: 5
0060 c060   13  -         # Block entry
0060 c060       1             LoadArg(index 1)
0061 c061       1             LoadVar(index 0)
0062 c062       1             LoadArg(index 0)
0063 c063       1             LoadArg(index 0)
0064 c064       3             Literal('length')
0067 c067       1             ObjectGet()
0068 c068       1             LoadVar(index 1)
0069 c069       1             ObjectSet()
006a c06a       1             Pop(count 1)
006b c06b       1             Literal(lit undefined)
006c c06c       1             Return()
006d c06d       2     Header [Size: 356, Type: TC_REF_FUNCTION]
006f c06f  356  -     # Function ./test/end-to-end/tests/bitwise-operations.test.mvms:run
006f c06f       1         maxStackDepth: 5
0070 c070  182  -         # Block entry
0070 c070       1             LoadGlobal [0]
0071 c071       1             Literal(lit undefined)
0072 c072       3             Literal(3)
0075 c075       1             Literal(lit 0)
0076 c076       1             BinOp(op '<<')
0077 c077       3             Literal(3)
007a c07a       2             Call(count 3)
007c c07c       1             Pop(count 1)
007d c07d       1             LoadGlobal [0]
007e c07e       1             Literal(lit undefined)
007f c07f       3             Literal(3)
0082 c082       1             Literal(lit 2)
0083 c083       1             BinOp(op '<<')
0084 c084       3             Literal(12)
0087 c087       2             Call(count 3)
0089 c089       1             Pop(count 1)
008a c08a       1             LoadGlobal [0]
008b c08b       1             Literal(lit undefined)
008c c08c       3             Literal(3)
008f c08f       3             Literal(34)
0092 c092       1             BinOp(op '<<')
0093 c093       3             Literal(12)
0096 c096       2             Call(count 3)
0098 c098       1             Pop(count 1)
0099 c099       1             LoadGlobal [0]
009a c09a       1             Literal(lit undefined)
009b c09b       3             Literal(3)
009e c09e       3             Literal(32)
00a1 c0a1       1             BinOp(op '<<')
00a2 c0a2       3             Literal(3)
00a5 c0a5       2             Call(count 3)
00a7 c0a7       1             Pop(count 1)
00a8 c0a8       1             LoadGlobal [0]
00a9 c0a9       1             Literal(lit undefined)
00aa c0aa       1             Literal(lit 2)
00ab c0ab       3             Literal(31)
00ae c0ae       1             BinOp(op '<<')
00af c0af       1             Literal(lit 0)
00b0 c0b0       2             Call(count 3)
00b2 c0b2       1             Pop(count 1)
00b3 c0b3       1             LoadGlobal [0]
00b4 c0b4       1             Literal(lit undefined)
00b5 c0b5       3             Literal(-2)
00b8 c0b8       1             Literal(lit 2)
00b9 c0b9       1             BinOp(op '<<')
00ba c0ba       3             Literal(-8)
00bd c0bd       2             Call(count 3)
00bf c0bf       1             Pop(count 1)
00c0 c0c0       1             LoadGlobal [0]
00c1 c0c1       1             Literal(lit undefined)
00c2 c0c2       3             Literal(8)
00c5 c0c5       1             Literal(lit 1)
00c6 c0c6       1             BinOp(op '>>')
00c7 c0c7       3             Literal(4)
00ca c0ca       2             Call(count 3)
00cc c0cc       1             Pop(count 1)
00cd c0cd       1             LoadGlobal [0]
00ce c0ce       1             Literal(lit undefined)
00cf c0cf       3             Literal(8)
00d2 c0d2       1             Literal(lit 1)
00d3 c0d3       1             BinOp(op '>>>')
00d4 c0d4       3             Literal(4)
00d7 c0d7       2             Call(count 3)
00d9 c0d9       1             Pop(count 1)
00da c0da       1             LoadGlobal [0]
00db c0db       1             Literal(lit undefined)
00dc c0dc       3             Literal(-8)
00df c0df       1             Literal(lit 1)
00e0 c0e0       1             BinOp(op '>>')
00e1 c0e1       3             Literal(-4)
00e4 c0e4       2             Call(count 3)
00e6 c0e6       1             Pop(count 1)
00e7 c0e7       1             LoadGlobal [0]
00e8 c0e8       1             Literal(lit undefined)
00e9 c0e9       3             Literal(-8)
00ec c0ec       1             Literal(lit 1)
00ed c0ed       1             BinOp(op '>>>')
00ee c0ee       3             Literal(&c04f)
00f1 c0f1       2             Call(count 3)
00f3 c0f3       1             Pop(count 1)
00f4 c0f4       1             LoadGlobal [0]
00f5 c0f5       1             Literal(lit undefined)
00f6 c0f6       3             Literal(4)
00f9 c0f9       1             Literal(lit 0)
00fa c0fa       1             BinOp(op '>>')
00fb c0fb       3             Literal(4)
00fe c0fe       2             Call(count 3)
0100 c100       1             Pop(count 1)
0101 c101       1             LoadGlobal [0]
0102 c102       1             Literal(lit undefined)
0103 c103       3             Literal(4)
0106 c106       1             Literal(lit 0)
0107 c107       1             BinOp(op '>>>')
0108 c108       3             Literal(4)
010b c10b       2             Call(count 3)
010d c10d       1             Pop(count 1)
010e c10e       1             LoadGlobal [0]
010f c10f       1             Literal(lit undefined)
0110 c110       3             Literal(-4)
0113 c113       1             Literal(lit 0)
0114 c114       1             BinOp(op '>>')
0115 c115       3             Literal(-4)
0118 c118       2             Call(count 3)
011a c11a       1             Pop(count 1)
011b c11b       1             LoadGlobal [0]
011c c11c       1             Literal(lit undefined)
011d c11d       3             Literal(-4)
0120 c120       1             Literal(lit 0)
0121 c121       1             BinOp(op '>>>')
0122 c122       1             LoadGlobal [1]
0123 c123       3             Branch &c1cd
0126 c126    3  -         # Block block2
0126 c126       3             Literal(-4)
0129 c129       0             <implicit fallthrough>
0129 c129  164  -         # Block block3
0129 c129       2             Call(count 3)
012b c12b       1             Pop(count 1)
012c c12c       1             LoadGlobal [0]
012d c12d       1             Literal(lit undefined)
012e c12e       3             Literal(8)
0131 c131       3             Literal(-30)
0134 c134       1             BinOp(op '>>')
0135 c135       3             Literal(8)
0138 c138       1             Literal(lit 2)
0139 c139       1             BinOp(op '>>')
013a c13a       2             Call(count 3)
013c c13c       1             Pop(count 1)
013d c13d       1             LoadGlobal [0]
013e c13e       1             Literal(lit undefined)
013f c13f       3             Literal(8)
0142 c142       3             Literal(-30)
0145 c145       1             BinOp(op '>>>')
0146 c146       3             Literal(8)
0149 c149       1             Literal(lit 2)
014a c14a       1             BinOp(op '>>>')
014b c14b       2             Call(count 3)
014d c14d       1             Pop(count 1)
014e c14e       1             LoadGlobal [0]
014f c14f       1             Literal(lit undefined)
0150 c150       3             Literal(8)
0153 c153       3             Literal(-30)
0156 c156       1             BinOp(op '<<')
0157 c157       3             Literal(8)
015a c15a       1             Literal(lit 2)
015b c15b       1             BinOp(op '<<')
015c c15c       2             Call(count 3)
015e c15e       1             Pop(count 1)
015f c15f       1             LoadGlobal [0]
0160 c160       1             Literal(lit undefined)
0161 c161       3             Literal(3)
0164 c164       3             Literal(6)
0167 c167       1             BinOp(op '|')
0168 c168       3             Literal(7)
016b c16b       2             Call(count 3)
016d c16d       1             Pop(count 1)
016e c16e       1             LoadGlobal [0]
016f c16f       1             Literal(lit undefined)
0170 c170       3             Literal(3)
0173 c173       3             Literal(6)
0176 c176       1             BinOp(op '&')
0177 c177       1             Literal(lit 2)
0178 c178       2             Call(count 3)
017a c17a       1             Pop(count 1)
017b c17b       1             LoadGlobal [0]
017c c17c       1             Literal(lit undefined)
017d c17d       3             Literal(3)
0180 c180       3             Literal(6)
0183 c183       1             BinOp(op '^')
0184 c184       3             Literal(5)
0187 c187       2             Call(count 3)
0189 c189       1             Pop(count 1)
018a c18a       1             LoadGlobal [0]
018b c18b       1             Literal(lit undefined)
018c c18c       3             Literal(3)
018f c18f       1             UnOp(op '~')
0190 c190       3             Literal(-4)
0193 c193       2             Call(count 3)
0195 c195       1             Pop(count 1)
0196 c196       1             LoadGlobal [0]
0197 c197       1             Literal(lit undefined)
0198 c198       3             Literal(-3)
019b c19b       3             Literal(-6)
019e c19e       1             BinOp(op '|')
019f c19f       1             Literal(lit -1)
01a0 c1a0       2             Call(count 3)
01a2 c1a2       1             Pop(count 1)
01a3 c1a3       1             LoadGlobal [0]
01a4 c1a4       1             Literal(lit undefined)
01a5 c1a5       3             Literal(-3)
01a8 c1a8       3             Literal(-6)
01ab c1ab       1             BinOp(op '&')
01ac c1ac       3             Literal(-8)
01af c1af       2             Call(count 3)
01b1 c1b1       1             Pop(count 1)
01b2 c1b2       1             LoadGlobal [0]
01b3 c1b3       1             Literal(lit undefined)
01b4 c1b4       3             Literal(-3)
01b7 c1b7       3             Literal(-6)
01ba c1ba       1             BinOp(op '^')
01bb c1bb       3             Literal(7)
01be c1be       2             Call(count 3)
01c0 c1c0       1             Pop(count 1)
01c1 c1c1       1             LoadGlobal [0]
01c2 c1c2       1             Literal(lit undefined)
01c3 c1c3       3             Literal(-3)
01c6 c1c6       1             UnOp(op '~')
01c7 c1c7       1             Literal(lit 2)
01c8 c1c8       2             Call(count 3)
01ca c1ca       1             Pop(count 1)
01cb c1cb       1             Literal(lit undefined)
01cc c1cc       1             Return()
01cd c1cd    6  -         # Block block1
01cd c1cd       3             Literal(&c055)
01d0 c1d0       3             Jump &c129
export 0 = &function ['if-else-statement.test.mvms:run'];

slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:print'] = host function 1;
slot ['global:vmExport'] = &ephemeral vmExport;
slot ['if-else-statement.test.mvms:#entry'] = &function ['if-else-statement.test.mvms:#entry'];
slot ['if-else-statement.test.mvms:exports'] = &allocation 1;
slot ['if-else-statement.test.mvms:run'] = &function ['if-else-statement.test.mvms:run'];

function ['if-else-statement.test.mvms:#entry']() {
  entry:
    LoadArg(index 0);
    StoreGlobal(name 'if-else-statement.test.mvms:exports');
    LoadGlobal(name 'global:vmExport');
    Literal(lit 0);
    LoadGlobal(name 'if-else-statement.test.mvms:run');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['if-else-statement.test.mvms:run']() {
  entry:
    Literal(lit false);
    Branch(@block1, @block2);
  block1:
    LoadGlobal(name 'global:print');
    Literal(lit '#1: This is the consequent');
    Call(count 1);
    Pop(count 1);
    Jump(@block3);
  block2:
    LoadGlobal(name 'global:print');
    Literal(lit '#1: This is the alternate');
    Call(count 1);
    Pop(count 1);
    Jump(@block3);
  block3:
    Literal(lit true);
    Branch(@block4, @block5);
  block4:
    LoadGlobal(name 'global:print');
    Literal(lit '#2: This is the consequent');
    Call(count 1);
    Pop(count 1);
    Jump(@block6);
  block5:
    LoadGlobal(name 'global:print');
    Literal(lit '#2: This is the alternate');
    Call(count 1);
    Pop(count 1);
    Jump(@block6);
  block6:
    Literal(lit undefined);
    Return();
}

allocation 1 = {
};
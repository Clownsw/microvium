[this module slot] 'thisModule'
[free var] 'console'
[free var] 'assertEqual'
[free var] 'vmExport'
[global slot] 'thisModule'
[global slot] 'log'
[global slot] 'sayHello'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    writable let 'log' # binding_1 @ global['log'];
    function 'run' # binding_2 @ local[0];
    function 'sayHello' # binding_3 @ global['sayHello']
  }

  references {
    console @ free console
    vmExport @ free vmExport
    run @ binding_2
  }

  prologue {
    func 'run' -> local[0]
    func 'sayHello' -> global['sayHello']
  }

  function '<anonymous>' as 'anonymous' {
    [no closure scope]; [0 var declarations]

    bindings { param 'msg' # binding_4 @ arg[1] }

    references { log @ binding_1; msg @ binding_4 }

    prologue {  }
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_5 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        sayHello @ binding_3
        assertEqual @ free assertEqual
        log @ binding_1
        assertEqual @ free assertEqual
        log @ binding_1
        assertEqual @ free assertEqual
        log @ binding_1
        assertEqual @ free assertEqual
        log @ binding_1
        assertEqual @ free assertEqual
        log @ binding_1
        log @ binding_1
      }
    }
  }

  function sayHello as 'sayHello' {
    [no closure scope]; [2 var declarations]

    bindings {
      this '#this' # binding_6 @ arg[0];
      var 'arr' # binding_7 @ local[0];
      writable var 'i' # binding_8 @ local[1]
    }

    No references

    prologue { new var -> local[0]; new var -> local[1] }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameInstanceCountAsParent: false; [no closure scope]

        bindings {  }

        prologue {  }

        epilogue {  }

        references { i @ binding_8; i @ binding_8 }

        block {
          sameInstanceCountAsParent: false
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            console @ free console
            arr @ binding_7
            i @ binding_8
          }
        }
      }

      block {
        sameInstanceCountAsParent: false; [no closure scope]

        bindings {  }

        prologue {  }

        epilogue {  }

        references { i @ binding_8; i @ binding_8 }

        block {
          sameInstanceCountAsParent: false
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            console @ free console
            arr @ binding_7
            i @ binding_8
          }
        }
      }
    }
  }
}
export 0 = &function run;

slot ['global:assertEqual'] = host function 3;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 'abc');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'cd');
    BinOp(op '+');
    Literal(lit 'ab_cd');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'cd');
    BinOp(op '+');
    Literal(lit 'ef');
    BinOp(op '+');
    Literal(lit 'ab_cdef');
    Call(count 3, true);
    // Int14
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 5);
    BinOp(op '+');
    Literal(lit 'ab_5');
    Call(count 3, true);
    // Negative
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -5);
    BinOp(op '+');
    Literal(lit 'ab_-5');
    Call(count 3, true);
    // Int32
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 500000);
    BinOp(op '+');
    Literal(lit 'ab_500000');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -500000);
    BinOp(op '+');
    Literal(lit 'ab_-500000');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -2147483648);
    BinOp(op '+');
    Literal(lit 'ab_-2147483648');
    Call(count 3, true);
    // Some general constants
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit null);
    BinOp(op '+');
    Literal(lit 'ab_null');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit true);
    BinOp(op '+');
    Literal(lit 'ab_true');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit false);
    BinOp(op '+');
    Literal(lit 'ab_false');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit undefined);
    BinOp(op '+');
    Literal(lit 'ab_undefined');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -0);
    BinOp(op '+');
    Literal(lit 'ab_0');
    Call(count 3, true);
    // Special strings
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'proto');
    BinOp(op '+');
    Literal(lit 'ab_proto');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'proto');
    Literal(lit '_bc');
    BinOp(op '+');
    Literal(lit 'proto_bc');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'length');
    BinOp(op '+');
    Literal(lit 'ab_length');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'length');
    Literal(lit '_bc');
    BinOp(op '+');
    Literal(lit 'length_bc');
    Call(count 3, true);
    // Interpolation
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '');
    Literal(lit '');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 'abc');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '');
    Literal(lit '_');
    BinOp(op '+');
    Literal(lit 'abc');
    BinOp(op '+');
    Literal(lit '_abc');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit '_');
    BinOp(op '+');
    Literal(lit 'abc_');
    Call(count 3, true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab');
    Literal(lit 5);
    BinOp(op '+');
    Literal(lit 'c');
    BinOp(op '+');
    Literal(lit 'ab5c');
    Call(count 3, true);
    Literal(lit undefined);
    Return();
}

allocation 5 = {
  push: &function Array_push,
};
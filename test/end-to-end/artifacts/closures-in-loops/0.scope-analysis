[this module slot] 'thisModule'
[free var] 'vmExport'; [free var] 'print'
[global slot] 'thisModule'; [global slot] 'test1'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'test1' # binding_2 @ global['test1']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]; func 'test1' -> global['test1']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_3 @ arg[0] }

    No references

    prologue {  }

    block {
      epiloguePopCount: 0; sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      references { test1 @ binding_2 }
    }
  }

  function test1 as 'test1' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_4 @ arg[0] }

    No references

    prologue {  }

    block {
      epiloguePopCount: 1; sameLifetimeAsParent: true

      bindings {
        readonly const 'arr' # binding_5 @ local[0]
      }

      prologue { new let -> local[0] }

      references { print @ free print }

      block {
        epiloguePopCount: 0; sameLifetimeAsParent: false

        bindings {
          writable let 'x' # binding_6 @ scoped[!0]
        }

        prologue { new scope[1] }

        references {
          x @ binding_6 using relative slot index 0
          x @ binding_6 using relative slot index 0
        }

        block {
          epiloguePopCount: 0; sameLifetimeAsParent: false

          bindings {
            readonly const 'y' # binding_7 @ scoped[!0]
          }

          prologue { new scope[1] }

          references {
            x @ binding_6 using relative slot index 1
            arr @ binding_5
          }

          closure function '<anonymous>' as 'anonymous' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              print @ free print
              x @ binding_6 using relative slot index 1
              y @ binding_7 using relative slot index 0
            }

            prologue {  }
          }
        }
      }

      block {
        epiloguePopCount: 1; sameLifetimeAsParent: false

        bindings { writable let 'i' # binding_8 @ local[1] }

        prologue { new let -> local[1] }

        references {
          i @ binding_8; arr @ binding_5; i @ binding_8
        }

        block {
          epiloguePopCount: 0; sameLifetimeAsParent: false

          bindings {  }

          prologue {  }

          references { arr @ binding_5; i @ binding_8 }
        }
      }
    }
  }
}
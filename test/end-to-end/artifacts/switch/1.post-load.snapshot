export 0 = &function run;

slot emptySwitch = &function emptySwitch;
slot evaluateCase = &function evaluateCase;
slot ['global:assertEqual'] = host function 3;
slot ['global:print'] = host function 1;
slot switchFallThroughBottom = &function switchFallThroughBottom;
slot switchWithNoDefault = &function switchWithNoDefault;
slot switchWithOnlyDefault = &function switchWithOnlyDefault;
slot weirdSwitch = &function weirdSwitch;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadVar(index 0);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function emptySwitch() {
  entry:
    Literal(lit 1);
    Jump(@block24);
  block24:
    Pop(count 1);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'emptySwitch:after');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function evaluateCase() {
  entry:
    LoadArg(index 1);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    LoadVar(index 0);
    Call(count 2);
    Pop(count 1);
    LoadVar(index 0);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'emptySwitch');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'switchWithOnlyDefault');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    // TODO
    // assertEqual(convert(5), 'It was 5');
    // assertEqual(convert(6), 'It was 6');
    // assertEqual(convert(7), 'It was 7');
    // assertEqual(convert('x'), 'It was x');
    // assertEqual(convert('something else'), 'It was x');
    LoadGlobal(name 'weirdSwitch');
    Literal(lit undefined);
    Literal(lit 5);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'weirdSwitch');
    Literal(lit undefined);
    Literal(lit 2);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'switchFallThroughBottom');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'switchWithNoDefault');
    Literal(lit undefined);
    Call(count 1);
    Literal(lit 22);
    Call(count 3);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function switchFallThroughBottom() {
  entry:
    Literal(lit 1);
    Jump(@block17);
  block17:
    LoadVar(index 0);
    Literal(lit 0);
    BinOp(op '===');
    Branch(@block20, @block18);
  block18:
    LoadVar(index 0);
    Literal(lit 1);
    BinOp(op '===');
    Branch(@block21, @block19);
  block19:
    LoadVar(index 0);
    Literal(lit 2);
    BinOp(op '===');
    Branch(@block22, @block23);
  block20:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'w');
    Call(count 2);
    Pop(count 1);
    Jump(@block21);
  block21:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'x');
    Call(count 2);
    Pop(count 1);
    Jump(@block22);
  block22:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'y');
    Call(count 2);
    Pop(count 1);
    Jump(@block23);
  block23:
    Pop(count 1);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'z');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function switchWithNoDefault() {
  entry:
    LoadArg(index 1);
    Literal(lit 5);
    Jump(@block10);
  block10:
    LoadVar(index 1);
    Literal(lit 1);
    BinOp(op '===');
    Branch(@block13, @block11);
  block11:
    LoadVar(index 1);
    Literal(lit 2);
    BinOp(op '===');
    Branch(@block14, @block12);
  block12:
    LoadVar(index 1);
    Literal(lit 3);
    BinOp(op '===');
    Branch(@block15, @block16);
  block13:
    Literal(lit 1);
    Return();
  block14:
    Literal(lit 2);
    Return();
  block15:
    Literal(lit 3);
    Return();
  block16:
    Pop(count 1);
    Literal(lit 22);
    Return();
}

function switchWithOnlyDefault() {
  entry:
    Literal(lit 1);
    Jump(@block25);
  block25:
    Jump(@block26);
  block26:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'switchWithOnlyDefault:default');
    Call(count 2);
    Pop(count 1);
    Jump(@block27);
  block27:
    Pop(count 1);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'switchWithOnlyDefault:after');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function weirdSwitch() {
  entry:
    LoadArg(index 1);
    // JavaScript has weird (IMO) behavior with fall through from `default`. The
    // test case for `4` is evaluated before the fallback to the default case, but
    // then the consequent for the default case falls through to the consequent of
    // case `4`.
    LoadVar(index 0);
    Jump(@block1);
  block1:
    LoadVar(index 1);
    LoadGlobal(name 'evaluateCase');
    Literal(lit undefined);
    Literal(lit 1);
    Call(count 2);
    BinOp(op '===');
    Branch(@block5, @block2);
  block2:
    LoadVar(index 1);
    LoadGlobal(name 'evaluateCase');
    Literal(lit undefined);
    Literal(lit 2);
    Call(count 2);
    BinOp(op '===');
    Branch(@block6, @block3);
  block3:
    LoadVar(index 1);
    LoadGlobal(name 'evaluateCase');
    Literal(lit undefined);
    Literal(lit 4);
    Call(count 2);
    BinOp(op '===');
    Branch(@block8, @block4);
  block4:
    Jump(@block7);
  block5:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'a');
    Call(count 2);
    Pop(count 1);
    Jump(@block6);
  block6:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'b');
    Call(count 2);
    Pop(count 1);
    Jump(@block7);
  block7:
    LoadGlobal(name 'evaluateCase');
    Literal(lit undefined);
    Literal(lit 'c');
    Call(count 2);
    Pop(count 1);
    Jump(@block8);
  block8:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'd');
    Call(count 2);
    Pop(count 1);
    Jump(@block9);
  block9:
    Pop(count 1);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit '!');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 3 = {
  push: &function Array_push,
};
export 42 = &function ['./test/end-to-end/tests/hello-world.test.mvms:run'];

slot ['./test/end-to-end/tests/hello-world.test.mvms:#entry'] = &function ['./test/end-to-end/tests/hello-world.test.mvms:#entry'];
slot ['./test/end-to-end/tests/hello-world.test.mvms:exports'] = &allocation 3;
slot ['./test/end-to-end/tests/hello-world.test.mvms:run'] = &function ['./test/end-to-end/tests/hello-world.test.mvms:run'];
slot ['<builtin>:#entry'] = &function ['<builtin>:#entry'];
slot ['<builtin>:Number_isNaN'] = &function ['<builtin>:Number_isNaN'];
slot ['<builtin>:exports'] = &allocation 1;
slot ['global:Infinity'] = Infinity;
slot ['global:NaN'] = NaN;
slot ['global:Number'] = &allocation 2;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:overflowChecks'] = false;
slot ['global:print'] = host function 1;
slot ['global:undefined'] = undefined;
slot ['global:vmExport'] = &ephemeral vmExport;

function ['./test/end-to-end/tests/hello-world.test.mvms:#entry']() {
  entry:
    LoadArg(index 0);
    StoreGlobal(name './test/end-to-end/tests/hello-world.test.mvms:exports');
    LoadGlobal(name 'global:vmExport');
    Literal(lit undefined);
    Literal(lit 42);
    LoadGlobal(name './test/end-to-end/tests/hello-world.test.mvms:run');
    Call(count 3);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/hello-world.test.mvms:run']() {
  entry:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'Hello, World!');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['<builtin>:#entry']() {
  entry:
    LoadArg(index 0);
    StoreGlobal(name '<builtin>:exports');
    LoadGlobal(name '<builtin>:exports');
    Literal(lit 'Number_isNaN');
    LoadGlobal(name '<builtin>:Number_isNaN');
    ObjectSet();
    Literal(lit undefined);
    Return();
}

function ['<builtin>:Number_isNaN']() {
  entry:
    LoadArg(index 1);
    // NaN is the only value that is not equal to itself
    LoadVar(index 0);
    LoadVar(index 0);
    BinOp(op '!==');
    Return();
    Literal(lit undefined);
    Return();
}

allocation 1 = {
  Number_isNaN: &function ['<builtin>:Number_isNaN'],
};

allocation 2 = {
  isNaN: &function ['<builtin>:Number_isNaN'],
};

allocation 3 = {
};
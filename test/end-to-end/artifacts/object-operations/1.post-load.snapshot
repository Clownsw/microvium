export 0 = &function ['./test/end-to-end/tests/object-operations.test.mvms:run'];

slot ['./test/end-to-end/tests/object-operations.test.mvms:#entry'] = &function ['./test/end-to-end/tests/object-operations.test.mvms:#entry'];
slot ['./test/end-to-end/tests/object-operations.test.mvms:exports'] = &allocation 1;
slot ['./test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot'] = &allocation 2;
slot ['./test/end-to-end/tests/object-operations.test.mvms:run'] = &function ['./test/end-to-end/tests/object-operations.test.mvms:run'];
slot ['global:Infinity'] = Infinity;
slot ['global:NaN'] = NaN;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:isNaN'] = host function 65533;
slot ['global:overflowChecks'] = false;
slot ['global:print'] = host function 1;
slot ['global:undefined'] = undefined;
slot ['global:vmExport'] = &ephemeral vmExport;

function ['./test/end-to-end/tests/object-operations.test.mvms:#entry']() {
  entry:
    LoadArg(index 0);
    StoreGlobal(name './test/end-to-end/tests/object-operations.test.mvms:exports');
    // ---
description: >
  Tests various object operations
runExportedFunction: 0
assertionCount: 9
---
    ObjectNew();
    LoadVar(index 0);
    Literal(lit 'x');
    Literal(lit 5);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 'y');
    Literal(lit 10);
    ObjectSet();
    StoreGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    LoadGlobal(name 'global:vmExport');
    Literal(lit 0);
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:run');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/object-operations.test.mvms:run']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    Literal(lit 'x');
    ObjectGet();
    Literal(lit 5);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    Literal(lit 'y');
    ObjectGet();
    Literal(lit 10);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    Literal(lit 'z');
    ObjectGet();
    Literal(lit undefined);
    Call(count 2);
    Pop(count 1);
    // Set existing property on snapshotted object
    Literal(lit 12);
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    Literal(lit 'x');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    Literal(lit 'x');
    ObjectGet();
    Literal(lit 12);
    Call(count 2);
    Pop(count 1);
    // Create new property on snapshotted object
    Literal(lit 13);
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    Literal(lit 'z');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadGlobal(name './test/end-to-end/tests/object-operations.test.mvms:objBeforeSnapshot');
    Literal(lit 'z');
    ObjectGet();
    Literal(lit 13);
    Call(count 2);
    Pop(count 1);
    // New empty object
    ObjectNew();
    LoadVar(index 0);
    Literal(lit 'a');
    Literal(lit 14);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 'b');
    Literal(lit 15);
    ObjectSet();
    Literal(lit 16);
    LoadVar(index 0);
    Literal(lit 'c');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadVar(index 0);
    Literal(lit 'a');
    ObjectGet();
    Literal(lit 14);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadVar(index 0);
    Literal(lit 'b');
    ObjectGet();
    Literal(lit 15);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadVar(index 0);
    Literal(lit 'c');
    ObjectGet();
    Literal(lit 16);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    LoadVar(index 0);
    Literal(lit 'd');
    ObjectGet();
    Literal(lit undefined);
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 1 = {
};

allocation 2 = {
  x: 5,
  y: 10,
};
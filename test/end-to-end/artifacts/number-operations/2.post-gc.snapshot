export 0 = &function ['./test/end-to-end/tests/number-operations.test.mvms:run'];

slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:print'] = host function 1;
slot ['global:vmExport'] = &ephemeral vmExport;

function ['./test/end-to-end/tests/number-operations.test.mvms:run']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3);
    Literal(lit 2);
    BinOp(op '-');
    Literal(lit 1);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3000);
    Literal(lit 2000);
    BinOp(op '-');
    Literal(lit 1000);
    Call(count 2);
    Pop(count 1);
    // out of 8 bit range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 10000);
    Literal(lit 8000);
    BinOp(op '-');
    Literal(lit 2000);
    Call(count 2);
    Pop(count 1);
    // out of 14 bit signed range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 80000);
    Literal(lit 70000);
    BinOp(op '-');
    Literal(lit 10000);
    Call(count 2);
    Pop(count 1);
    // out of 16 bit range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -7500);
    Literal(lit 7000);
    BinOp(op '-');
    Literal(lit -14500);
    Call(count 2);
    Pop(count 1);
    // underflow 14-bit range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -2000000000);
    Literal(lit 2000000000);
    BinOp(op '-');
    Literal(lit -4000000000);
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 1 = {
};
export 0 = &function ['./test/end-to-end/tests/number-operations.test.mvms:run'];

slot ['./test/end-to-end/tests/number-operations.test.mvms:#entry'] = &function ['./test/end-to-end/tests/number-operations.test.mvms:#entry'];
slot ['./test/end-to-end/tests/number-operations.test.mvms:exports'] = &allocation 1;
slot ['./test/end-to-end/tests/number-operations.test.mvms:run'] = &function ['./test/end-to-end/tests/number-operations.test.mvms:run'];
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:overflowChecks'] = false;
slot ['global:print'] = host function 1;
slot ['global:vmExport'] = &ephemeral vmExport;

function ['./test/end-to-end/tests/number-operations.test.mvms:#entry']() {
  entry:
    LoadArg(index 0);
    StoreGlobal(name './test/end-to-end/tests/number-operations.test.mvms:exports');
    LoadGlobal(name 'global:vmExport');
    Literal(lit 0);
    LoadGlobal(name './test/end-to-end/tests/number-operations.test.mvms:run');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/number-operations.test.mvms:run']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3);
    Literal(lit 2);
    BinOp(op '-');
    Literal(lit 1);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 3000);
    Literal(lit 2000);
    BinOp(op '-');
    Literal(lit 1000);
    Call(count 2);
    Pop(count 1);
    // out of 8 bit range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 10000);
    Literal(lit 8000);
    BinOp(op '-');
    Literal(lit 2000);
    Call(count 2);
    Pop(count 1);
    // out of 14 bit signed range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 80000);
    Literal(lit 70000);
    BinOp(op '-');
    Literal(lit 10000);
    Call(count 2);
    Pop(count 1);
    // out of 16 bit range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -7500);
    Literal(lit 7000);
    BinOp(op '-');
    Literal(lit -14500);
    Call(count 2);
    Pop(count 1);
    // underflow 14-bit range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit -2000000000);
    Literal(lit 2000000000);
    BinOp(op '-');
    LoadGlobal(name 'global:overflowChecks');
    Branch(@block1, @block2);
  block1:
    Literal(lit -4000000000);
    Jump(@block3);
  block2:
    Literal(lit 294967296);
    Jump(@block3);
  block3:
    Call(count 2);
    Pop(count 1);
    // underflow signed 32-bit range
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 1.5);
    Literal(lit 1);
    BinOp(op '-');
    Literal(lit 0.5);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 2);
    Literal(lit 0.5);
    BinOp(op '-');
    Literal(lit 1.5);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 5000000000);
    Literal(lit 4999999000);
    BinOp(op '-');
    Literal(lit 1000);
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 1 = {
};
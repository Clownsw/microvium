Bytecode size: 2326 B

Ofst Addr    Size
==== ==== =======
0000        44  - # Header
0000            1     bytecodeVersion: 1
0001            1     headerSize: 44
0002            2     bytecodeSize: 2326
0004            2     expectedCRC: c0ce
0006            2     requiredEngineVersion: 0
0008            4     requiredFeatureFlags: 1
000c            2     globalVariableCount: 17
000e            2     initialDataOffset: 002c
0010            2     initialDataSize: 34
0012            2     initialHeapOffset: 004e
0014            2     initialHeapSize: 20
0016            2     gcRootsOffset: 0062
0018            2     gcRootsCount: 0
001a            2     importTableOffset: 0062
001c            2     importTableSize: 4
001e            2     exportTableOffset: 0066
0020            2     exportTableSize: 4
0022            2     shortCallTableOffset: 006a
0024            2     shortCallTableSize: 0
0026            2     stringTableOffset: 006a
0028            2     stringTableSize: 4
002a            2     arrayProtoPointer: &400c
002c 8000   34  - # Globals
002c 8000       2     [0]: &c070
002e 8002       2     [1]: NaN
0030 8004       2     [2]: &4002
0032 8006       2     [3]: &c07a
0034 8008       2     [4]: &c07e
0036 800a       2     [5]: false
0038 800c       2     [6]: &c296
003a 800e       2     [7]: &c2c6
003c 8010       2     [8]: &c2e3
003e 8012       2     [9]: &c3a0
0040 8014       2     [10]: &c42c
0042 8016       2     [11]: &c4ad
0044 8018       2     [12]: &c5f7
0046 801a       2     [13]: &c6c6
0048 801c       2     [14]: &c795
004a 801e       2     [15]: &c866
004c 8020       2     [16]: &c8a0
004e 4000   20  - # GC allocations
004e 4000       2     Header [Size: 2, Type: TC_REF_PROPERTY_LIST]
0050 4002    2  -     # Object as TsPropertyList
0050 4002       2         first: &4004
0052 4004    6  -     # TsPropertyCell
0052 4004       2         next: &0000
0054 4006       2         key: &c082
0056 4008       2         value: &c241
0058 400a       2     Header [Size: 2, Type: TC_REF_PROPERTY_LIST]
005a 400c    2  -     # Object as TsPropertyList
005a 400c       2         first: &400e
005c 400e    6  -     # TsPropertyCell
005c 400e       2         next: &0000
005e 4010       2         key: &c08a
0060 4012       2         value: &c249
0062 c062    4  - # Import Table
0062 c062       2     [0]: 2
0064 c064       2     [1]: 3
0066 c066    4  - # Export Table
0066 c066       4     [0]: &c259
006a c06a    4  - # String Table
006a c06a       2     [0]: &c082
006c c06c       2     [1]: &c08a
006e c06e 2216  - # ROM allocations
006e c06e       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0070 c070       8     Value: Infinity
0078 c078       2     Header [Size: 2, Type: TC_REF_HOST_FUNC]
007a c07a       2     Value: Import Table [0] (&c062)
007c c07c       2     Header [Size: 2, Type: TC_REF_HOST_FUNC]
007e c07e       2     Value: Import Table [1] (&c064)
0080 c080       2     Header [Size: 6, Type: TC_REF_UNIQUE_STRING]
0082 c082       6     Value: 'isNaN'
0088 c088       2     Header [Size: 5, Type: TC_REF_UNIQUE_STRING]
008a c08a       5     Value: 'push'
008f c08f       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0091 c091       8     Value: -1.1
0099 c099       2     Header [Size: 4, Type: TC_REF_INT32]
009b c09b       4     Value: -2147483648
009f c09f       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00a1 c0a1       8     Value: 2147483648
00a9 c0a9       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00ab c0ab       8     Value: 1.1
00b3 c0b3       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00b5 c0b5       8     Value: 3.1
00bd c0bd       2     Header [Size: 4, Type: TC_REF_INT32]
00bf c0bf       4     Value: 10000
00c3 c0c3       2     Header [Size: 4, Type: TC_REF_INT32]
00c5 c0c5       4     Value: 18000
00c9 c0c9       2     Header [Size: 4, Type: TC_REF_INT32]
00cb c0cb       4     Value: 80000
00cf c0cf       2     Header [Size: 4, Type: TC_REF_INT32]
00d1 c0d1       4     Value: 70000
00d5 c0d5       2     Header [Size: 4, Type: TC_REF_INT32]
00d7 c0d7       4     Value: 150000
00db c0db       2     Header [Size: 4, Type: TC_REF_INT32]
00dd c0dd       4     Value: 14500
00e1 c0e1       2     Header [Size: 4, Type: TC_REF_INT32]
00e3 c0e3       4     Value: 2000000000
00e7 c0e7       2     Header [Size: 4, Type: TC_REF_INT32]
00e9 c0e9       4     Value: -294967296
00ed c0ed       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00ef c0ef       8     Value: -1.5
00f7 c0f7       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00f9 c0f9       8     Value: -0.5
0101 c101       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0103 c103       8     Value: 0.5
010b c10b       2     Header [Size: 8, Type: TC_REF_FLOAT64]
010d c10d       8     Value: -5000000000
0115 c115       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0117 c117       8     Value: 4999999000
011f c11f       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0121 c121       8     Value: 4000000000
0129 c129       2     Header [Size: 4, Type: TC_REF_INT32]
012b c12b       4     Value: -14500
012f c12f       2     Header [Size: 4, Type: TC_REF_INT32]
0131 c131       4     Value: -2000000000
0135 c135       2     Header [Size: 4, Type: TC_REF_INT32]
0137 c137       4     Value: 294967296
013b c13b       2     Header [Size: 8, Type: TC_REF_FLOAT64]
013d c13d       8     Value: 1.5
0145 c145       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0147 c147       8     Value: 5000000000
014f c14f       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0151 c151       8     Value: -4000000000
0159 c159       2     Header [Size: 8, Type: TC_REF_FLOAT64]
015b c15b       8     Value: 5.5
0163 c163       2     Header [Size: 4, Type: TC_REF_INT32]
0165 c165       4     Value: 25000000
0169 c169       2     Header [Size: 4, Type: TC_REF_INT32]
016b c16b       4     Value: 17000
016f c16f       2     Header [Size: 4, Type: TC_REF_INT32]
0171 c171       4     Value: 34000
0175 c175       2     Header [Size: 4, Type: TC_REF_INT32]
0177 c177       4     Value: 5000000
017b c17b       2     Header [Size: 4, Type: TC_REF_INT32]
017d c17d       4     Value: -1004630016
0181 c181       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0183 c183       8     Value: 25000000000000
018b c18b       2     Header [Size: 8, Type: TC_REF_FLOAT64]
018d c18d       8     Value: 3.5
0195 c195       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0197 c197       8     Value: 8.5
019f c19f       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01a1 c1a1       8     Value: 2.5
01a9 c1a9       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01ab c1ab       8     Value: 3.4
01b3 c1b3       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01b5 c1b5       8     Value: -8.5
01bd c1bd       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01bf c1bf       8     Value: -2.5
01c7 c1c7       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01c9 c1c9       8     Value: 2.1
01d1 c1d1       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01d3 c1d3       8     Value: 2.25
01db c1db       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01dd c1dd       8     Value: 0.25
01e5 c1e5       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01e7 c1e7       8     Value: 5.25
01ef c1ef       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01f1 c1f1       8     Value: 1.25
01f9 c1f9       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01fb c1fb       8     Value: 550.25
0203 c203       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0205 c205       8     Value: 50.25
020d c20d       2     Header [Size: 8, Type: TC_REF_FLOAT64]
020f c20f       8     Value: -7.25
0217 c217       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0219 c219       8     Value: -3.25
0221 c221       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0223 c223       8     Value: 7.25
022b c22b       2     Header [Size: 8, Type: TC_REF_FLOAT64]
022d c22d       8     Value: 3.25
0235 c235       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0237 c237       8     Value: 5.1
023f c23f       2     Header [Size: 6, Type: TC_REF_FUNCTION]
0241 c241    6  -     # Function <builtin>:Number_isNaN
0241 c241       1         maxStackDepth: 3
0242 c242    5  -         # Block entry
0242 c242       1             LoadArg(index 1)
0243 c243       1             LoadVar(index 0)
0244 c244       1             LoadVar(index 0)
0245 c245       1             BinOp(op '!==')
0246 c246       1             Return()
0247 c247       2     Header [Size: 14, Type: TC_REF_FUNCTION]
0249 c249   14  -     # Function <builtin>:Array_push
0249 c249       1         maxStackDepth: 5
024a c24a   13  -         # Block entry
024a c24a       1             LoadArg(index 1)
024b c24b       1             LoadVar(index 0)
024c c24c       1             LoadArg(index 0)
024d c24d       1             LoadArg(index 0)
024e c24e       3             Literal('length')
0251 c251       1             ObjectGet()
0252 c252       1             LoadVar(index 1)
0253 c253       1             ObjectSet()
0254 c254       1             Pop(count 1)
0255 c255       1             Literal(lit undefined)
0256 c256       1             Return()
0257 c257       2     Header [Size: 59, Type: TC_REF_FUNCTION]
0259 c259   59  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:run
0259 c259       1         maxStackDepth: 2
025a c25a   58  -         # Block entry
025a c25a       1             LoadGlobal [6]
025b c25b       1             Literal(lit undefined)
025c c25c       2             Call(count 1)
025e c25e       1             Pop(count 1)
025f c25f       1             LoadGlobal [7]
0260 c260       1             Literal(lit undefined)
0261 c261       2             Call(count 1)
0263 c263       1             Pop(count 1)
0264 c264       1             LoadGlobal [8]
0265 c265       1             Literal(lit undefined)
0266 c266       2             Call(count 1)
0268 c268       1             Pop(count 1)
0269 c269       1             LoadGlobal [9]
026a c26a       1             Literal(lit undefined)
026b c26b       2             Call(count 1)
026d c26d       1             Pop(count 1)
026e c26e       1             LoadGlobal [10]
026f c26f       1             Literal(lit undefined)
0270 c270       2             Call(count 1)
0272 c272       1             Pop(count 1)
0273 c273       1             LoadGlobal [11]
0274 c274       1             Literal(lit undefined)
0275 c275       2             Call(count 1)
0277 c277       1             Pop(count 1)
0278 c278       1             LoadGlobal [12]
0279 c279       1             Literal(lit undefined)
027a c27a       2             Call(count 1)
027c c27c       1             Pop(count 1)
027d c27d       1             LoadGlobal [13]
027e c27e       1             Literal(lit undefined)
027f c27f       2             Call(count 1)
0281 c281       1             Pop(count 1)
0282 c282       1             LoadGlobal [14]
0283 c283       1             Literal(lit undefined)
0284 c284       2             Call(count 1)
0286 c286       1             Pop(count 1)
0287 c287       1             LoadGlobal [15]
0288 c288       1             Literal(lit undefined)
0289 c289       2             Call(count 1)
028b c28b       1             Pop(count 1)
028c c28c       2             LoadGlobal [16]
028e c28e       1             Literal(lit undefined)
028f c28f       2             Call(count 1)
0291 c291       1             Pop(count 1)
0292 c292       1             Literal(lit undefined)
0293 c293       1             Return()
0294 c294       2     Header [Size: 46, Type: TC_REF_FUNCTION]
0296 c296   46  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testNegate
0296 c296       1         maxStackDepth: 5
0297 c297   32  -         # Block entry
0297 c297       1             LoadGlobal [4]
0298 c298       1             Literal(lit undefined)
0299 c299       1             Literal(lit -1)
029a c29a       1             Literal(lit 2)
029b c29b       3             Literal(3)
029e c29e       1             BinOp(op '-')
029f c29f       2             Call(count 3)
02a1 c2a1       1             Pop(count 1)
02a2 c2a2       1             LoadGlobal [4]
02a3 c2a3       1             Literal(lit undefined)
02a4 c2a4       1             LoadGlobal [0]
02a5 c2a5       1             UnOp(op '-')
02a6 c2a6       3             Literal(&c091)
02a9 c2a9       1             Literal(lit 0)
02aa c2aa       1             BinOp(op '/')
02ab c2ab       2             Call(count 3)
02ad c2ad       1             Pop(count 1)
02ae c2ae       1             LoadGlobal [4]
02af c2af       1             Literal(lit undefined)
02b0 c2b0       3             Literal(&c09b)
02b3 c2b3       1             UnOp(op '-')
02b4 c2b4       1             LoadGlobal [5]
02b5 c2b5       2             Branch &c2bf
02b7 c2b7    3  -         # Block block2
02b7 c2b7       3             Literal(&c09b)
02ba c2ba       0             <implicit fallthrough>
02ba c2ba    5  -         # Block block3
02ba c2ba       2             Call(count 3)
02bc c2bc       1             Pop(count 1)
02bd c2bd       1             Literal(lit undefined)
02be c2be       1             Return()
02bf c2bf    5  -         # Block block1
02bf c2bf       3             Literal(&c0a1)
02c2 c2c2       2             Jump &c2ba
02c4 c2c4       2     Header [Size: 27, Type: TC_REF_FUNCTION]
02c6 c2c6   27  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testUnaryPlus
02c6 c2c6       1         maxStackDepth: 4
02c7 c2c7   26  -         # Block entry
02c7 c2c7       1             LoadGlobal [4]
02c8 c2c8       1             Literal(lit undefined)
02c9 c2c9       1             Literal(lit 1)
02ca c2ca       1             Literal(lit 1)
02cb c2cb       1             BinOp(op '+')
02cc c2cc       1             UnOp(op '+')
02cd c2cd       1             Literal(lit 2)
02ce c2ce       2             Call(count 3)
02d0 c2d0       1             Pop(count 1)
02d1 c2d1       1             LoadGlobal [4]
02d2 c2d2       1             Literal(lit undefined)
02d3 c2d3       3             Literal(&c0ab)
02d6 c2d6       1             Literal(lit 2)
02d7 c2d7       1             BinOp(op '+')
02d8 c2d8       1             UnOp(op '+')
02d9 c2d9       3             Literal(&c0b5)
02dc c2dc       2             Call(count 3)
02de c2de       1             Pop(count 1)
02df c2df       1             Literal(lit undefined)
02e0 c2e0       1             Return()
02e1 c2e1       2     Header [Size: 187, Type: TC_REF_FUNCTION]
02e3 c2e3  187  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testAddition
02e3 c2e3       1         maxStackDepth: 4
02e4 c2e4  130  -         # Block entry
02e4 c2e4       1             LoadGlobal [4]
02e5 c2e5       1             Literal(lit undefined)
02e6 c2e6       3             Literal(3)
02e9 c2e9       1             Literal(lit 2)
02ea c2ea       1             BinOp(op '+')
02eb c2eb       3             Literal(5)
02ee c2ee       2             Call(count 3)
02f0 c2f0       1             Pop(count 1)
02f1 c2f1       1             LoadGlobal [4]
02f2 c2f2       1             Literal(lit undefined)
02f3 c2f3       3             Literal(3000)
02f6 c2f6       3             Literal(2000)
02f9 c2f9       1             BinOp(op '+')
02fa c2fa       3             Literal(5000)
02fd c2fd       2             Call(count 3)
02ff c2ff       1             Pop(count 1)
0300 c300       1             LoadGlobal [4]
0301 c301       1             Literal(lit undefined)
0302 c302       3             Literal(3000)
0305 c305       3             Literal(3500)
0308 c308       1             BinOp(op '+')
0309 c309       3             Literal(6500)
030c c30c       2             Call(count 3)
030e c30e       1             Pop(count 1)
030f c30f       1             LoadGlobal [4]
0310 c310       1             Literal(lit undefined)
0311 c311       3             Literal(6000)
0314 c314       3             Literal(500)
0317 c317       1             BinOp(op '+')
0318 c318       3             Literal(6500)
031b c31b       2             Call(count 3)
031d c31d       1             Pop(count 1)
031e c31e       1             LoadGlobal [4]
031f c31f       1             Literal(lit undefined)
0320 c320       3             Literal(500)
0323 c323       3             Literal(6500)
0326 c326       1             BinOp(op '+')
0327 c327       3             Literal(7000)
032a c32a       2             Call(count 3)
032c c32c       1             Pop(count 1)
032d c32d       1             LoadGlobal [4]
032e c32e       1             Literal(lit undefined)
032f c32f       3             Literal(&c0bf)
0332 c332       3             Literal(8000)
0335 c335       1             BinOp(op '+')
0336 c336       3             Literal(&c0c5)
0339 c339       2             Call(count 3)
033b c33b       1             Pop(count 1)
033c c33c       1             LoadGlobal [4]
033d c33d       1             Literal(lit undefined)
033e c33e       3             Literal(&c0cb)
0341 c341       3             Literal(&c0d1)
0344 c344       1             BinOp(op '+')
0345 c345       3             Literal(&c0d7)
0348 c348       2             Call(count 3)
034a c34a       1             Pop(count 1)
034b c34b       1             LoadGlobal [4]
034c c34c       1             Literal(lit undefined)
034d c34d       3             Literal(7500)
0350 c350       3             Literal(7000)
0353 c353       1             BinOp(op '+')
0354 c354       3             Literal(&c0dd)
0357 c357       2             Call(count 3)
0359 c359       1             Pop(count 1)
035a c35a       1             LoadGlobal [4]
035b c35b       1             Literal(lit undefined)
035c c35c       3             Literal(&c0e3)
035f c35f       3             Literal(&c0e3)
0362 c362       1             BinOp(op '+')
0363 c363       1             LoadGlobal [5]
0364 c364       2             Branch &c399
0366 c366    3  -         # Block block2
0366 c366       3             Literal(&c0e9)
0369 c369       0             <implicit fallthrough>
0369 c369   48  -         # Block block3
0369 c369       2             Call(count 3)
036b c36b       1             Pop(count 1)
036c c36c       1             LoadGlobal [4]
036d c36d       1             Literal(lit undefined)
036e c36e       3             Literal(&c0ef)
0371 c371       1             Literal(lit 1)
0372 c372       1             BinOp(op '+')
0373 c373       3             Literal(&c0f9)
0376 c376       2             Call(count 3)
0378 c378       1             Pop(count 1)
0379 c379       1             LoadGlobal [4]
037a c37a       1             Literal(lit undefined)
037b c37b       3             Literal(-2)
037e c37e       3             Literal(&c103)
0381 c381       1             BinOp(op '+')
0382 c382       3             Literal(&c0ef)
0385 c385       2             Call(count 3)
0387 c387       1             Pop(count 1)
0388 c388       1             LoadGlobal [4]
0389 c389       1             Literal(lit undefined)
038a c38a       3             Literal(&c10d)
038d c38d       3             Literal(&c117)
0390 c390       1             BinOp(op '+')
0391 c391       3             Literal(-1000)
0394 c394       2             Call(count 3)
0396 c396       1             Pop(count 1)
0397 c397       1             Literal(lit undefined)
0398 c398       1             Return()
0399 c399    5  -         # Block block1
0399 c399       3             Literal(&c121)
039c c39c       2             Jump &c369
039e c39e       2     Header [Size: 138, Type: TC_REF_FUNCTION]
03a0 c3a0  138  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testSubtraction
03a0 c3a0       1         maxStackDepth: 4
03a1 c3a1   83  -         # Block entry
03a1 c3a1       1             LoadGlobal [4]
03a2 c3a2       1             Literal(lit undefined)
03a3 c3a3       3             Literal(3)
03a6 c3a6       1             Literal(lit 2)
03a7 c3a7       1             BinOp(op '-')
03a8 c3a8       1             Literal(lit 1)
03a9 c3a9       2             Call(count 3)
03ab c3ab       1             Pop(count 1)
03ac c3ac       1             LoadGlobal [4]
03ad c3ad       1             Literal(lit undefined)
03ae c3ae       3             Literal(3000)
03b1 c3b1       3             Literal(2000)
03b4 c3b4       1             BinOp(op '-')
03b5 c3b5       3             Literal(1000)
03b8 c3b8       2             Call(count 3)
03ba c3ba       1             Pop(count 1)
03bb c3bb       1             LoadGlobal [4]
03bc c3bc       1             Literal(lit undefined)
03bd c3bd       3             Literal(&c0bf)
03c0 c3c0       3             Literal(8000)
03c3 c3c3       1             BinOp(op '-')
03c4 c3c4       3             Literal(2000)
03c7 c3c7       2             Call(count 3)
03c9 c3c9       1             Pop(count 1)
03ca c3ca       1             LoadGlobal [4]
03cb c3cb       1             Literal(lit undefined)
03cc c3cc       3             Literal(&c0cb)
03cf c3cf       3             Literal(&c0d1)
03d2 c3d2       1             BinOp(op '-')
03d3 c3d3       3             Literal(&c0bf)
03d6 c3d6       2             Call(count 3)
03d8 c3d8       1             Pop(count 1)
03d9 c3d9       1             LoadGlobal [4]
03da c3da       1             Literal(lit undefined)
03db c3db       3             Literal(-7500)
03de c3de       3             Literal(7000)
03e1 c3e1       1             BinOp(op '-')
03e2 c3e2       3             Literal(&c12b)
03e5 c3e5       2             Call(count 3)
03e7 c3e7       1             Pop(count 1)
03e8 c3e8       1             LoadGlobal [4]
03e9 c3e9       1             Literal(lit undefined)
03ea c3ea       3             Literal(&c131)
03ed c3ed       3             Literal(&c0e3)
03f0 c3f0       1             BinOp(op '-')
03f1 c3f1       1             LoadGlobal [5]
03f2 c3f2       2             Branch &c425
03f4 c3f4    3  -         # Block block2
03f4 c3f4       3             Literal(&c137)
03f7 c3f7       0             <implicit fallthrough>
03f7 c3f7   46  -         # Block block3
03f7 c3f7       2             Call(count 3)
03f9 c3f9       1             Pop(count 1)
03fa c3fa       1             LoadGlobal [4]
03fb c3fb       1             Literal(lit undefined)
03fc c3fc       3             Literal(&c13d)
03ff c3ff       1             Literal(lit 1)
0400 c400       1             BinOp(op '-')
0401 c401       3             Literal(&c103)
0404 c404       2             Call(count 3)
0406 c406       1             Pop(count 1)
0407 c407       1             LoadGlobal [4]
0408 c408       1             Literal(lit undefined)
0409 c409       1             Literal(lit 2)
040a c40a       3             Literal(&c103)
040d c40d       1             BinOp(op '-')
040e c40e       3             Literal(&c13d)
0411 c411       2             Call(count 3)
0413 c413       1             Pop(count 1)
0414 c414       1             LoadGlobal [4]
0415 c415       1             Literal(lit undefined)
0416 c416       3             Literal(&c147)
0419 c419       3             Literal(&c117)
041c c41c       1             BinOp(op '-')
041d c41d       3             Literal(1000)
0420 c420       2             Call(count 3)
0422 c422       1             Pop(count 1)
0423 c423       1             Literal(lit undefined)
0424 c424       1             Return()
0425 c425    5  -         # Block block1
0425 c425       3             Literal(&c151)
0428 c428       2             Jump &c3f7
042a c42a       2     Header [Size: 127, Type: TC_REF_FUNCTION]
042c c42c  127  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testMultiplication
042c c42c       1         maxStackDepth: 4
042d c42d  100  -         # Block entry
042d c42d       1             LoadGlobal [4]
042e c42e       1             Literal(lit undefined)
042f c42f       3             Literal(5)
0432 c432       3             Literal(6)
0435 c435       1             BinOp(op '*')
0436 c436       3             Literal(30)
0439 c439       2             Call(count 3)
043b c43b       1             Pop(count 1)
043c c43c       1             LoadGlobal [4]
043d c43d       1             Literal(lit undefined)
043e c43e       3             Literal(&c15b)
0441 c441       3             Literal(6)
0444 c444       1             BinOp(op '*')
0445 c445       3             Literal(33)
0448 c448       2             Call(count 3)
044a c44a       1             Pop(count 1)
044b c44b       1             LoadGlobal [4]
044c c44c       1             Literal(lit undefined)
044d c44d       3             Literal(-5)
0450 c450       3             Literal(-6)
0453 c453       1             BinOp(op '*')
0454 c454       3             Literal(30)
0457 c457       2             Call(count 3)
0459 c459       1             Pop(count 1)
045a c45a       1             LoadGlobal [4]
045b c45b       1             Literal(lit undefined)
045c c45c       3             Literal(5)
045f c45f       3             Literal(-6)
0462 c462       1             BinOp(op '*')
0463 c463       3             Literal(-30)
0466 c466       2             Call(count 3)
0468 c468       1             Pop(count 1)
0469 c469       1             LoadGlobal [4]
046a c46a       1             Literal(lit undefined)
046b c46b       3             Literal(5000)
046e c46e       3             Literal(5000)
0471 c471       1             BinOp(op '*')
0472 c472       3             Literal(&c165)
0475 c475       2             Call(count 3)
0477 c477       1             Pop(count 1)
0478 c478       1             LoadGlobal [4]
0479 c479       1             Literal(lit undefined)
047a c47a       3             Literal(&c16b)
047d c47d       1             Literal(lit 2)
047e c47e       1             BinOp(op '*')
047f c47f       3             Literal(&c171)
0482 c482       2             Call(count 3)
0484 c484       1             Pop(count 1)
0485 c485       1             LoadGlobal [4]
0486 c486       1             Literal(lit undefined)
0487 c487       3             Literal(&c177)
048a c48a       3             Literal(&c177)
048d c48d       1             BinOp(op '*')
048e c48e       1             LoadGlobal [5]
048f c48f       2             Branch &c4a6
0491 c491    3  -         # Block block2
0491 c491       3             Literal(&c17d)
0494 c494       0             <implicit fallthrough>
0494 c494   18  -         # Block block3
0494 c494       2             Call(count 3)
0496 c496       1             Pop(count 1)
0497 c497       1             LoadGlobal [4]
0498 c498       1             Literal(lit undefined)
0499 c499       3             Literal(&c183)
049c c49c       1             Literal(lit 1)
049d c49d       1             BinOp(op '*')
049e c49e       3             Literal(&c183)
04a1 c4a1       2             Call(count 3)
04a3 c4a3       1             Pop(count 1)
04a4 c4a4       1             Literal(lit undefined)
04a5 c4a5       1             Return()
04a6 c4a6    5  -         # Block block1
04a6 c4a6       3             Literal(&c183)
04a9 c4a9       2             Jump &c494
04ab c4ab       2     Header [Size: 328, Type: TC_REF_FUNCTION]
04ad c4ad  328  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testDivision
04ad c4ad       1         maxStackDepth: 7
04ae c4ae   80  -         # Block entry
04ae c4ae       1             LoadGlobal [4]
04af c4af       1             Literal(lit undefined)
04b0 c4b0       3             Literal(6)
04b3 c4b3       3             Literal(3)
04b6 c4b6       1             BinOp(op '/')
04b7 c4b7       1             Literal(lit 2)
04b8 c4b8       2             Call(count 3)
04ba c4ba       1             Pop(count 1)
04bb c4bb       1             LoadGlobal [4]
04bc c4bc       1             Literal(lit undefined)
04bd c4bd       3             Literal(7)
04c0 c4c0       1             Literal(lit 2)
04c1 c4c1       1             BinOp(op '/')
04c2 c4c2       3             Literal(&c18d)
04c5 c4c5       2             Call(count 3)
04c7 c4c7       1             Pop(count 1)
04c8 c4c8       1             LoadGlobal [4]
04c9 c4c9       1             Literal(lit undefined)
04ca c4ca       3             Literal(&c197)
04cd c4cd       3             Literal(&c1a1)
04d0 c4d0       1             BinOp(op '/')
04d1 c4d1       3             Literal(&c1ab)
04d4 c4d4       2             Call(count 3)
04d6 c4d6       1             Pop(count 1)
04d7 c4d7       1             LoadGlobal [4]
04d8 c4d8       1             Literal(lit undefined)
04d9 c4d9       3             Literal(8)
04dc c4dc       1             Literal(lit 0)
04dd c4dd       1             BinOp(op '/')
04de c4de       1             LoadGlobal [0]
04df c4df       2             Call(count 3)
04e1 c4e1       1             Pop(count 1)
04e2 c4e2       1             LoadGlobal [4]
04e3 c4e3       1             Literal(lit undefined)
04e4 c4e4       3             Literal(8)
04e7 c4e7       3             Literal(-0)
04ea c4ea       1             BinOp(op '/')
04eb c4eb       1             LoadGlobal [0]
04ec c4ec       1             UnOp(op '-')
04ed c4ed       2             Call(count 3)
04ef c4ef       1             Pop(count 1)
04f0 c4f0       1             LoadGlobal [4]
04f1 c4f1       1             Literal(lit undefined)
04f2 c4f2       3             Literal(8)
04f5 c4f5       1             Literal(lit 1)
04f6 c4f6       1             Literal(lit 1)
04f7 c4f7       1             BinOp(op '-')
04f8 c4f8       1             UnOp(op '-')
04f9 c4f9       1             BinOp(op '/')
04fa c4fa       1             LoadGlobal [5]
04fb c4fb       3             Branch &c5f0
04fe c4fe    1  -         # Block block2
04fe c4fe       1             LoadGlobal [0]
04ff c4ff       0             <implicit fallthrough>
04ff c4ff  241  -         # Block block3
04ff c4ff       2             Call(count 3)
0501 c501       1             Pop(count 1)
0502 c502       1             LoadGlobal [4]
0503 c503       1             Literal(lit undefined)
0504 c504       3             Literal(-8)
0507 c507       1             Literal(lit 0)
0508 c508       1             BinOp(op '/')
0509 c509       1             LoadGlobal [0]
050a c50a       1             UnOp(op '-')
050b c50b       2             Call(count 3)
050d c50d       1             Pop(count 1)
050e c50e       1             LoadGlobal [4]
050f c50f       1             Literal(lit undefined)
0510 c510       3             Literal(-8)
0513 c513       3             Literal(-0)
0516 c516       1             BinOp(op '/')
0517 c517       1             LoadGlobal [0]
0518 c518       2             Call(count 3)
051a c51a       1             Pop(count 1)
051b c51b       1             LoadGlobal [3]
051c c51c       1             Literal(lit undefined)
051d c51d       1             LoadGlobal [2]
051e c51e       1             LoadVar(index 2)
051f c51f       3             Literal(&c082)
0522 c522       1             ObjectGet()
0523 c523       1             LoadVar(index 2)
0524 c524       1             LoadGlobal [0]
0525 c525       1             LoadGlobal [0]
0526 c526       1             BinOp(op '/')
0527 c527       2             Call(count 2)
0529 c529       1             StoreVar(index 2)
052a c52a       2             Call(count 2)
052c c52c       1             Pop(count 1)
052d c52d       1             LoadGlobal [4]
052e c52e       1             Literal(lit undefined)
052f c52f       3             Literal(6)
0532 c532       3             Literal(3)
0535 c535       1             BinOp(op 'DIVIDE_AND_TRUNC')
0536 c536       1             Literal(lit 2)
0537 c537       2             Call(count 3)
0539 c539       1             Pop(count 1)
053a c53a       1             LoadGlobal [4]
053b c53b       1             Literal(lit undefined)
053c c53c       3             Literal(7)
053f c53f       1             Literal(lit 2)
0540 c540       1             BinOp(op 'DIVIDE_AND_TRUNC')
0541 c541       3             Literal(3)
0544 c544       2             Call(count 3)
0546 c546       1             Pop(count 1)
0547 c547       1             LoadGlobal [4]
0548 c548       1             Literal(lit undefined)
0549 c549       3             Literal(&c197)
054c c54c       3             Literal(&c1a1)
054f c54f       1             BinOp(op 'DIVIDE_AND_TRUNC')
0550 c550       3             Literal(3)
0553 c553       2             Call(count 3)
0555 c555       1             Pop(count 1)
0556 c556       1             LoadGlobal [4]
0557 c557       1             Literal(lit undefined)
0558 c558       3             Literal(-6)
055b c55b       3             Literal(-3)
055e c55e       1             BinOp(op 'DIVIDE_AND_TRUNC')
055f c55f       1             Literal(lit 2)
0560 c560       2             Call(count 3)
0562 c562       1             Pop(count 1)
0563 c563       1             LoadGlobal [4]
0564 c564       1             Literal(lit undefined)
0565 c565       3             Literal(-7)
0568 c568       3             Literal(-2)
056b c56b       1             BinOp(op 'DIVIDE_AND_TRUNC')
056c c56c       3             Literal(3)
056f c56f       2             Call(count 3)
0571 c571       1             Pop(count 1)
0572 c572       1             LoadGlobal [4]
0573 c573       1             Literal(lit undefined)
0574 c574       3             Literal(&c1b5)
0577 c577       3             Literal(&c1bf)
057a c57a       1             BinOp(op 'DIVIDE_AND_TRUNC')
057b c57b       3             Literal(3)
057e c57e       2             Call(count 3)
0580 c580       1             Pop(count 1)
0581 c581       1             LoadGlobal [4]
0582 c582       1             Literal(lit undefined)
0583 c583       3             Literal(-6)
0586 c586       3             Literal(3)
0589 c589       1             BinOp(op 'DIVIDE_AND_TRUNC')
058a c58a       3             Literal(-2)
058d c58d       2             Call(count 3)
058f c58f       1             Pop(count 1)
0590 c590       1             LoadGlobal [4]
0591 c591       1             Literal(lit undefined)
0592 c592       3             Literal(-7)
0595 c595       1             Literal(lit 2)
0596 c596       1             BinOp(op 'DIVIDE_AND_TRUNC')
0597 c597       3             Literal(-3)
059a c59a       2             Call(count 3)
059c c59c       1             Pop(count 1)
059d c59d       1             LoadGlobal [4]
059e c59e       1             Literal(lit undefined)
059f c59f       3             Literal(&c1b5)
05a2 c5a2       3             Literal(&c1a1)
05a5 c5a5       1             BinOp(op 'DIVIDE_AND_TRUNC')
05a6 c5a6       3             Literal(-3)
05a9 c5a9       2             Call(count 3)
05ab c5ab       1             Pop(count 1)
05ac c5ac       1             LoadGlobal [4]
05ad c5ad       1             Literal(lit undefined)
05ae c5ae       3             Literal(8)
05b1 c5b1       1             Literal(lit 0)
05b2 c5b2       1             BinOp(op 'DIVIDE_AND_TRUNC')
05b3 c5b3       1             Literal(lit 0)
05b4 c5b4       2             Call(count 3)
05b6 c5b6       1             Pop(count 1)
05b7 c5b7       1             LoadGlobal [4]
05b8 c5b8       1             Literal(lit undefined)
05b9 c5b9       3             Literal(8)
05bc c5bc       3             Literal(-0)
05bf c5bf       1             BinOp(op 'DIVIDE_AND_TRUNC')
05c0 c5c0       1             Literal(lit 0)
05c1 c5c1       2             Call(count 3)
05c3 c5c3       1             Pop(count 1)
05c4 c5c4       1             LoadGlobal [4]
05c5 c5c5       1             Literal(lit undefined)
05c6 c5c6       3             Literal(-8)
05c9 c5c9       1             Literal(lit 0)
05ca c5ca       1             BinOp(op 'DIVIDE_AND_TRUNC')
05cb c5cb       1             Literal(lit 0)
05cc c5cc       2             Call(count 3)
05ce c5ce       1             Pop(count 1)
05cf c5cf       1             LoadGlobal [4]
05d0 c5d0       1             Literal(lit undefined)
05d1 c5d1       3             Literal(-8)
05d4 c5d4       3             Literal(-0)
05d7 c5d7       1             BinOp(op 'DIVIDE_AND_TRUNC')
05d8 c5d8       1             Literal(lit 0)
05d9 c5d9       2             Call(count 3)
05db c5db       1             Pop(count 1)
05dc c5dc       1             LoadGlobal [4]
05dd c5dd       1             Literal(lit undefined)
05de c5de       1             LoadGlobal [1]
05df c5df       1             LoadGlobal [1]
05e0 c5e0       1             BinOp(op 'DIVIDE_AND_TRUNC')
05e1 c5e1       1             Literal(lit 0)
05e2 c5e2       2             Call(count 3)
05e4 c5e4       1             Pop(count 1)
05e5 c5e5       1             LoadGlobal [4]
05e6 c5e6       1             Literal(lit undefined)
05e7 c5e7       1             LoadGlobal [0]
05e8 c5e8       1             LoadGlobal [0]
05e9 c5e9       1             BinOp(op 'DIVIDE_AND_TRUNC')
05ea c5ea       1             Literal(lit 0)
05eb c5eb       2             Call(count 3)
05ed c5ed       1             Pop(count 1)
05ee c5ee       1             Literal(lit undefined)
05ef c5ef       1             Return()
05f0 c5f0    5  -         # Block block1
05f0 c5f0       1             LoadGlobal [0]
05f1 c5f1       1             UnOp(op '-')
05f2 c5f2       3             Jump &c4ff
05f5 c5f5       2     Header [Size: 205, Type: TC_REF_FUNCTION]
05f7 c5f7  205  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testLessThan
05f7 c5f7       1         maxStackDepth: 4
05f8 c5f8  204  -         # Block entry
05f8 c5f8       1             LoadGlobal [4]
05f9 c5f9       1             Literal(lit undefined)
05fa c5fa       1             Literal(lit 1)
05fb c5fb       1             Literal(lit 2)
05fc c5fc       1             BinOp(op '<')
05fd c5fd       1             Literal(lit true)
05fe c5fe       2             Call(count 3)
0600 c600       1             Pop(count 1)
0601 c601       1             LoadGlobal [4]
0602 c602       1             Literal(lit undefined)
0603 c603       1             Literal(lit 2)
0604 c604       1             Literal(lit 1)
0605 c605       1             BinOp(op '<')
0606 c606       1             Literal(lit false)
0607 c607       2             Call(count 3)
0609 c609       1             Pop(count 1)
060a c60a       1             LoadGlobal [4]
060b c60b       1             Literal(lit undefined)
060c c60c       1             Literal(lit 2)
060d c60d       1             Literal(lit 2)
060e c60e       1             BinOp(op '<')
060f c60f       1             Literal(lit false)
0610 c610       2             Call(count 3)
0612 c612       1             Pop(count 1)
0613 c613       1             LoadGlobal [4]
0614 c614       1             Literal(lit undefined)
0615 c615       1             Literal(lit -1)
0616 c616       3             Literal(-2)
0619 c619       1             BinOp(op '<')
061a c61a       1             Literal(lit false)
061b c61b       2             Call(count 3)
061d c61d       1             Pop(count 1)
061e c61e       1             LoadGlobal [4]
061f c61f       1             Literal(lit undefined)
0620 c620       3             Literal(-2)
0623 c623       1             Literal(lit -1)
0624 c624       1             BinOp(op '<')
0625 c625       1             Literal(lit true)
0626 c626       2             Call(count 3)
0628 c628       1             Pop(count 1)
0629 c629       1             LoadGlobal [4]
062a c62a       1             Literal(lit undefined)
062b c62b       3             Literal(-2)
062e c62e       3             Literal(-2)
0631 c631       1             BinOp(op '<')
0632 c632       1             Literal(lit false)
0633 c633       2             Call(count 3)
0635 c635       1             Pop(count 1)
0636 c636       1             LoadGlobal [4]
0637 c637       1             Literal(lit undefined)
0638 c638       3             Literal(&c0ab)
063b c63b       3             Literal(&c1c9)
063e c63e       1             BinOp(op '<')
063f c63f       1             Literal(lit true)
0640 c640       2             Call(count 3)
0642 c642       1             Pop(count 1)
0643 c643       1             LoadGlobal [4]
0644 c644       1             Literal(lit undefined)
0645 c645       3             Literal(&c1c9)
0648 c648       3             Literal(&c0ab)
064b c64b       1             BinOp(op '<')
064c c64c       1             Literal(lit false)
064d c64d       2             Call(count 3)
064f c64f       1             Pop(count 1)
0650 c650       1             LoadGlobal [4]
0651 c651       1             Literal(lit undefined)
0652 c652       3             Literal(&c1c9)
0655 c655       3             Literal(&c1c9)
0658 c658       1             BinOp(op '<')
0659 c659       1             Literal(lit false)
065a c65a       2             Call(count 3)
065c c65c       1             Pop(count 1)
065d c65d       1             LoadGlobal [4]
065e c65e       1             Literal(lit undefined)
065f c65f       1             Literal(lit 1)
0660 c660       1             Literal(lit 2)
0661 c661       1             BinOp(op '<=')
0662 c662       1             Literal(lit true)
0663 c663       2             Call(count 3)
0665 c665       1             Pop(count 1)
0666 c666       1             LoadGlobal [4]
0667 c667       1             Literal(lit undefined)
0668 c668       1             Literal(lit 2)
0669 c669       1             Literal(lit 1)
066a c66a       1             BinOp(op '<=')
066b c66b       1             Literal(lit false)
066c c66c       2             Call(count 3)
066e c66e       1             Pop(count 1)
066f c66f       1             LoadGlobal [4]
0670 c670       1             Literal(lit undefined)
0671 c671       1             Literal(lit 2)
0672 c672       1             Literal(lit 2)
0673 c673       1             BinOp(op '<=')
0674 c674       1             Literal(lit true)
0675 c675       2             Call(count 3)
0677 c677       1             Pop(count 1)
0678 c678       1             LoadGlobal [4]
0679 c679       1             Literal(lit undefined)
067a c67a       1             Literal(lit -1)
067b c67b       3             Literal(-2)
067e c67e       1             BinOp(op '<=')
067f c67f       1             Literal(lit false)
0680 c680       2             Call(count 3)
0682 c682       1             Pop(count 1)
0683 c683       1             LoadGlobal [4]
0684 c684       1             Literal(lit undefined)
0685 c685       3             Literal(-2)
0688 c688       1             Literal(lit -1)
0689 c689       1             BinOp(op '<=')
068a c68a       1             Literal(lit true)
068b c68b       2             Call(count 3)
068d c68d       1             Pop(count 1)
068e c68e       1             LoadGlobal [4]
068f c68f       1             Literal(lit undefined)
0690 c690       3             Literal(-2)
0693 c693       3             Literal(-2)
0696 c696       1             BinOp(op '<=')
0697 c697       1             Literal(lit true)
0698 c698       2             Call(count 3)
069a c69a       1             Pop(count 1)
069b c69b       1             LoadGlobal [4]
069c c69c       1             Literal(lit undefined)
069d c69d       3             Literal(&c0ab)
06a0 c6a0       3             Literal(&c1c9)
06a3 c6a3       1             BinOp(op '<=')
06a4 c6a4       1             Literal(lit true)
06a5 c6a5       2             Call(count 3)
06a7 c6a7       1             Pop(count 1)
06a8 c6a8       1             LoadGlobal [4]
06a9 c6a9       1             Literal(lit undefined)
06aa c6aa       3             Literal(&c1c9)
06ad c6ad       3             Literal(&c0ab)
06b0 c6b0       1             BinOp(op '<=')
06b1 c6b1       1             Literal(lit false)
06b2 c6b2       2             Call(count 3)
06b4 c6b4       1             Pop(count 1)
06b5 c6b5       1             LoadGlobal [4]
06b6 c6b6       1             Literal(lit undefined)
06b7 c6b7       3             Literal(&c1c9)
06ba c6ba       3             Literal(&c1c9)
06bd c6bd       1             BinOp(op '<=')
06be c6be       1             Literal(lit true)
06bf c6bf       2             Call(count 3)
06c1 c6c1       1             Pop(count 1)
06c2 c6c2       1             Literal(lit undefined)
06c3 c6c3       1             Return()
06c4 c6c4       2     Header [Size: 205, Type: TC_REF_FUNCTION]
06c6 c6c6  205  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testGreaterThan
06c6 c6c6       1         maxStackDepth: 4
06c7 c6c7  204  -         # Block entry
06c7 c6c7       1             LoadGlobal [4]
06c8 c6c8       1             Literal(lit undefined)
06c9 c6c9       1             Literal(lit 1)
06ca c6ca       1             Literal(lit 2)
06cb c6cb       1             BinOp(op '>')
06cc c6cc       1             Literal(lit false)
06cd c6cd       2             Call(count 3)
06cf c6cf       1             Pop(count 1)
06d0 c6d0       1             LoadGlobal [4]
06d1 c6d1       1             Literal(lit undefined)
06d2 c6d2       1             Literal(lit 2)
06d3 c6d3       1             Literal(lit 1)
06d4 c6d4       1             BinOp(op '>')
06d5 c6d5       1             Literal(lit true)
06d6 c6d6       2             Call(count 3)
06d8 c6d8       1             Pop(count 1)
06d9 c6d9       1             LoadGlobal [4]
06da c6da       1             Literal(lit undefined)
06db c6db       1             Literal(lit 2)
06dc c6dc       1             Literal(lit 2)
06dd c6dd       1             BinOp(op '>')
06de c6de       1             Literal(lit false)
06df c6df       2             Call(count 3)
06e1 c6e1       1             Pop(count 1)
06e2 c6e2       1             LoadGlobal [4]
06e3 c6e3       1             Literal(lit undefined)
06e4 c6e4       1             Literal(lit -1)
06e5 c6e5       3             Literal(-2)
06e8 c6e8       1             BinOp(op '>')
06e9 c6e9       1             Literal(lit true)
06ea c6ea       2             Call(count 3)
06ec c6ec       1             Pop(count 1)
06ed c6ed       1             LoadGlobal [4]
06ee c6ee       1             Literal(lit undefined)
06ef c6ef       3             Literal(-2)
06f2 c6f2       1             Literal(lit -1)
06f3 c6f3       1             BinOp(op '>')
06f4 c6f4       1             Literal(lit false)
06f5 c6f5       2             Call(count 3)
06f7 c6f7       1             Pop(count 1)
06f8 c6f8       1             LoadGlobal [4]
06f9 c6f9       1             Literal(lit undefined)
06fa c6fa       3             Literal(-2)
06fd c6fd       3             Literal(-2)
0700 c700       1             BinOp(op '>')
0701 c701       1             Literal(lit false)
0702 c702       2             Call(count 3)
0704 c704       1             Pop(count 1)
0705 c705       1             LoadGlobal [4]
0706 c706       1             Literal(lit undefined)
0707 c707       3             Literal(&c0ab)
070a c70a       3             Literal(&c1c9)
070d c70d       1             BinOp(op '>')
070e c70e       1             Literal(lit false)
070f c70f       2             Call(count 3)
0711 c711       1             Pop(count 1)
0712 c712       1             LoadGlobal [4]
0713 c713       1             Literal(lit undefined)
0714 c714       3             Literal(&c1c9)
0717 c717       3             Literal(&c0ab)
071a c71a       1             BinOp(op '>')
071b c71b       1             Literal(lit true)
071c c71c       2             Call(count 3)
071e c71e       1             Pop(count 1)
071f c71f       1             LoadGlobal [4]
0720 c720       1             Literal(lit undefined)
0721 c721       3             Literal(&c1c9)
0724 c724       3             Literal(&c1c9)
0727 c727       1             BinOp(op '>')
0728 c728       1             Literal(lit false)
0729 c729       2             Call(count 3)
072b c72b       1             Pop(count 1)
072c c72c       1             LoadGlobal [4]
072d c72d       1             Literal(lit undefined)
072e c72e       1             Literal(lit 1)
072f c72f       1             Literal(lit 2)
0730 c730       1             BinOp(op '>=')
0731 c731       1             Literal(lit false)
0732 c732       2             Call(count 3)
0734 c734       1             Pop(count 1)
0735 c735       1             LoadGlobal [4]
0736 c736       1             Literal(lit undefined)
0737 c737       1             Literal(lit 2)
0738 c738       1             Literal(lit 1)
0739 c739       1             BinOp(op '>=')
073a c73a       1             Literal(lit true)
073b c73b       2             Call(count 3)
073d c73d       1             Pop(count 1)
073e c73e       1             LoadGlobal [4]
073f c73f       1             Literal(lit undefined)
0740 c740       1             Literal(lit 2)
0741 c741       1             Literal(lit 2)
0742 c742       1             BinOp(op '>=')
0743 c743       1             Literal(lit true)
0744 c744       2             Call(count 3)
0746 c746       1             Pop(count 1)
0747 c747       1             LoadGlobal [4]
0748 c748       1             Literal(lit undefined)
0749 c749       1             Literal(lit -1)
074a c74a       3             Literal(-2)
074d c74d       1             BinOp(op '>=')
074e c74e       1             Literal(lit true)
074f c74f       2             Call(count 3)
0751 c751       1             Pop(count 1)
0752 c752       1             LoadGlobal [4]
0753 c753       1             Literal(lit undefined)
0754 c754       3             Literal(-2)
0757 c757       1             Literal(lit -1)
0758 c758       1             BinOp(op '>=')
0759 c759       1             Literal(lit false)
075a c75a       2             Call(count 3)
075c c75c       1             Pop(count 1)
075d c75d       1             LoadGlobal [4]
075e c75e       1             Literal(lit undefined)
075f c75f       3             Literal(-2)
0762 c762       3             Literal(-2)
0765 c765       1             BinOp(op '>=')
0766 c766       1             Literal(lit true)
0767 c767       2             Call(count 3)
0769 c769       1             Pop(count 1)
076a c76a       1             LoadGlobal [4]
076b c76b       1             Literal(lit undefined)
076c c76c       3             Literal(&c0ab)
076f c76f       3             Literal(&c1c9)
0772 c772       1             BinOp(op '>=')
0773 c773       1             Literal(lit false)
0774 c774       2             Call(count 3)
0776 c776       1             Pop(count 1)
0777 c777       1             LoadGlobal [4]
0778 c778       1             Literal(lit undefined)
0779 c779       3             Literal(&c1c9)
077c c77c       3             Literal(&c0ab)
077f c77f       1             BinOp(op '>=')
0780 c780       1             Literal(lit true)
0781 c781       2             Call(count 3)
0783 c783       1             Pop(count 1)
0784 c784       1             LoadGlobal [4]
0785 c785       1             Literal(lit undefined)
0786 c786       3             Literal(&c1c9)
0789 c789       3             Literal(&c1c9)
078c c78c       1             BinOp(op '>=')
078d c78d       1             Literal(lit true)
078e c78e       2             Call(count 3)
0790 c790       1             Pop(count 1)
0791 c791       1             Literal(lit undefined)
0792 c792       1             Return()
0793 c793       2     Header [Size: 207, Type: TC_REF_FUNCTION]
0795 c795  207  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testRemainder
0795 c795       1         maxStackDepth: 7
0796 c796  206  -         # Block entry
0796 c796       1             LoadGlobal [4]
0797 c797       1             Literal(lit undefined)
0798 c798       1             Literal(lit 2)
0799 c799       1             Literal(lit 1)
079a c79a       1             BinOp(op '%')
079b c79b       1             Literal(lit 0)
079c c79c       2             Call(count 3)
079e c79e       1             Pop(count 1)
079f c79f       1             LoadGlobal [4]
07a0 c7a0       1             Literal(lit undefined)
07a1 c7a1       3             Literal(5)
07a4 c7a4       1             Literal(lit 2)
07a5 c7a5       1             BinOp(op '%')
07a6 c7a6       1             Literal(lit 1)
07a7 c7a7       2             Call(count 3)
07a9 c7a9       1             Pop(count 1)
07aa c7aa       1             LoadGlobal [4]
07ab c7ab       1             Literal(lit undefined)
07ac c7ac       3             Literal(550)
07af c7af       3             Literal(100)
07b2 c7b2       1             BinOp(op '%')
07b3 c7b3       3             Literal(50)
07b6 c7b6       2             Call(count 3)
07b8 c7b8       1             Pop(count 1)
07b9 c7b9       1             LoadGlobal [4]
07ba c7ba       1             Literal(lit undefined)
07bb c7bb       3             Literal(-8)
07be c7be       3             Literal(3)
07c1 c7c1       1             BinOp(op '%')
07c2 c7c2       3             Literal(-2)
07c5 c7c5       2             Call(count 3)
07c7 c7c7       1             Pop(count 1)
07c8 c7c8       1             LoadGlobal [4]
07c9 c7c9       1             Literal(lit undefined)
07ca c7ca       3             Literal(8)
07cd c7cd       3             Literal(-3)
07d0 c7d0       1             BinOp(op '%')
07d1 c7d1       1             Literal(lit 2)
07d2 c7d2       2             Call(count 3)
07d4 c7d4       1             Pop(count 1)
07d5 c7d5       1             LoadGlobal [4]
07d6 c7d6       1             Literal(lit undefined)
07d7 c7d7       3             Literal(-8)
07da c7da       3             Literal(-3)
07dd c7dd       1             BinOp(op '%')
07de c7de       3             Literal(-2)
07e1 c7e1       2             Call(count 3)
07e3 c7e3       1             Pop(count 1)
07e4 c7e4       1             LoadGlobal [4]
07e5 c7e5       1             Literal(lit undefined)
07e6 c7e6       3             Literal(&c1d3)
07e9 c7e9       1             Literal(lit 1)
07ea c7ea       1             BinOp(op '%')
07eb c7eb       3             Literal(&c1dd)
07ee c7ee       2             Call(count 3)
07f0 c7f0       1             Pop(count 1)
07f1 c7f1       1             LoadGlobal [4]
07f2 c7f2       1             Literal(lit undefined)
07f3 c7f3       3             Literal(&c1e7)
07f6 c7f6       1             Literal(lit 2)
07f7 c7f7       1             BinOp(op '%')
07f8 c7f8       3             Literal(&c1f1)
07fb c7fb       2             Call(count 3)
07fd c7fd       1             Pop(count 1)
07fe c7fe       1             LoadGlobal [4]
07ff c7ff       1             Literal(lit undefined)
0800 c800       3             Literal(&c1fb)
0803 c803       3             Literal(100)
0806 c806       1             BinOp(op '%')
0807 c807       3             Literal(&c205)
080a c80a       2             Call(count 3)
080c c80c       1             Pop(count 1)
080d c80d       1             LoadGlobal [4]
080e c80e       1             Literal(lit undefined)
080f c80f       3             Literal(&c20f)
0812 c812       3             Literal(4)
0815 c815       1             BinOp(op '%')
0816 c816       3             Literal(&c219)
0819 c819       2             Call(count 3)
081b c81b       1             Pop(count 1)
081c c81c       1             LoadGlobal [4]
081d c81d       1             Literal(lit undefined)
081e c81e       3             Literal(&c223)
0821 c821       3             Literal(-4)
0824 c824       1             BinOp(op '%')
0825 c825       3             Literal(&c22d)
0828 c828       2             Call(count 3)
082a c82a       1             Pop(count 1)
082b c82b       1             LoadGlobal [4]
082c c82c       1             Literal(lit undefined)
082d c82d       3             Literal(&c20f)
0830 c830       3             Literal(-4)
0833 c833       1             BinOp(op '%')
0834 c834       3             Literal(&c219)
0837 c837       2             Call(count 3)
0839 c839       1             Pop(count 1)
083a c83a       1             LoadGlobal [3]
083b c83b       1             Literal(lit undefined)
083c c83c       1             LoadGlobal [2]
083d c83d       1             LoadVar(index 2)
083e c83e       3             Literal(&c082)
0841 c841       1             ObjectGet()
0842 c842       1             LoadVar(index 2)
0843 c843       3             Literal(5)
0846 c846       1             Literal(lit 0)
0847 c847       1             BinOp(op '%')
0848 c848       2             Call(count 2)
084a c84a       1             StoreVar(index 2)
084b c84b       2             Call(count 2)
084d c84d       1             Pop(count 1)
084e c84e       1             LoadGlobal [3]
084f c84f       1             Literal(lit undefined)
0850 c850       1             LoadGlobal [2]
0851 c851       1             LoadVar(index 2)
0852 c852       3             Literal(&c082)
0855 c855       1             ObjectGet()
0856 c856       1             LoadVar(index 2)
0857 c857       3             Literal(&c237)
085a c85a       1             Literal(lit 0)
085b c85b       1             BinOp(op '%')
085c c85c       2             Call(count 2)
085e c85e       1             StoreVar(index 2)
085f c85f       2             Call(count 2)
0861 c861       1             Pop(count 1)
0862 c862       1             Literal(lit undefined)
0863 c863       1             Return()
0864 c864       2     Header [Size: 56, Type: TC_REF_FUNCTION]
0866 c866   56  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testPower
0866 c866       1         maxStackDepth: 7
0867 c867   55  -         # Block entry
0867 c867       1             LoadGlobal [4]
0868 c868       1             Literal(lit undefined)
0869 c869       1             Literal(lit 2)
086a c86a       3             Literal(3)
086d c86d       1             BinOp(op '**')
086e c86e       3             Literal(8)
0871 c871       2             Call(count 3)
0873 c873       1             Pop(count 1)
0874 c874       1             LoadGlobal [4]
0875 c875       1             Literal(lit undefined)
0876 c876       1             Literal(lit 2)
0877 c877       1             Literal(lit 0)
0878 c878       1             BinOp(op '**')
0879 c879       1             Literal(lit 1)
087a c87a       2             Call(count 3)
087c c87c       1             Pop(count 1)
087d c87d       1             LoadGlobal [4]
087e c87e       1             Literal(lit undefined)
087f c87f       3             Literal(&c1a1)
0882 c882       1             Literal(lit 1)
0883 c883       1             BinOp(op '**')
0884 c884       3             Literal(&c1a1)
0887 c887       2             Call(count 3)
0889 c889       1             Pop(count 1)
088a c88a       1             LoadGlobal [3]
088b c88b       1             Literal(lit undefined)
088c c88c       1             LoadGlobal [2]
088d c88d       1             LoadVar(index 2)
088e c88e       3             Literal(&c082)
0891 c891       1             ObjectGet()
0892 c892       1             LoadVar(index 2)
0893 c893       1             Literal(lit 1)
0894 c894       1             LoadGlobal [0]
0895 c895       1             BinOp(op '**')
0896 c896       2             Call(count 2)
0898 c898       1             StoreVar(index 2)
0899 c899       2             Call(count 2)
089b c89b       1             Pop(count 1)
089c c89c       1             Literal(lit undefined)
089d c89d       1             Return()
089e c89e       2     Header [Size: 118, Type: TC_REF_FUNCTION]
08a0 c8a0  118  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testIncrDecr
08a0 c8a0       1         maxStackDepth: 6
08a1 c8a1  117  -         # Block entry
08a1 c8a1       1             Literal(lit 1)
08a2 c8a2       1             LoadGlobal [4]
08a3 c8a3       1             Literal(lit undefined)
08a4 c8a4       1             LoadVar(index 0)
08a5 c8a5       1             LoadVar(index 3)
08a6 c8a6       1             Literal(lit 1)
08a7 c8a7       1             BinOp(op '+')
08a8 c8a8       1             LoadVar(index 4)
08a9 c8a9       1             StoreVar(index 0)
08aa c8aa       1             Pop(count 1)
08ab c8ab       1             Literal(lit 1)
08ac c8ac       2             Call(count 3)
08ae c8ae       1             Pop(count 1)
08af c8af       1             LoadGlobal [4]
08b0 c8b0       1             Literal(lit undefined)
08b1 c8b1       1             LoadVar(index 0)
08b2 c8b2       1             Literal(lit 2)
08b3 c8b3       2             Call(count 3)
08b5 c8b5       1             Pop(count 1)
08b6 c8b6       1             LoadGlobal [4]
08b7 c8b7       1             Literal(lit undefined)
08b8 c8b8       1             LoadVar(index 0)
08b9 c8b9       1             Literal(lit 1)
08ba c8ba       1             BinOp(op '+')
08bb c8bb       1             LoadVar(index 3)
08bc c8bc       1             StoreVar(index 0)
08bd c8bd       3             Literal(3)
08c0 c8c0       2             Call(count 3)
08c2 c8c2       1             Pop(count 1)
08c3 c8c3       1             LoadGlobal [4]
08c4 c8c4       1             Literal(lit undefined)
08c5 c8c5       1             LoadVar(index 0)
08c6 c8c6       3             Literal(3)
08c9 c8c9       2             Call(count 3)
08cb c8cb       1             Pop(count 1)
08cc c8cc       1             LoadGlobal [4]
08cd c8cd       1             Literal(lit undefined)
08ce c8ce       1             LoadVar(index 0)
08cf c8cf       1             LoadVar(index 3)
08d0 c8d0       1             Literal(lit 1)
08d1 c8d1       1             BinOp(op '-')
08d2 c8d2       1             LoadVar(index 4)
08d3 c8d3       1             StoreVar(index 0)
08d4 c8d4       1             Pop(count 1)
08d5 c8d5       3             Literal(3)
08d8 c8d8       2             Call(count 3)
08da c8da       1             Pop(count 1)
08db c8db       1             LoadGlobal [4]
08dc c8dc       1             Literal(lit undefined)
08dd c8dd       1             LoadVar(index 0)
08de c8de       1             Literal(lit 2)
08df c8df       2             Call(count 3)
08e1 c8e1       1             Pop(count 1)
08e2 c8e2       1             LoadGlobal [4]
08e3 c8e3       1             Literal(lit undefined)
08e4 c8e4       1             LoadVar(index 0)
08e5 c8e5       1             Literal(lit 1)
08e6 c8e6       1             BinOp(op '-')
08e7 c8e7       1             LoadVar(index 3)
08e8 c8e8       1             StoreVar(index 0)
08e9 c8e9       1             Literal(lit 1)
08ea c8ea       2             Call(count 3)
08ec c8ec       1             Pop(count 1)
08ed c8ed       1             LoadGlobal [4]
08ee c8ee       1             Literal(lit undefined)
08ef c8ef       1             LoadVar(index 0)
08f0 c8f0       1             Literal(lit 1)
08f1 c8f1       2             Call(count 3)
08f3 c8f3       1             Pop(count 1)
08f4 c8f4       3             Literal(&c13d)
08f7 c8f7       1             LoadVar(index 1)
08f8 c8f8       1             StoreVar(index 0)
08f9 c8f9       1             Pop(count 1)
08fa c8fa       1             LoadGlobal [4]
08fb c8fb       1             Literal(lit undefined)
08fc c8fc       1             LoadVar(index 0)
08fd c8fd       1             Literal(lit 1)
08fe c8fe       1             BinOp(op '+')
08ff c8ff       1             LoadVar(index 3)
0900 c900       1             StoreVar(index 0)
0901 c901       3             Literal(&c1a1)
0904 c904       2             Call(count 3)
0906 c906       1             Pop(count 1)
0907 c907       1             LoadGlobal [4]
0908 c908       1             Literal(lit undefined)
0909 c909       1             LoadVar(index 0)
090a c90a       1             Literal(lit 1)
090b c90b       1             BinOp(op '-')
090c c90c       1             LoadVar(index 3)
090d c90d       1             StoreVar(index 0)
090e c90e       3             Literal(&c13d)
0911 c911       2             Call(count 3)
0913 c913       1             Pop(count 1)
0914 c914       1             Literal(lit undefined)
0915 c915       1             Return()
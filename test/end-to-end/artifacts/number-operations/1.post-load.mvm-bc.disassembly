Bytecode size: 2291 B

Ofst Addr    Size
==== ==== =======
0000        44  - # Header
0000            1     bytecodeVersion: 1
0001            1     headerSize: 44
0002            2     bytecodeSize: 2291
0004            2     expectedCRC: a69d
0006            2     requiredEngineVersion: 0
0008            4     requiredFeatureFlags: 1
000c            2     globalVariableCount: 17
000e            2     initialDataOffset: 002c
0010            2     initialDataSize: 34
0012            2     initialHeapOffset: 004e
0014            2     initialHeapSize: 10
0016            2     gcRootsOffset: 0058
0018            2     gcRootsCount: 0
001a            2     importTableOffset: 0058
001c            2     importTableSize: 4
001e            2     exportTableOffset: 005c
0020            2     exportTableSize: 4
0022            2     shortCallTableOffset: 0060
0024            2     shortCallTableSize: 0
0026            2     stringTableOffset: 0060
0028            2     stringTableSize: 2
002a            2     arrayProtoPointer: null
002c 8000   34  - # Globals
002c 8000       2     [0]: &c064
002e 8002       2     [1]: NaN
0030 8004       2     [2]: &4002
0032 8006       2     [3]: &c06e
0034 8008       2     [4]: &c072
0036 800a       2     [5]: false
0038 800c       2     [6]: &c273
003a 800e       2     [7]: &c2a3
003c 8010       2     [8]: &c2c0
003e 8012       2     [9]: &c37d
0040 8014       2     [10]: &c409
0042 8016       2     [11]: &c48a
0044 8018       2     [12]: &c5d4
0046 801a       2     [13]: &c6a3
0048 801c       2     [14]: &c772
004a 801e       2     [15]: &c843
004c 8020       2     [16]: &c87d
004e 4000   10  - # GC allocations
004e 4000       2     Header [Size: 2, Type: TC_REF_PROPERTY_LIST]
0050 4002    2  -     # Object as TsPropertyList
0050 4002       2         first: &4004
0052 4004    6  -     # TsPropertyCell
0052 4004       2         next: &0000
0054 4006       2         key: &c076
0056 4008       2         value: &c22e
0058 c058    4  - # Import Table
0058 c058       2     [0]: 2
005a c05a       2     [1]: 3
005c c05c    4  - # Export Table
005c c05c       4     [0]: &c236
0060 c060    2  - # String Table
0060 c060       2     [0]: &c076
0062 c062 2193  - # ROM allocations
0062 c062       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0064 c064       8     Value: Infinity
006c c06c       2     Header [Size: 2, Type: TC_REF_HOST_FUNC]
006e c06e       2     Value: Import Table [0] (&c058)
0070 c070       2     Header [Size: 2, Type: TC_REF_HOST_FUNC]
0072 c072       2     Value: Import Table [1] (&c05a)
0074 c074       2     Header [Size: 6, Type: TC_REF_UNIQUE_STRING]
0076 c076       6     Value: 'isNaN'
007c c07c       2     Header [Size: 8, Type: TC_REF_FLOAT64]
007e c07e       8     Value: -1.1
0086 c086       2     Header [Size: 4, Type: TC_REF_INT32]
0088 c088       4     Value: -2147483648
008c c08c       2     Header [Size: 8, Type: TC_REF_FLOAT64]
008e c08e       8     Value: 2147483648
0096 c096       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0098 c098       8     Value: 1.1
00a0 c0a0       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00a2 c0a2       8     Value: 3.1
00aa c0aa       2     Header [Size: 4, Type: TC_REF_INT32]
00ac c0ac       4     Value: 10000
00b0 c0b0       2     Header [Size: 4, Type: TC_REF_INT32]
00b2 c0b2       4     Value: 18000
00b6 c0b6       2     Header [Size: 4, Type: TC_REF_INT32]
00b8 c0b8       4     Value: 80000
00bc c0bc       2     Header [Size: 4, Type: TC_REF_INT32]
00be c0be       4     Value: 70000
00c2 c0c2       2     Header [Size: 4, Type: TC_REF_INT32]
00c4 c0c4       4     Value: 150000
00c8 c0c8       2     Header [Size: 4, Type: TC_REF_INT32]
00ca c0ca       4     Value: 14500
00ce c0ce       2     Header [Size: 4, Type: TC_REF_INT32]
00d0 c0d0       4     Value: 2000000000
00d4 c0d4       2     Header [Size: 4, Type: TC_REF_INT32]
00d6 c0d6       4     Value: -294967296
00da c0da       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00dc c0dc       8     Value: -1.5
00e4 c0e4       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00e6 c0e6       8     Value: -0.5
00ee c0ee       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00f0 c0f0       8     Value: 0.5
00f8 c0f8       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00fa c0fa       8     Value: -5000000000
0102 c102       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0104 c104       8     Value: 4999999000
010c c10c       2     Header [Size: 8, Type: TC_REF_FLOAT64]
010e c10e       8     Value: 4000000000
0116 c116       2     Header [Size: 4, Type: TC_REF_INT32]
0118 c118       4     Value: -14500
011c c11c       2     Header [Size: 4, Type: TC_REF_INT32]
011e c11e       4     Value: -2000000000
0122 c122       2     Header [Size: 4, Type: TC_REF_INT32]
0124 c124       4     Value: 294967296
0128 c128       2     Header [Size: 8, Type: TC_REF_FLOAT64]
012a c12a       8     Value: 1.5
0132 c132       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0134 c134       8     Value: 5000000000
013c c13c       2     Header [Size: 8, Type: TC_REF_FLOAT64]
013e c13e       8     Value: -4000000000
0146 c146       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0148 c148       8     Value: 5.5
0150 c150       2     Header [Size: 4, Type: TC_REF_INT32]
0152 c152       4     Value: 25000000
0156 c156       2     Header [Size: 4, Type: TC_REF_INT32]
0158 c158       4     Value: 17000
015c c15c       2     Header [Size: 4, Type: TC_REF_INT32]
015e c15e       4     Value: 34000
0162 c162       2     Header [Size: 4, Type: TC_REF_INT32]
0164 c164       4     Value: 5000000
0168 c168       2     Header [Size: 4, Type: TC_REF_INT32]
016a c16a       4     Value: -1004630016
016e c16e       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0170 c170       8     Value: 25000000000000
0178 c178       2     Header [Size: 8, Type: TC_REF_FLOAT64]
017a c17a       8     Value: 3.5
0182 c182       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0184 c184       8     Value: 8.5
018c c18c       2     Header [Size: 8, Type: TC_REF_FLOAT64]
018e c18e       8     Value: 2.5
0196 c196       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0198 c198       8     Value: 3.4
01a0 c1a0       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01a2 c1a2       8     Value: -8.5
01aa c1aa       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01ac c1ac       8     Value: -2.5
01b4 c1b4       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01b6 c1b6       8     Value: 2.1
01be c1be       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01c0 c1c0       8     Value: 2.25
01c8 c1c8       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01ca c1ca       8     Value: 0.25
01d2 c1d2       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01d4 c1d4       8     Value: 5.25
01dc c1dc       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01de c1de       8     Value: 1.25
01e6 c1e6       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01e8 c1e8       8     Value: 550.25
01f0 c1f0       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01f2 c1f2       8     Value: 50.25
01fa c1fa       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01fc c1fc       8     Value: -7.25
0204 c204       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0206 c206       8     Value: -3.25
020e c20e       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0210 c210       8     Value: 7.25
0218 c218       2     Header [Size: 8, Type: TC_REF_FLOAT64]
021a c21a       8     Value: 3.25
0222 c222       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0224 c224       8     Value: 5.1
022c c22c       2     Header [Size: 6, Type: TC_REF_FUNCTION]
022e c22e    6  -     # Function <builtin>:Number_isNaN
022e c22e       1         maxStackDepth: 3
022f c22f    5  -         # Block entry
022f c22f       1             LoadArg(index 1)
0230 c230       1             LoadVar(index 0)
0231 c231       1             LoadVar(index 0)
0232 c232       1             BinOp(op '!==')
0233 c233       1             Return()
0234 c234       2     Header [Size: 59, Type: TC_REF_FUNCTION]
0236 c236   59  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:run
0236 c236       1         maxStackDepth: 2
0237 c237   58  -         # Block entry
0237 c237       1             LoadGlobal [6]
0238 c238       1             Literal(lit undefined)
0239 c239       2             Call(count 1)
023b c23b       1             Pop(count 1)
023c c23c       1             LoadGlobal [7]
023d c23d       1             Literal(lit undefined)
023e c23e       2             Call(count 1)
0240 c240       1             Pop(count 1)
0241 c241       1             LoadGlobal [8]
0242 c242       1             Literal(lit undefined)
0243 c243       2             Call(count 1)
0245 c245       1             Pop(count 1)
0246 c246       1             LoadGlobal [9]
0247 c247       1             Literal(lit undefined)
0248 c248       2             Call(count 1)
024a c24a       1             Pop(count 1)
024b c24b       1             LoadGlobal [10]
024c c24c       1             Literal(lit undefined)
024d c24d       2             Call(count 1)
024f c24f       1             Pop(count 1)
0250 c250       1             LoadGlobal [11]
0251 c251       1             Literal(lit undefined)
0252 c252       2             Call(count 1)
0254 c254       1             Pop(count 1)
0255 c255       1             LoadGlobal [12]
0256 c256       1             Literal(lit undefined)
0257 c257       2             Call(count 1)
0259 c259       1             Pop(count 1)
025a c25a       1             LoadGlobal [13]
025b c25b       1             Literal(lit undefined)
025c c25c       2             Call(count 1)
025e c25e       1             Pop(count 1)
025f c25f       1             LoadGlobal [14]
0260 c260       1             Literal(lit undefined)
0261 c261       2             Call(count 1)
0263 c263       1             Pop(count 1)
0264 c264       1             LoadGlobal [15]
0265 c265       1             Literal(lit undefined)
0266 c266       2             Call(count 1)
0268 c268       1             Pop(count 1)
0269 c269       2             LoadGlobal [16]
026b c26b       1             Literal(lit undefined)
026c c26c       2             Call(count 1)
026e c26e       1             Pop(count 1)
026f c26f       1             Literal(lit undefined)
0270 c270       1             Return()
0271 c271       2     Header [Size: 46, Type: TC_REF_FUNCTION]
0273 c273   46  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testNegate
0273 c273       1         maxStackDepth: 5
0274 c274   32  -         # Block entry
0274 c274       1             LoadGlobal [4]
0275 c275       1             Literal(lit undefined)
0276 c276       1             Literal(lit -1)
0277 c277       1             Literal(lit 2)
0278 c278       3             Literal(3)
027b c27b       1             BinOp(op '-')
027c c27c       2             Call(count 3)
027e c27e       1             Pop(count 1)
027f c27f       1             LoadGlobal [4]
0280 c280       1             Literal(lit undefined)
0281 c281       1             LoadGlobal [0]
0282 c282       1             UnOp(op '-')
0283 c283       3             Literal(&c07e)
0286 c286       1             Literal(lit 0)
0287 c287       1             BinOp(op '/')
0288 c288       2             Call(count 3)
028a c28a       1             Pop(count 1)
028b c28b       1             LoadGlobal [4]
028c c28c       1             Literal(lit undefined)
028d c28d       3             Literal(&c088)
0290 c290       1             UnOp(op '-')
0291 c291       1             LoadGlobal [5]
0292 c292       2             Branch &c29c
0294 c294    3  -         # Block block2
0294 c294       3             Literal(&c088)
0297 c297       0             <implicit fallthrough>
0297 c297    5  -         # Block block3
0297 c297       2             Call(count 3)
0299 c299       1             Pop(count 1)
029a c29a       1             Literal(lit undefined)
029b c29b       1             Return()
029c c29c    5  -         # Block block1
029c c29c       3             Literal(&c08e)
029f c29f       2             Jump &c297
02a1 c2a1       2     Header [Size: 27, Type: TC_REF_FUNCTION]
02a3 c2a3   27  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testUnaryPlus
02a3 c2a3       1         maxStackDepth: 4
02a4 c2a4   26  -         # Block entry
02a4 c2a4       1             LoadGlobal [4]
02a5 c2a5       1             Literal(lit undefined)
02a6 c2a6       1             Literal(lit 1)
02a7 c2a7       1             Literal(lit 1)
02a8 c2a8       1             BinOp(op '+')
02a9 c2a9       1             UnOp(op '+')
02aa c2aa       1             Literal(lit 2)
02ab c2ab       2             Call(count 3)
02ad c2ad       1             Pop(count 1)
02ae c2ae       1             LoadGlobal [4]
02af c2af       1             Literal(lit undefined)
02b0 c2b0       3             Literal(&c098)
02b3 c2b3       1             Literal(lit 2)
02b4 c2b4       1             BinOp(op '+')
02b5 c2b5       1             UnOp(op '+')
02b6 c2b6       3             Literal(&c0a2)
02b9 c2b9       2             Call(count 3)
02bb c2bb       1             Pop(count 1)
02bc c2bc       1             Literal(lit undefined)
02bd c2bd       1             Return()
02be c2be       2     Header [Size: 187, Type: TC_REF_FUNCTION]
02c0 c2c0  187  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testAddition
02c0 c2c0       1         maxStackDepth: 4
02c1 c2c1  130  -         # Block entry
02c1 c2c1       1             LoadGlobal [4]
02c2 c2c2       1             Literal(lit undefined)
02c3 c2c3       3             Literal(3)
02c6 c2c6       1             Literal(lit 2)
02c7 c2c7       1             BinOp(op '+')
02c8 c2c8       3             Literal(5)
02cb c2cb       2             Call(count 3)
02cd c2cd       1             Pop(count 1)
02ce c2ce       1             LoadGlobal [4]
02cf c2cf       1             Literal(lit undefined)
02d0 c2d0       3             Literal(3000)
02d3 c2d3       3             Literal(2000)
02d6 c2d6       1             BinOp(op '+')
02d7 c2d7       3             Literal(5000)
02da c2da       2             Call(count 3)
02dc c2dc       1             Pop(count 1)
02dd c2dd       1             LoadGlobal [4]
02de c2de       1             Literal(lit undefined)
02df c2df       3             Literal(3000)
02e2 c2e2       3             Literal(3500)
02e5 c2e5       1             BinOp(op '+')
02e6 c2e6       3             Literal(6500)
02e9 c2e9       2             Call(count 3)
02eb c2eb       1             Pop(count 1)
02ec c2ec       1             LoadGlobal [4]
02ed c2ed       1             Literal(lit undefined)
02ee c2ee       3             Literal(6000)
02f1 c2f1       3             Literal(500)
02f4 c2f4       1             BinOp(op '+')
02f5 c2f5       3             Literal(6500)
02f8 c2f8       2             Call(count 3)
02fa c2fa       1             Pop(count 1)
02fb c2fb       1             LoadGlobal [4]
02fc c2fc       1             Literal(lit undefined)
02fd c2fd       3             Literal(500)
0300 c300       3             Literal(6500)
0303 c303       1             BinOp(op '+')
0304 c304       3             Literal(7000)
0307 c307       2             Call(count 3)
0309 c309       1             Pop(count 1)
030a c30a       1             LoadGlobal [4]
030b c30b       1             Literal(lit undefined)
030c c30c       3             Literal(&c0ac)
030f c30f       3             Literal(8000)
0312 c312       1             BinOp(op '+')
0313 c313       3             Literal(&c0b2)
0316 c316       2             Call(count 3)
0318 c318       1             Pop(count 1)
0319 c319       1             LoadGlobal [4]
031a c31a       1             Literal(lit undefined)
031b c31b       3             Literal(&c0b8)
031e c31e       3             Literal(&c0be)
0321 c321       1             BinOp(op '+')
0322 c322       3             Literal(&c0c4)
0325 c325       2             Call(count 3)
0327 c327       1             Pop(count 1)
0328 c328       1             LoadGlobal [4]
0329 c329       1             Literal(lit undefined)
032a c32a       3             Literal(7500)
032d c32d       3             Literal(7000)
0330 c330       1             BinOp(op '+')
0331 c331       3             Literal(&c0ca)
0334 c334       2             Call(count 3)
0336 c336       1             Pop(count 1)
0337 c337       1             LoadGlobal [4]
0338 c338       1             Literal(lit undefined)
0339 c339       3             Literal(&c0d0)
033c c33c       3             Literal(&c0d0)
033f c33f       1             BinOp(op '+')
0340 c340       1             LoadGlobal [5]
0341 c341       2             Branch &c376
0343 c343    3  -         # Block block2
0343 c343       3             Literal(&c0d6)
0346 c346       0             <implicit fallthrough>
0346 c346   48  -         # Block block3
0346 c346       2             Call(count 3)
0348 c348       1             Pop(count 1)
0349 c349       1             LoadGlobal [4]
034a c34a       1             Literal(lit undefined)
034b c34b       3             Literal(&c0dc)
034e c34e       1             Literal(lit 1)
034f c34f       1             BinOp(op '+')
0350 c350       3             Literal(&c0e6)
0353 c353       2             Call(count 3)
0355 c355       1             Pop(count 1)
0356 c356       1             LoadGlobal [4]
0357 c357       1             Literal(lit undefined)
0358 c358       3             Literal(-2)
035b c35b       3             Literal(&c0f0)
035e c35e       1             BinOp(op '+')
035f c35f       3             Literal(&c0dc)
0362 c362       2             Call(count 3)
0364 c364       1             Pop(count 1)
0365 c365       1             LoadGlobal [4]
0366 c366       1             Literal(lit undefined)
0367 c367       3             Literal(&c0fa)
036a c36a       3             Literal(&c104)
036d c36d       1             BinOp(op '+')
036e c36e       3             Literal(-1000)
0371 c371       2             Call(count 3)
0373 c373       1             Pop(count 1)
0374 c374       1             Literal(lit undefined)
0375 c375       1             Return()
0376 c376    5  -         # Block block1
0376 c376       3             Literal(&c10e)
0379 c379       2             Jump &c346
037b c37b       2     Header [Size: 138, Type: TC_REF_FUNCTION]
037d c37d  138  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testSubtraction
037d c37d       1         maxStackDepth: 4
037e c37e   83  -         # Block entry
037e c37e       1             LoadGlobal [4]
037f c37f       1             Literal(lit undefined)
0380 c380       3             Literal(3)
0383 c383       1             Literal(lit 2)
0384 c384       1             BinOp(op '-')
0385 c385       1             Literal(lit 1)
0386 c386       2             Call(count 3)
0388 c388       1             Pop(count 1)
0389 c389       1             LoadGlobal [4]
038a c38a       1             Literal(lit undefined)
038b c38b       3             Literal(3000)
038e c38e       3             Literal(2000)
0391 c391       1             BinOp(op '-')
0392 c392       3             Literal(1000)
0395 c395       2             Call(count 3)
0397 c397       1             Pop(count 1)
0398 c398       1             LoadGlobal [4]
0399 c399       1             Literal(lit undefined)
039a c39a       3             Literal(&c0ac)
039d c39d       3             Literal(8000)
03a0 c3a0       1             BinOp(op '-')
03a1 c3a1       3             Literal(2000)
03a4 c3a4       2             Call(count 3)
03a6 c3a6       1             Pop(count 1)
03a7 c3a7       1             LoadGlobal [4]
03a8 c3a8       1             Literal(lit undefined)
03a9 c3a9       3             Literal(&c0b8)
03ac c3ac       3             Literal(&c0be)
03af c3af       1             BinOp(op '-')
03b0 c3b0       3             Literal(&c0ac)
03b3 c3b3       2             Call(count 3)
03b5 c3b5       1             Pop(count 1)
03b6 c3b6       1             LoadGlobal [4]
03b7 c3b7       1             Literal(lit undefined)
03b8 c3b8       3             Literal(-7500)
03bb c3bb       3             Literal(7000)
03be c3be       1             BinOp(op '-')
03bf c3bf       3             Literal(&c118)
03c2 c3c2       2             Call(count 3)
03c4 c3c4       1             Pop(count 1)
03c5 c3c5       1             LoadGlobal [4]
03c6 c3c6       1             Literal(lit undefined)
03c7 c3c7       3             Literal(&c11e)
03ca c3ca       3             Literal(&c0d0)
03cd c3cd       1             BinOp(op '-')
03ce c3ce       1             LoadGlobal [5]
03cf c3cf       2             Branch &c402
03d1 c3d1    3  -         # Block block2
03d1 c3d1       3             Literal(&c124)
03d4 c3d4       0             <implicit fallthrough>
03d4 c3d4   46  -         # Block block3
03d4 c3d4       2             Call(count 3)
03d6 c3d6       1             Pop(count 1)
03d7 c3d7       1             LoadGlobal [4]
03d8 c3d8       1             Literal(lit undefined)
03d9 c3d9       3             Literal(&c12a)
03dc c3dc       1             Literal(lit 1)
03dd c3dd       1             BinOp(op '-')
03de c3de       3             Literal(&c0f0)
03e1 c3e1       2             Call(count 3)
03e3 c3e3       1             Pop(count 1)
03e4 c3e4       1             LoadGlobal [4]
03e5 c3e5       1             Literal(lit undefined)
03e6 c3e6       1             Literal(lit 2)
03e7 c3e7       3             Literal(&c0f0)
03ea c3ea       1             BinOp(op '-')
03eb c3eb       3             Literal(&c12a)
03ee c3ee       2             Call(count 3)
03f0 c3f0       1             Pop(count 1)
03f1 c3f1       1             LoadGlobal [4]
03f2 c3f2       1             Literal(lit undefined)
03f3 c3f3       3             Literal(&c134)
03f6 c3f6       3             Literal(&c104)
03f9 c3f9       1             BinOp(op '-')
03fa c3fa       3             Literal(1000)
03fd c3fd       2             Call(count 3)
03ff c3ff       1             Pop(count 1)
0400 c400       1             Literal(lit undefined)
0401 c401       1             Return()
0402 c402    5  -         # Block block1
0402 c402       3             Literal(&c13e)
0405 c405       2             Jump &c3d4
0407 c407       2     Header [Size: 127, Type: TC_REF_FUNCTION]
0409 c409  127  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testMultiplication
0409 c409       1         maxStackDepth: 4
040a c40a  100  -         # Block entry
040a c40a       1             LoadGlobal [4]
040b c40b       1             Literal(lit undefined)
040c c40c       3             Literal(5)
040f c40f       3             Literal(6)
0412 c412       1             BinOp(op '*')
0413 c413       3             Literal(30)
0416 c416       2             Call(count 3)
0418 c418       1             Pop(count 1)
0419 c419       1             LoadGlobal [4]
041a c41a       1             Literal(lit undefined)
041b c41b       3             Literal(&c148)
041e c41e       3             Literal(6)
0421 c421       1             BinOp(op '*')
0422 c422       3             Literal(33)
0425 c425       2             Call(count 3)
0427 c427       1             Pop(count 1)
0428 c428       1             LoadGlobal [4]
0429 c429       1             Literal(lit undefined)
042a c42a       3             Literal(-5)
042d c42d       3             Literal(-6)
0430 c430       1             BinOp(op '*')
0431 c431       3             Literal(30)
0434 c434       2             Call(count 3)
0436 c436       1             Pop(count 1)
0437 c437       1             LoadGlobal [4]
0438 c438       1             Literal(lit undefined)
0439 c439       3             Literal(5)
043c c43c       3             Literal(-6)
043f c43f       1             BinOp(op '*')
0440 c440       3             Literal(-30)
0443 c443       2             Call(count 3)
0445 c445       1             Pop(count 1)
0446 c446       1             LoadGlobal [4]
0447 c447       1             Literal(lit undefined)
0448 c448       3             Literal(5000)
044b c44b       3             Literal(5000)
044e c44e       1             BinOp(op '*')
044f c44f       3             Literal(&c152)
0452 c452       2             Call(count 3)
0454 c454       1             Pop(count 1)
0455 c455       1             LoadGlobal [4]
0456 c456       1             Literal(lit undefined)
0457 c457       3             Literal(&c158)
045a c45a       1             Literal(lit 2)
045b c45b       1             BinOp(op '*')
045c c45c       3             Literal(&c15e)
045f c45f       2             Call(count 3)
0461 c461       1             Pop(count 1)
0462 c462       1             LoadGlobal [4]
0463 c463       1             Literal(lit undefined)
0464 c464       3             Literal(&c164)
0467 c467       3             Literal(&c164)
046a c46a       1             BinOp(op '*')
046b c46b       1             LoadGlobal [5]
046c c46c       2             Branch &c483
046e c46e    3  -         # Block block2
046e c46e       3             Literal(&c16a)
0471 c471       0             <implicit fallthrough>
0471 c471   18  -         # Block block3
0471 c471       2             Call(count 3)
0473 c473       1             Pop(count 1)
0474 c474       1             LoadGlobal [4]
0475 c475       1             Literal(lit undefined)
0476 c476       3             Literal(&c170)
0479 c479       1             Literal(lit 1)
047a c47a       1             BinOp(op '*')
047b c47b       3             Literal(&c170)
047e c47e       2             Call(count 3)
0480 c480       1             Pop(count 1)
0481 c481       1             Literal(lit undefined)
0482 c482       1             Return()
0483 c483    5  -         # Block block1
0483 c483       3             Literal(&c170)
0486 c486       2             Jump &c471
0488 c488       2     Header [Size: 328, Type: TC_REF_FUNCTION]
048a c48a  328  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testDivision
048a c48a       1         maxStackDepth: 7
048b c48b   80  -         # Block entry
048b c48b       1             LoadGlobal [4]
048c c48c       1             Literal(lit undefined)
048d c48d       3             Literal(6)
0490 c490       3             Literal(3)
0493 c493       1             BinOp(op '/')
0494 c494       1             Literal(lit 2)
0495 c495       2             Call(count 3)
0497 c497       1             Pop(count 1)
0498 c498       1             LoadGlobal [4]
0499 c499       1             Literal(lit undefined)
049a c49a       3             Literal(7)
049d c49d       1             Literal(lit 2)
049e c49e       1             BinOp(op '/')
049f c49f       3             Literal(&c17a)
04a2 c4a2       2             Call(count 3)
04a4 c4a4       1             Pop(count 1)
04a5 c4a5       1             LoadGlobal [4]
04a6 c4a6       1             Literal(lit undefined)
04a7 c4a7       3             Literal(&c184)
04aa c4aa       3             Literal(&c18e)
04ad c4ad       1             BinOp(op '/')
04ae c4ae       3             Literal(&c198)
04b1 c4b1       2             Call(count 3)
04b3 c4b3       1             Pop(count 1)
04b4 c4b4       1             LoadGlobal [4]
04b5 c4b5       1             Literal(lit undefined)
04b6 c4b6       3             Literal(8)
04b9 c4b9       1             Literal(lit 0)
04ba c4ba       1             BinOp(op '/')
04bb c4bb       1             LoadGlobal [0]
04bc c4bc       2             Call(count 3)
04be c4be       1             Pop(count 1)
04bf c4bf       1             LoadGlobal [4]
04c0 c4c0       1             Literal(lit undefined)
04c1 c4c1       3             Literal(8)
04c4 c4c4       3             Literal(-0)
04c7 c4c7       1             BinOp(op '/')
04c8 c4c8       1             LoadGlobal [0]
04c9 c4c9       1             UnOp(op '-')
04ca c4ca       2             Call(count 3)
04cc c4cc       1             Pop(count 1)
04cd c4cd       1             LoadGlobal [4]
04ce c4ce       1             Literal(lit undefined)
04cf c4cf       3             Literal(8)
04d2 c4d2       1             Literal(lit 1)
04d3 c4d3       1             Literal(lit 1)
04d4 c4d4       1             BinOp(op '-')
04d5 c4d5       1             UnOp(op '-')
04d6 c4d6       1             BinOp(op '/')
04d7 c4d7       1             LoadGlobal [5]
04d8 c4d8       3             Branch &c5cd
04db c4db    1  -         # Block block2
04db c4db       1             LoadGlobal [0]
04dc c4dc       0             <implicit fallthrough>
04dc c4dc  241  -         # Block block3
04dc c4dc       2             Call(count 3)
04de c4de       1             Pop(count 1)
04df c4df       1             LoadGlobal [4]
04e0 c4e0       1             Literal(lit undefined)
04e1 c4e1       3             Literal(-8)
04e4 c4e4       1             Literal(lit 0)
04e5 c4e5       1             BinOp(op '/')
04e6 c4e6       1             LoadGlobal [0]
04e7 c4e7       1             UnOp(op '-')
04e8 c4e8       2             Call(count 3)
04ea c4ea       1             Pop(count 1)
04eb c4eb       1             LoadGlobal [4]
04ec c4ec       1             Literal(lit undefined)
04ed c4ed       3             Literal(-8)
04f0 c4f0       3             Literal(-0)
04f3 c4f3       1             BinOp(op '/')
04f4 c4f4       1             LoadGlobal [0]
04f5 c4f5       2             Call(count 3)
04f7 c4f7       1             Pop(count 1)
04f8 c4f8       1             LoadGlobal [3]
04f9 c4f9       1             Literal(lit undefined)
04fa c4fa       1             LoadGlobal [2]
04fb c4fb       1             LoadVar(index 2)
04fc c4fc       3             Literal(&c076)
04ff c4ff       1             ObjectGet()
0500 c500       1             LoadVar(index 2)
0501 c501       1             LoadGlobal [0]
0502 c502       1             LoadGlobal [0]
0503 c503       1             BinOp(op '/')
0504 c504       2             Call(count 2)
0506 c506       1             StoreVar(index 2)
0507 c507       2             Call(count 2)
0509 c509       1             Pop(count 1)
050a c50a       1             LoadGlobal [4]
050b c50b       1             Literal(lit undefined)
050c c50c       3             Literal(6)
050f c50f       3             Literal(3)
0512 c512       1             BinOp(op 'DIVIDE_AND_TRUNC')
0513 c513       1             Literal(lit 2)
0514 c514       2             Call(count 3)
0516 c516       1             Pop(count 1)
0517 c517       1             LoadGlobal [4]
0518 c518       1             Literal(lit undefined)
0519 c519       3             Literal(7)
051c c51c       1             Literal(lit 2)
051d c51d       1             BinOp(op 'DIVIDE_AND_TRUNC')
051e c51e       3             Literal(3)
0521 c521       2             Call(count 3)
0523 c523       1             Pop(count 1)
0524 c524       1             LoadGlobal [4]
0525 c525       1             Literal(lit undefined)
0526 c526       3             Literal(&c184)
0529 c529       3             Literal(&c18e)
052c c52c       1             BinOp(op 'DIVIDE_AND_TRUNC')
052d c52d       3             Literal(3)
0530 c530       2             Call(count 3)
0532 c532       1             Pop(count 1)
0533 c533       1             LoadGlobal [4]
0534 c534       1             Literal(lit undefined)
0535 c535       3             Literal(-6)
0538 c538       3             Literal(-3)
053b c53b       1             BinOp(op 'DIVIDE_AND_TRUNC')
053c c53c       1             Literal(lit 2)
053d c53d       2             Call(count 3)
053f c53f       1             Pop(count 1)
0540 c540       1             LoadGlobal [4]
0541 c541       1             Literal(lit undefined)
0542 c542       3             Literal(-7)
0545 c545       3             Literal(-2)
0548 c548       1             BinOp(op 'DIVIDE_AND_TRUNC')
0549 c549       3             Literal(3)
054c c54c       2             Call(count 3)
054e c54e       1             Pop(count 1)
054f c54f       1             LoadGlobal [4]
0550 c550       1             Literal(lit undefined)
0551 c551       3             Literal(&c1a2)
0554 c554       3             Literal(&c1ac)
0557 c557       1             BinOp(op 'DIVIDE_AND_TRUNC')
0558 c558       3             Literal(3)
055b c55b       2             Call(count 3)
055d c55d       1             Pop(count 1)
055e c55e       1             LoadGlobal [4]
055f c55f       1             Literal(lit undefined)
0560 c560       3             Literal(-6)
0563 c563       3             Literal(3)
0566 c566       1             BinOp(op 'DIVIDE_AND_TRUNC')
0567 c567       3             Literal(-2)
056a c56a       2             Call(count 3)
056c c56c       1             Pop(count 1)
056d c56d       1             LoadGlobal [4]
056e c56e       1             Literal(lit undefined)
056f c56f       3             Literal(-7)
0572 c572       1             Literal(lit 2)
0573 c573       1             BinOp(op 'DIVIDE_AND_TRUNC')
0574 c574       3             Literal(-3)
0577 c577       2             Call(count 3)
0579 c579       1             Pop(count 1)
057a c57a       1             LoadGlobal [4]
057b c57b       1             Literal(lit undefined)
057c c57c       3             Literal(&c1a2)
057f c57f       3             Literal(&c18e)
0582 c582       1             BinOp(op 'DIVIDE_AND_TRUNC')
0583 c583       3             Literal(-3)
0586 c586       2             Call(count 3)
0588 c588       1             Pop(count 1)
0589 c589       1             LoadGlobal [4]
058a c58a       1             Literal(lit undefined)
058b c58b       3             Literal(8)
058e c58e       1             Literal(lit 0)
058f c58f       1             BinOp(op 'DIVIDE_AND_TRUNC')
0590 c590       1             Literal(lit 0)
0591 c591       2             Call(count 3)
0593 c593       1             Pop(count 1)
0594 c594       1             LoadGlobal [4]
0595 c595       1             Literal(lit undefined)
0596 c596       3             Literal(8)
0599 c599       3             Literal(-0)
059c c59c       1             BinOp(op 'DIVIDE_AND_TRUNC')
059d c59d       1             Literal(lit 0)
059e c59e       2             Call(count 3)
05a0 c5a0       1             Pop(count 1)
05a1 c5a1       1             LoadGlobal [4]
05a2 c5a2       1             Literal(lit undefined)
05a3 c5a3       3             Literal(-8)
05a6 c5a6       1             Literal(lit 0)
05a7 c5a7       1             BinOp(op 'DIVIDE_AND_TRUNC')
05a8 c5a8       1             Literal(lit 0)
05a9 c5a9       2             Call(count 3)
05ab c5ab       1             Pop(count 1)
05ac c5ac       1             LoadGlobal [4]
05ad c5ad       1             Literal(lit undefined)
05ae c5ae       3             Literal(-8)
05b1 c5b1       3             Literal(-0)
05b4 c5b4       1             BinOp(op 'DIVIDE_AND_TRUNC')
05b5 c5b5       1             Literal(lit 0)
05b6 c5b6       2             Call(count 3)
05b8 c5b8       1             Pop(count 1)
05b9 c5b9       1             LoadGlobal [4]
05ba c5ba       1             Literal(lit undefined)
05bb c5bb       1             LoadGlobal [1]
05bc c5bc       1             LoadGlobal [1]
05bd c5bd       1             BinOp(op 'DIVIDE_AND_TRUNC')
05be c5be       1             Literal(lit 0)
05bf c5bf       2             Call(count 3)
05c1 c5c1       1             Pop(count 1)
05c2 c5c2       1             LoadGlobal [4]
05c3 c5c3       1             Literal(lit undefined)
05c4 c5c4       1             LoadGlobal [0]
05c5 c5c5       1             LoadGlobal [0]
05c6 c5c6       1             BinOp(op 'DIVIDE_AND_TRUNC')
05c7 c5c7       1             Literal(lit 0)
05c8 c5c8       2             Call(count 3)
05ca c5ca       1             Pop(count 1)
05cb c5cb       1             Literal(lit undefined)
05cc c5cc       1             Return()
05cd c5cd    5  -         # Block block1
05cd c5cd       1             LoadGlobal [0]
05ce c5ce       1             UnOp(op '-')
05cf c5cf       3             Jump &c4dc
05d2 c5d2       2     Header [Size: 205, Type: TC_REF_FUNCTION]
05d4 c5d4  205  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testLessThan
05d4 c5d4       1         maxStackDepth: 4
05d5 c5d5  204  -         # Block entry
05d5 c5d5       1             LoadGlobal [4]
05d6 c5d6       1             Literal(lit undefined)
05d7 c5d7       1             Literal(lit 1)
05d8 c5d8       1             Literal(lit 2)
05d9 c5d9       1             BinOp(op '<')
05da c5da       1             Literal(lit true)
05db c5db       2             Call(count 3)
05dd c5dd       1             Pop(count 1)
05de c5de       1             LoadGlobal [4]
05df c5df       1             Literal(lit undefined)
05e0 c5e0       1             Literal(lit 2)
05e1 c5e1       1             Literal(lit 1)
05e2 c5e2       1             BinOp(op '<')
05e3 c5e3       1             Literal(lit false)
05e4 c5e4       2             Call(count 3)
05e6 c5e6       1             Pop(count 1)
05e7 c5e7       1             LoadGlobal [4]
05e8 c5e8       1             Literal(lit undefined)
05e9 c5e9       1             Literal(lit 2)
05ea c5ea       1             Literal(lit 2)
05eb c5eb       1             BinOp(op '<')
05ec c5ec       1             Literal(lit false)
05ed c5ed       2             Call(count 3)
05ef c5ef       1             Pop(count 1)
05f0 c5f0       1             LoadGlobal [4]
05f1 c5f1       1             Literal(lit undefined)
05f2 c5f2       1             Literal(lit -1)
05f3 c5f3       3             Literal(-2)
05f6 c5f6       1             BinOp(op '<')
05f7 c5f7       1             Literal(lit false)
05f8 c5f8       2             Call(count 3)
05fa c5fa       1             Pop(count 1)
05fb c5fb       1             LoadGlobal [4]
05fc c5fc       1             Literal(lit undefined)
05fd c5fd       3             Literal(-2)
0600 c600       1             Literal(lit -1)
0601 c601       1             BinOp(op '<')
0602 c602       1             Literal(lit true)
0603 c603       2             Call(count 3)
0605 c605       1             Pop(count 1)
0606 c606       1             LoadGlobal [4]
0607 c607       1             Literal(lit undefined)
0608 c608       3             Literal(-2)
060b c60b       3             Literal(-2)
060e c60e       1             BinOp(op '<')
060f c60f       1             Literal(lit false)
0610 c610       2             Call(count 3)
0612 c612       1             Pop(count 1)
0613 c613       1             LoadGlobal [4]
0614 c614       1             Literal(lit undefined)
0615 c615       3             Literal(&c098)
0618 c618       3             Literal(&c1b6)
061b c61b       1             BinOp(op '<')
061c c61c       1             Literal(lit true)
061d c61d       2             Call(count 3)
061f c61f       1             Pop(count 1)
0620 c620       1             LoadGlobal [4]
0621 c621       1             Literal(lit undefined)
0622 c622       3             Literal(&c1b6)
0625 c625       3             Literal(&c098)
0628 c628       1             BinOp(op '<')
0629 c629       1             Literal(lit false)
062a c62a       2             Call(count 3)
062c c62c       1             Pop(count 1)
062d c62d       1             LoadGlobal [4]
062e c62e       1             Literal(lit undefined)
062f c62f       3             Literal(&c1b6)
0632 c632       3             Literal(&c1b6)
0635 c635       1             BinOp(op '<')
0636 c636       1             Literal(lit false)
0637 c637       2             Call(count 3)
0639 c639       1             Pop(count 1)
063a c63a       1             LoadGlobal [4]
063b c63b       1             Literal(lit undefined)
063c c63c       1             Literal(lit 1)
063d c63d       1             Literal(lit 2)
063e c63e       1             BinOp(op '<=')
063f c63f       1             Literal(lit true)
0640 c640       2             Call(count 3)
0642 c642       1             Pop(count 1)
0643 c643       1             LoadGlobal [4]
0644 c644       1             Literal(lit undefined)
0645 c645       1             Literal(lit 2)
0646 c646       1             Literal(lit 1)
0647 c647       1             BinOp(op '<=')
0648 c648       1             Literal(lit false)
0649 c649       2             Call(count 3)
064b c64b       1             Pop(count 1)
064c c64c       1             LoadGlobal [4]
064d c64d       1             Literal(lit undefined)
064e c64e       1             Literal(lit 2)
064f c64f       1             Literal(lit 2)
0650 c650       1             BinOp(op '<=')
0651 c651       1             Literal(lit true)
0652 c652       2             Call(count 3)
0654 c654       1             Pop(count 1)
0655 c655       1             LoadGlobal [4]
0656 c656       1             Literal(lit undefined)
0657 c657       1             Literal(lit -1)
0658 c658       3             Literal(-2)
065b c65b       1             BinOp(op '<=')
065c c65c       1             Literal(lit false)
065d c65d       2             Call(count 3)
065f c65f       1             Pop(count 1)
0660 c660       1             LoadGlobal [4]
0661 c661       1             Literal(lit undefined)
0662 c662       3             Literal(-2)
0665 c665       1             Literal(lit -1)
0666 c666       1             BinOp(op '<=')
0667 c667       1             Literal(lit true)
0668 c668       2             Call(count 3)
066a c66a       1             Pop(count 1)
066b c66b       1             LoadGlobal [4]
066c c66c       1             Literal(lit undefined)
066d c66d       3             Literal(-2)
0670 c670       3             Literal(-2)
0673 c673       1             BinOp(op '<=')
0674 c674       1             Literal(lit true)
0675 c675       2             Call(count 3)
0677 c677       1             Pop(count 1)
0678 c678       1             LoadGlobal [4]
0679 c679       1             Literal(lit undefined)
067a c67a       3             Literal(&c098)
067d c67d       3             Literal(&c1b6)
0680 c680       1             BinOp(op '<=')
0681 c681       1             Literal(lit true)
0682 c682       2             Call(count 3)
0684 c684       1             Pop(count 1)
0685 c685       1             LoadGlobal [4]
0686 c686       1             Literal(lit undefined)
0687 c687       3             Literal(&c1b6)
068a c68a       3             Literal(&c098)
068d c68d       1             BinOp(op '<=')
068e c68e       1             Literal(lit false)
068f c68f       2             Call(count 3)
0691 c691       1             Pop(count 1)
0692 c692       1             LoadGlobal [4]
0693 c693       1             Literal(lit undefined)
0694 c694       3             Literal(&c1b6)
0697 c697       3             Literal(&c1b6)
069a c69a       1             BinOp(op '<=')
069b c69b       1             Literal(lit true)
069c c69c       2             Call(count 3)
069e c69e       1             Pop(count 1)
069f c69f       1             Literal(lit undefined)
06a0 c6a0       1             Return()
06a1 c6a1       2     Header [Size: 205, Type: TC_REF_FUNCTION]
06a3 c6a3  205  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testGreaterThan
06a3 c6a3       1         maxStackDepth: 4
06a4 c6a4  204  -         # Block entry
06a4 c6a4       1             LoadGlobal [4]
06a5 c6a5       1             Literal(lit undefined)
06a6 c6a6       1             Literal(lit 1)
06a7 c6a7       1             Literal(lit 2)
06a8 c6a8       1             BinOp(op '>')
06a9 c6a9       1             Literal(lit false)
06aa c6aa       2             Call(count 3)
06ac c6ac       1             Pop(count 1)
06ad c6ad       1             LoadGlobal [4]
06ae c6ae       1             Literal(lit undefined)
06af c6af       1             Literal(lit 2)
06b0 c6b0       1             Literal(lit 1)
06b1 c6b1       1             BinOp(op '>')
06b2 c6b2       1             Literal(lit true)
06b3 c6b3       2             Call(count 3)
06b5 c6b5       1             Pop(count 1)
06b6 c6b6       1             LoadGlobal [4]
06b7 c6b7       1             Literal(lit undefined)
06b8 c6b8       1             Literal(lit 2)
06b9 c6b9       1             Literal(lit 2)
06ba c6ba       1             BinOp(op '>')
06bb c6bb       1             Literal(lit false)
06bc c6bc       2             Call(count 3)
06be c6be       1             Pop(count 1)
06bf c6bf       1             LoadGlobal [4]
06c0 c6c0       1             Literal(lit undefined)
06c1 c6c1       1             Literal(lit -1)
06c2 c6c2       3             Literal(-2)
06c5 c6c5       1             BinOp(op '>')
06c6 c6c6       1             Literal(lit true)
06c7 c6c7       2             Call(count 3)
06c9 c6c9       1             Pop(count 1)
06ca c6ca       1             LoadGlobal [4]
06cb c6cb       1             Literal(lit undefined)
06cc c6cc       3             Literal(-2)
06cf c6cf       1             Literal(lit -1)
06d0 c6d0       1             BinOp(op '>')
06d1 c6d1       1             Literal(lit false)
06d2 c6d2       2             Call(count 3)
06d4 c6d4       1             Pop(count 1)
06d5 c6d5       1             LoadGlobal [4]
06d6 c6d6       1             Literal(lit undefined)
06d7 c6d7       3             Literal(-2)
06da c6da       3             Literal(-2)
06dd c6dd       1             BinOp(op '>')
06de c6de       1             Literal(lit false)
06df c6df       2             Call(count 3)
06e1 c6e1       1             Pop(count 1)
06e2 c6e2       1             LoadGlobal [4]
06e3 c6e3       1             Literal(lit undefined)
06e4 c6e4       3             Literal(&c098)
06e7 c6e7       3             Literal(&c1b6)
06ea c6ea       1             BinOp(op '>')
06eb c6eb       1             Literal(lit false)
06ec c6ec       2             Call(count 3)
06ee c6ee       1             Pop(count 1)
06ef c6ef       1             LoadGlobal [4]
06f0 c6f0       1             Literal(lit undefined)
06f1 c6f1       3             Literal(&c1b6)
06f4 c6f4       3             Literal(&c098)
06f7 c6f7       1             BinOp(op '>')
06f8 c6f8       1             Literal(lit true)
06f9 c6f9       2             Call(count 3)
06fb c6fb       1             Pop(count 1)
06fc c6fc       1             LoadGlobal [4]
06fd c6fd       1             Literal(lit undefined)
06fe c6fe       3             Literal(&c1b6)
0701 c701       3             Literal(&c1b6)
0704 c704       1             BinOp(op '>')
0705 c705       1             Literal(lit false)
0706 c706       2             Call(count 3)
0708 c708       1             Pop(count 1)
0709 c709       1             LoadGlobal [4]
070a c70a       1             Literal(lit undefined)
070b c70b       1             Literal(lit 1)
070c c70c       1             Literal(lit 2)
070d c70d       1             BinOp(op '>=')
070e c70e       1             Literal(lit false)
070f c70f       2             Call(count 3)
0711 c711       1             Pop(count 1)
0712 c712       1             LoadGlobal [4]
0713 c713       1             Literal(lit undefined)
0714 c714       1             Literal(lit 2)
0715 c715       1             Literal(lit 1)
0716 c716       1             BinOp(op '>=')
0717 c717       1             Literal(lit true)
0718 c718       2             Call(count 3)
071a c71a       1             Pop(count 1)
071b c71b       1             LoadGlobal [4]
071c c71c       1             Literal(lit undefined)
071d c71d       1             Literal(lit 2)
071e c71e       1             Literal(lit 2)
071f c71f       1             BinOp(op '>=')
0720 c720       1             Literal(lit true)
0721 c721       2             Call(count 3)
0723 c723       1             Pop(count 1)
0724 c724       1             LoadGlobal [4]
0725 c725       1             Literal(lit undefined)
0726 c726       1             Literal(lit -1)
0727 c727       3             Literal(-2)
072a c72a       1             BinOp(op '>=')
072b c72b       1             Literal(lit true)
072c c72c       2             Call(count 3)
072e c72e       1             Pop(count 1)
072f c72f       1             LoadGlobal [4]
0730 c730       1             Literal(lit undefined)
0731 c731       3             Literal(-2)
0734 c734       1             Literal(lit -1)
0735 c735       1             BinOp(op '>=')
0736 c736       1             Literal(lit false)
0737 c737       2             Call(count 3)
0739 c739       1             Pop(count 1)
073a c73a       1             LoadGlobal [4]
073b c73b       1             Literal(lit undefined)
073c c73c       3             Literal(-2)
073f c73f       3             Literal(-2)
0742 c742       1             BinOp(op '>=')
0743 c743       1             Literal(lit true)
0744 c744       2             Call(count 3)
0746 c746       1             Pop(count 1)
0747 c747       1             LoadGlobal [4]
0748 c748       1             Literal(lit undefined)
0749 c749       3             Literal(&c098)
074c c74c       3             Literal(&c1b6)
074f c74f       1             BinOp(op '>=')
0750 c750       1             Literal(lit false)
0751 c751       2             Call(count 3)
0753 c753       1             Pop(count 1)
0754 c754       1             LoadGlobal [4]
0755 c755       1             Literal(lit undefined)
0756 c756       3             Literal(&c1b6)
0759 c759       3             Literal(&c098)
075c c75c       1             BinOp(op '>=')
075d c75d       1             Literal(lit true)
075e c75e       2             Call(count 3)
0760 c760       1             Pop(count 1)
0761 c761       1             LoadGlobal [4]
0762 c762       1             Literal(lit undefined)
0763 c763       3             Literal(&c1b6)
0766 c766       3             Literal(&c1b6)
0769 c769       1             BinOp(op '>=')
076a c76a       1             Literal(lit true)
076b c76b       2             Call(count 3)
076d c76d       1             Pop(count 1)
076e c76e       1             Literal(lit undefined)
076f c76f       1             Return()
0770 c770       2     Header [Size: 207, Type: TC_REF_FUNCTION]
0772 c772  207  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testRemainder
0772 c772       1         maxStackDepth: 7
0773 c773  206  -         # Block entry
0773 c773       1             LoadGlobal [4]
0774 c774       1             Literal(lit undefined)
0775 c775       1             Literal(lit 2)
0776 c776       1             Literal(lit 1)
0777 c777       1             BinOp(op '%')
0778 c778       1             Literal(lit 0)
0779 c779       2             Call(count 3)
077b c77b       1             Pop(count 1)
077c c77c       1             LoadGlobal [4]
077d c77d       1             Literal(lit undefined)
077e c77e       3             Literal(5)
0781 c781       1             Literal(lit 2)
0782 c782       1             BinOp(op '%')
0783 c783       1             Literal(lit 1)
0784 c784       2             Call(count 3)
0786 c786       1             Pop(count 1)
0787 c787       1             LoadGlobal [4]
0788 c788       1             Literal(lit undefined)
0789 c789       3             Literal(550)
078c c78c       3             Literal(100)
078f c78f       1             BinOp(op '%')
0790 c790       3             Literal(50)
0793 c793       2             Call(count 3)
0795 c795       1             Pop(count 1)
0796 c796       1             LoadGlobal [4]
0797 c797       1             Literal(lit undefined)
0798 c798       3             Literal(-8)
079b c79b       3             Literal(3)
079e c79e       1             BinOp(op '%')
079f c79f       3             Literal(-2)
07a2 c7a2       2             Call(count 3)
07a4 c7a4       1             Pop(count 1)
07a5 c7a5       1             LoadGlobal [4]
07a6 c7a6       1             Literal(lit undefined)
07a7 c7a7       3             Literal(8)
07aa c7aa       3             Literal(-3)
07ad c7ad       1             BinOp(op '%')
07ae c7ae       1             Literal(lit 2)
07af c7af       2             Call(count 3)
07b1 c7b1       1             Pop(count 1)
07b2 c7b2       1             LoadGlobal [4]
07b3 c7b3       1             Literal(lit undefined)
07b4 c7b4       3             Literal(-8)
07b7 c7b7       3             Literal(-3)
07ba c7ba       1             BinOp(op '%')
07bb c7bb       3             Literal(-2)
07be c7be       2             Call(count 3)
07c0 c7c0       1             Pop(count 1)
07c1 c7c1       1             LoadGlobal [4]
07c2 c7c2       1             Literal(lit undefined)
07c3 c7c3       3             Literal(&c1c0)
07c6 c7c6       1             Literal(lit 1)
07c7 c7c7       1             BinOp(op '%')
07c8 c7c8       3             Literal(&c1ca)
07cb c7cb       2             Call(count 3)
07cd c7cd       1             Pop(count 1)
07ce c7ce       1             LoadGlobal [4]
07cf c7cf       1             Literal(lit undefined)
07d0 c7d0       3             Literal(&c1d4)
07d3 c7d3       1             Literal(lit 2)
07d4 c7d4       1             BinOp(op '%')
07d5 c7d5       3             Literal(&c1de)
07d8 c7d8       2             Call(count 3)
07da c7da       1             Pop(count 1)
07db c7db       1             LoadGlobal [4]
07dc c7dc       1             Literal(lit undefined)
07dd c7dd       3             Literal(&c1e8)
07e0 c7e0       3             Literal(100)
07e3 c7e3       1             BinOp(op '%')
07e4 c7e4       3             Literal(&c1f2)
07e7 c7e7       2             Call(count 3)
07e9 c7e9       1             Pop(count 1)
07ea c7ea       1             LoadGlobal [4]
07eb c7eb       1             Literal(lit undefined)
07ec c7ec       3             Literal(&c1fc)
07ef c7ef       3             Literal(4)
07f2 c7f2       1             BinOp(op '%')
07f3 c7f3       3             Literal(&c206)
07f6 c7f6       2             Call(count 3)
07f8 c7f8       1             Pop(count 1)
07f9 c7f9       1             LoadGlobal [4]
07fa c7fa       1             Literal(lit undefined)
07fb c7fb       3             Literal(&c210)
07fe c7fe       3             Literal(-4)
0801 c801       1             BinOp(op '%')
0802 c802       3             Literal(&c21a)
0805 c805       2             Call(count 3)
0807 c807       1             Pop(count 1)
0808 c808       1             LoadGlobal [4]
0809 c809       1             Literal(lit undefined)
080a c80a       3             Literal(&c1fc)
080d c80d       3             Literal(-4)
0810 c810       1             BinOp(op '%')
0811 c811       3             Literal(&c206)
0814 c814       2             Call(count 3)
0816 c816       1             Pop(count 1)
0817 c817       1             LoadGlobal [3]
0818 c818       1             Literal(lit undefined)
0819 c819       1             LoadGlobal [2]
081a c81a       1             LoadVar(index 2)
081b c81b       3             Literal(&c076)
081e c81e       1             ObjectGet()
081f c81f       1             LoadVar(index 2)
0820 c820       3             Literal(5)
0823 c823       1             Literal(lit 0)
0824 c824       1             BinOp(op '%')
0825 c825       2             Call(count 2)
0827 c827       1             StoreVar(index 2)
0828 c828       2             Call(count 2)
082a c82a       1             Pop(count 1)
082b c82b       1             LoadGlobal [3]
082c c82c       1             Literal(lit undefined)
082d c82d       1             LoadGlobal [2]
082e c82e       1             LoadVar(index 2)
082f c82f       3             Literal(&c076)
0832 c832       1             ObjectGet()
0833 c833       1             LoadVar(index 2)
0834 c834       3             Literal(&c224)
0837 c837       1             Literal(lit 0)
0838 c838       1             BinOp(op '%')
0839 c839       2             Call(count 2)
083b c83b       1             StoreVar(index 2)
083c c83c       2             Call(count 2)
083e c83e       1             Pop(count 1)
083f c83f       1             Literal(lit undefined)
0840 c840       1             Return()
0841 c841       2     Header [Size: 56, Type: TC_REF_FUNCTION]
0843 c843   56  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testPower
0843 c843       1         maxStackDepth: 7
0844 c844   55  -         # Block entry
0844 c844       1             LoadGlobal [4]
0845 c845       1             Literal(lit undefined)
0846 c846       1             Literal(lit 2)
0847 c847       3             Literal(3)
084a c84a       1             BinOp(op '**')
084b c84b       3             Literal(8)
084e c84e       2             Call(count 3)
0850 c850       1             Pop(count 1)
0851 c851       1             LoadGlobal [4]
0852 c852       1             Literal(lit undefined)
0853 c853       1             Literal(lit 2)
0854 c854       1             Literal(lit 0)
0855 c855       1             BinOp(op '**')
0856 c856       1             Literal(lit 1)
0857 c857       2             Call(count 3)
0859 c859       1             Pop(count 1)
085a c85a       1             LoadGlobal [4]
085b c85b       1             Literal(lit undefined)
085c c85c       3             Literal(&c18e)
085f c85f       1             Literal(lit 1)
0860 c860       1             BinOp(op '**')
0861 c861       3             Literal(&c18e)
0864 c864       2             Call(count 3)
0866 c866       1             Pop(count 1)
0867 c867       1             LoadGlobal [3]
0868 c868       1             Literal(lit undefined)
0869 c869       1             LoadGlobal [2]
086a c86a       1             LoadVar(index 2)
086b c86b       3             Literal(&c076)
086e c86e       1             ObjectGet()
086f c86f       1             LoadVar(index 2)
0870 c870       1             Literal(lit 1)
0871 c871       1             LoadGlobal [0]
0872 c872       1             BinOp(op '**')
0873 c873       2             Call(count 2)
0875 c875       1             StoreVar(index 2)
0876 c876       2             Call(count 2)
0878 c878       1             Pop(count 1)
0879 c879       1             Literal(lit undefined)
087a c87a       1             Return()
087b c87b       2     Header [Size: 118, Type: TC_REF_FUNCTION]
087d c87d  118  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testIncrDecr
087d c87d       1         maxStackDepth: 6
087e c87e  117  -         # Block entry
087e c87e       1             Literal(lit 1)
087f c87f       1             LoadGlobal [4]
0880 c880       1             Literal(lit undefined)
0881 c881       1             LoadVar(index 0)
0882 c882       1             LoadVar(index 3)
0883 c883       1             Literal(lit 1)
0884 c884       1             BinOp(op '+')
0885 c885       1             LoadVar(index 4)
0886 c886       1             StoreVar(index 0)
0887 c887       1             Pop(count 1)
0888 c888       1             Literal(lit 1)
0889 c889       2             Call(count 3)
088b c88b       1             Pop(count 1)
088c c88c       1             LoadGlobal [4]
088d c88d       1             Literal(lit undefined)
088e c88e       1             LoadVar(index 0)
088f c88f       1             Literal(lit 2)
0890 c890       2             Call(count 3)
0892 c892       1             Pop(count 1)
0893 c893       1             LoadGlobal [4]
0894 c894       1             Literal(lit undefined)
0895 c895       1             LoadVar(index 0)
0896 c896       1             Literal(lit 1)
0897 c897       1             BinOp(op '+')
0898 c898       1             LoadVar(index 3)
0899 c899       1             StoreVar(index 0)
089a c89a       3             Literal(3)
089d c89d       2             Call(count 3)
089f c89f       1             Pop(count 1)
08a0 c8a0       1             LoadGlobal [4]
08a1 c8a1       1             Literal(lit undefined)
08a2 c8a2       1             LoadVar(index 0)
08a3 c8a3       3             Literal(3)
08a6 c8a6       2             Call(count 3)
08a8 c8a8       1             Pop(count 1)
08a9 c8a9       1             LoadGlobal [4]
08aa c8aa       1             Literal(lit undefined)
08ab c8ab       1             LoadVar(index 0)
08ac c8ac       1             LoadVar(index 3)
08ad c8ad       1             Literal(lit 1)
08ae c8ae       1             BinOp(op '-')
08af c8af       1             LoadVar(index 4)
08b0 c8b0       1             StoreVar(index 0)
08b1 c8b1       1             Pop(count 1)
08b2 c8b2       3             Literal(3)
08b5 c8b5       2             Call(count 3)
08b7 c8b7       1             Pop(count 1)
08b8 c8b8       1             LoadGlobal [4]
08b9 c8b9       1             Literal(lit undefined)
08ba c8ba       1             LoadVar(index 0)
08bb c8bb       1             Literal(lit 2)
08bc c8bc       2             Call(count 3)
08be c8be       1             Pop(count 1)
08bf c8bf       1             LoadGlobal [4]
08c0 c8c0       1             Literal(lit undefined)
08c1 c8c1       1             LoadVar(index 0)
08c2 c8c2       1             Literal(lit 1)
08c3 c8c3       1             BinOp(op '-')
08c4 c8c4       1             LoadVar(index 3)
08c5 c8c5       1             StoreVar(index 0)
08c6 c8c6       1             Literal(lit 1)
08c7 c8c7       2             Call(count 3)
08c9 c8c9       1             Pop(count 1)
08ca c8ca       1             LoadGlobal [4]
08cb c8cb       1             Literal(lit undefined)
08cc c8cc       1             LoadVar(index 0)
08cd c8cd       1             Literal(lit 1)
08ce c8ce       2             Call(count 3)
08d0 c8d0       1             Pop(count 1)
08d1 c8d1       3             Literal(&c12a)
08d4 c8d4       1             LoadVar(index 1)
08d5 c8d5       1             StoreVar(index 0)
08d6 c8d6       1             Pop(count 1)
08d7 c8d7       1             LoadGlobal [4]
08d8 c8d8       1             Literal(lit undefined)
08d9 c8d9       1             LoadVar(index 0)
08da c8da       1             Literal(lit 1)
08db c8db       1             BinOp(op '+')
08dc c8dc       1             LoadVar(index 3)
08dd c8dd       1             StoreVar(index 0)
08de c8de       3             Literal(&c18e)
08e1 c8e1       2             Call(count 3)
08e3 c8e3       1             Pop(count 1)
08e4 c8e4       1             LoadGlobal [4]
08e5 c8e5       1             Literal(lit undefined)
08e6 c8e6       1             LoadVar(index 0)
08e7 c8e7       1             Literal(lit 1)
08e8 c8e8       1             BinOp(op '-')
08e9 c8e9       1             LoadVar(index 3)
08ea c8ea       1             StoreVar(index 0)
08eb c8eb       3             Literal(&c12a)
08ee c8ee       2             Call(count 3)
08f0 c8f0       1             Pop(count 1)
08f1 c8f1       1             Literal(lit undefined)
08f2 c8f2       1             Return()
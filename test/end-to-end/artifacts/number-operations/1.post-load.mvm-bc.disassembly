Bytecode size: 2163 B

Ofst Addr    Size
==== ==== =======
0000        44  - # Header
0000            1     bytecodeVersion: 1
0001            1     headerSize: 44
0002            2     bytecodeSize: 2163
0004            2     expectedCRC: c7ed
0006            2     requiredEngineVersion: 0
0008            4     requiredFeatureFlags: 1
000c            2     globalVariableCount: 16
000e            2     initialDataOffset: 002c
0010            2     initialDataSize: 32
0012            2     initialHeapOffset: 004c
0014            2     initialHeapSize: 10
0016            2     gcRootsOffset: 0056
0018            2     gcRootsCount: 0
001a            2     importTableOffset: 0056
001c            2     importTableSize: 4
001e            2     exportTableOffset: 005a
0020            2     exportTableSize: 4
0022            2     shortCallTableOffset: 005e
0024            2     shortCallTableSize: 0
0026            2     stringTableOffset: 005e
0028            2     stringTableSize: 2
002a            2     <reserved>
002c 8000   32  - # Globals
002c 8000       2     [0]: &c062
002e 8002       2     [1]: NaN
0030 8004       2     [2]: &4002
0032 8006       2     [3]: &c06c
0034 8008       2     [4]: &c070
0036 800a       2     [5]: false
0038 800c       2     [6]: &c26b
003a 800e       2     [7]: &c29b
003c 8010       2     [8]: &c2b8
003e 8012       2     [9]: &c375
0040 8014       2     [10]: &c401
0042 8016       2     [11]: &c482
0044 8018       2     [12]: &c5cc
0046 801a       2     [13]: &c69b
0048 801c       2     [14]: &c76a
004a 801e       2     [15]: &c83b
004c 4000   10  - # GC allocations
004c 4000       2     Header [Size: 2, Type: TC_REF_PROPERTY_LIST]
004e 4002    2  -     # Object as TsPropertyList
004e 4002       2         first: &4004
0050 4004    6  -     # TsPropertyCell
0050 4004       2         next: &0000
0052 4006       2         key: &c074
0054 4008       2         value: &c22c
0056 c056    4  - # Import Table
0056 c056       2     [0]: 2
0058 c058       2     [1]: 3
005a c05a    4  - # Export Table
005a c05a       4     [0]: &c234
005e c05e    2  - # String Table
005e c05e       2     [0]: &c074
0060 c060 2069  - # ROM allocations
0060 c060       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0062 c062       8     Value: Infinity
006a c06a       2     Header [Size: 2, Type: TC_REF_HOST_FUNC]
006c c06c       2     Value: Import Table [0] (&c056)
006e c06e       2     Header [Size: 2, Type: TC_REF_HOST_FUNC]
0070 c070       2     Value: Import Table [1] (&c058)
0072 c072       2     Header [Size: 6, Type: TC_REF_UNIQUE_STRING]
0074 c074       6     Value: 'isNaN'
007a c07a       2     Header [Size: 8, Type: TC_REF_FLOAT64]
007c c07c       8     Value: -1.1
0084 c084       2     Header [Size: 4, Type: TC_REF_INT32]
0086 c086       4     Value: -2147483648
008a c08a       2     Header [Size: 8, Type: TC_REF_FLOAT64]
008c c08c       8     Value: 2147483648
0094 c094       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0096 c096       8     Value: 1.1
009e c09e       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00a0 c0a0       8     Value: 3.1
00a8 c0a8       2     Header [Size: 4, Type: TC_REF_INT32]
00aa c0aa       4     Value: 10000
00ae c0ae       2     Header [Size: 4, Type: TC_REF_INT32]
00b0 c0b0       4     Value: 18000
00b4 c0b4       2     Header [Size: 4, Type: TC_REF_INT32]
00b6 c0b6       4     Value: 80000
00ba c0ba       2     Header [Size: 4, Type: TC_REF_INT32]
00bc c0bc       4     Value: 70000
00c0 c0c0       2     Header [Size: 4, Type: TC_REF_INT32]
00c2 c0c2       4     Value: 150000
00c6 c0c6       2     Header [Size: 4, Type: TC_REF_INT32]
00c8 c0c8       4     Value: 14500
00cc c0cc       2     Header [Size: 4, Type: TC_REF_INT32]
00ce c0ce       4     Value: 2000000000
00d2 c0d2       2     Header [Size: 4, Type: TC_REF_INT32]
00d4 c0d4       4     Value: -294967296
00d8 c0d8       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00da c0da       8     Value: -1.5
00e2 c0e2       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00e4 c0e4       8     Value: -0.5
00ec c0ec       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00ee c0ee       8     Value: 0.5
00f6 c0f6       2     Header [Size: 8, Type: TC_REF_FLOAT64]
00f8 c0f8       8     Value: -5000000000
0100 c100       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0102 c102       8     Value: 4999999000
010a c10a       2     Header [Size: 8, Type: TC_REF_FLOAT64]
010c c10c       8     Value: 4000000000
0114 c114       2     Header [Size: 4, Type: TC_REF_INT32]
0116 c116       4     Value: -14500
011a c11a       2     Header [Size: 4, Type: TC_REF_INT32]
011c c11c       4     Value: -2000000000
0120 c120       2     Header [Size: 4, Type: TC_REF_INT32]
0122 c122       4     Value: 294967296
0126 c126       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0128 c128       8     Value: 1.5
0130 c130       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0132 c132       8     Value: 5000000000
013a c13a       2     Header [Size: 8, Type: TC_REF_FLOAT64]
013c c13c       8     Value: -4000000000
0144 c144       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0146 c146       8     Value: 5.5
014e c14e       2     Header [Size: 4, Type: TC_REF_INT32]
0150 c150       4     Value: 25000000
0154 c154       2     Header [Size: 4, Type: TC_REF_INT32]
0156 c156       4     Value: 17000
015a c15a       2     Header [Size: 4, Type: TC_REF_INT32]
015c c15c       4     Value: 34000
0160 c160       2     Header [Size: 4, Type: TC_REF_INT32]
0162 c162       4     Value: 5000000
0166 c166       2     Header [Size: 4, Type: TC_REF_INT32]
0168 c168       4     Value: -1004630016
016c c16c       2     Header [Size: 8, Type: TC_REF_FLOAT64]
016e c16e       8     Value: 25000000000000
0176 c176       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0178 c178       8     Value: 3.5
0180 c180       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0182 c182       8     Value: 8.5
018a c18a       2     Header [Size: 8, Type: TC_REF_FLOAT64]
018c c18c       8     Value: 2.5
0194 c194       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0196 c196       8     Value: 3.4
019e c19e       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01a0 c1a0       8     Value: -8.5
01a8 c1a8       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01aa c1aa       8     Value: -2.5
01b2 c1b2       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01b4 c1b4       8     Value: 2.1
01bc c1bc       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01be c1be       8     Value: 2.25
01c6 c1c6       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01c8 c1c8       8     Value: 0.25
01d0 c1d0       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01d2 c1d2       8     Value: 5.25
01da c1da       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01dc c1dc       8     Value: 1.25
01e4 c1e4       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01e6 c1e6       8     Value: 550.25
01ee c1ee       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01f0 c1f0       8     Value: 50.25
01f8 c1f8       2     Header [Size: 8, Type: TC_REF_FLOAT64]
01fa c1fa       8     Value: -7.25
0202 c202       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0204 c204       8     Value: -3.25
020c c20c       2     Header [Size: 8, Type: TC_REF_FLOAT64]
020e c20e       8     Value: 7.25
0216 c216       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0218 c218       8     Value: 3.25
0220 c220       2     Header [Size: 8, Type: TC_REF_FLOAT64]
0222 c222       8     Value: 5.1
022a c22a       2     Header [Size: 8, Type: TC_REF_FUNCTION]
022c c22c    8  -     # Function <builtin>:Number_isNaN
022c c22c       1         maxStackDepth: 3
022d c22d    5  -         # Block entry
022d c22d       1             LoadArg(index 1)
022e c22e       1             LoadVar(index 0)
022f c22f       1             LoadVar(index 0)
0230 c230       1             BinOp(op '!==')
0231 c231       1             Return()
0234 c234       2         <unused>
0234           -2     !! WARNING: Overlapping regions from address 0232 to 0234
0232 c232       2     Header [Size: 55, Type: TC_REF_FUNCTION]
0234 c234   55  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:run
0234 c234       1         maxStackDepth: 2
0235 c235   52  -         # Block entry
0235 c235       1             LoadGlobal [6]
0236 c236       1             Literal(lit undefined)
0237 c237       2             Call(count 1)
0239 c239       1             Pop(count 1)
023a c23a       1             LoadGlobal [7]
023b c23b       1             Literal(lit undefined)
023c c23c       2             Call(count 1)
023e c23e       1             Pop(count 1)
023f c23f       1             LoadGlobal [8]
0240 c240       1             Literal(lit undefined)
0241 c241       2             Call(count 1)
0243 c243       1             Pop(count 1)
0244 c244       1             LoadGlobal [9]
0245 c245       1             Literal(lit undefined)
0246 c246       2             Call(count 1)
0248 c248       1             Pop(count 1)
0249 c249       1             LoadGlobal [10]
024a c24a       1             Literal(lit undefined)
024b c24b       2             Call(count 1)
024d c24d       1             Pop(count 1)
024e c24e       1             LoadGlobal [11]
024f c24f       1             Literal(lit undefined)
0250 c250       2             Call(count 1)
0252 c252       1             Pop(count 1)
0253 c253       1             LoadGlobal [12]
0254 c254       1             Literal(lit undefined)
0255 c255       2             Call(count 1)
0257 c257       1             Pop(count 1)
0258 c258       1             LoadGlobal [13]
0259 c259       1             Literal(lit undefined)
025a c25a       2             Call(count 1)
025c c25c       1             Pop(count 1)
025d c25d       1             LoadGlobal [14]
025e c25e       1             Literal(lit undefined)
025f c25f       2             Call(count 1)
0261 c261       1             Pop(count 1)
0262 c262       1             LoadGlobal [15]
0263 c263       1             Literal(lit undefined)
0264 c264       2             Call(count 1)
0266 c266       1             Pop(count 1)
0267 c267       1             Literal(lit undefined)
0268 c268       1             Return()
026b c26b       2         <unused>
026b           -2     !! WARNING: Overlapping regions from address 0269 to 026b
0269 c269       2     Header [Size: 48, Type: TC_REF_FUNCTION]
026b c26b   48  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testNegate
026b c26b       1         maxStackDepth: 5
026c c26c   32  -         # Block entry
026c c26c       1             LoadGlobal [4]
026d c26d       1             Literal(lit undefined)
026e c26e       1             Literal(lit -1)
026f c26f       1             Literal(lit 2)
0270 c270       3             Literal(3)
0273 c273       1             BinOp(op '-')
0274 c274       2             Call(count 3)
0276 c276       1             Pop(count 1)
0277 c277       1             LoadGlobal [4]
0278 c278       1             Literal(lit undefined)
0279 c279       1             LoadGlobal [0]
027a c27a       1             UnOp(op '-')
027b c27b       3             Literal(&c07c)
027e c27e       1             Literal(lit 0)
027f c27f       1             BinOp(op '/')
0280 c280       2             Call(count 3)
0282 c282       1             Pop(count 1)
0283 c283       1             LoadGlobal [4]
0284 c284       1             Literal(lit undefined)
0285 c285       3             Literal(&c086)
0288 c288       1             UnOp(op '-')
0289 c289       1             LoadGlobal [5]
028a c28a       2             Branch &c294
028c c28c    3  -         # Block block2
028c c28c       3             Literal(&c086)
028f c28f       0             <implicit fallthrough>
028f c28f    5  -         # Block block3
028f c28f       2             Call(count 3)
0291 c291       1             Pop(count 1)
0292 c292       1             Literal(lit undefined)
0293 c293       1             Return()
0294 c294    5  -         # Block block1
0294 c294       3             Literal(&c08c)
0297 c297       2             Jump &c28f
029b c29b       2         <unused>
029b           -2     !! WARNING: Overlapping regions from address 0299 to 029b
0299 c299       2     Header [Size: 29, Type: TC_REF_FUNCTION]
029b c29b   29  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testUnaryPlus
029b c29b       1         maxStackDepth: 4
029c c29c   26  -         # Block entry
029c c29c       1             LoadGlobal [4]
029d c29d       1             Literal(lit undefined)
029e c29e       1             Literal(lit 1)
029f c29f       1             Literal(lit 1)
02a0 c2a0       1             BinOp(op '+')
02a1 c2a1       1             UnOp(op '+')
02a2 c2a2       1             Literal(lit 2)
02a3 c2a3       2             Call(count 3)
02a5 c2a5       1             Pop(count 1)
02a6 c2a6       1             LoadGlobal [4]
02a7 c2a7       1             Literal(lit undefined)
02a8 c2a8       3             Literal(&c096)
02ab c2ab       1             Literal(lit 2)
02ac c2ac       1             BinOp(op '+')
02ad c2ad       1             UnOp(op '+')
02ae c2ae       3             Literal(&c0a0)
02b1 c2b1       2             Call(count 3)
02b3 c2b3       1             Pop(count 1)
02b4 c2b4       1             Literal(lit undefined)
02b5 c2b5       1             Return()
02b8 c2b8       2         <unused>
02b8           -2     !! WARNING: Overlapping regions from address 02b6 to 02b8
02b6 c2b6       2     Header [Size: 189, Type: TC_REF_FUNCTION]
02b8 c2b8  189  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testAddition
02b8 c2b8       1         maxStackDepth: 4
02b9 c2b9  130  -         # Block entry
02b9 c2b9       1             LoadGlobal [4]
02ba c2ba       1             Literal(lit undefined)
02bb c2bb       3             Literal(3)
02be c2be       1             Literal(lit 2)
02bf c2bf       1             BinOp(op '+')
02c0 c2c0       3             Literal(5)
02c3 c2c3       2             Call(count 3)
02c5 c2c5       1             Pop(count 1)
02c6 c2c6       1             LoadGlobal [4]
02c7 c2c7       1             Literal(lit undefined)
02c8 c2c8       3             Literal(3000)
02cb c2cb       3             Literal(2000)
02ce c2ce       1             BinOp(op '+')
02cf c2cf       3             Literal(5000)
02d2 c2d2       2             Call(count 3)
02d4 c2d4       1             Pop(count 1)
02d5 c2d5       1             LoadGlobal [4]
02d6 c2d6       1             Literal(lit undefined)
02d7 c2d7       3             Literal(3000)
02da c2da       3             Literal(3500)
02dd c2dd       1             BinOp(op '+')
02de c2de       3             Literal(6500)
02e1 c2e1       2             Call(count 3)
02e3 c2e3       1             Pop(count 1)
02e4 c2e4       1             LoadGlobal [4]
02e5 c2e5       1             Literal(lit undefined)
02e6 c2e6       3             Literal(6000)
02e9 c2e9       3             Literal(500)
02ec c2ec       1             BinOp(op '+')
02ed c2ed       3             Literal(6500)
02f0 c2f0       2             Call(count 3)
02f2 c2f2       1             Pop(count 1)
02f3 c2f3       1             LoadGlobal [4]
02f4 c2f4       1             Literal(lit undefined)
02f5 c2f5       3             Literal(500)
02f8 c2f8       3             Literal(6500)
02fb c2fb       1             BinOp(op '+')
02fc c2fc       3             Literal(7000)
02ff c2ff       2             Call(count 3)
0301 c301       1             Pop(count 1)
0302 c302       1             LoadGlobal [4]
0303 c303       1             Literal(lit undefined)
0304 c304       3             Literal(&c0aa)
0307 c307       3             Literal(8000)
030a c30a       1             BinOp(op '+')
030b c30b       3             Literal(&c0b0)
030e c30e       2             Call(count 3)
0310 c310       1             Pop(count 1)
0311 c311       1             LoadGlobal [4]
0312 c312       1             Literal(lit undefined)
0313 c313       3             Literal(&c0b6)
0316 c316       3             Literal(&c0bc)
0319 c319       1             BinOp(op '+')
031a c31a       3             Literal(&c0c2)
031d c31d       2             Call(count 3)
031f c31f       1             Pop(count 1)
0320 c320       1             LoadGlobal [4]
0321 c321       1             Literal(lit undefined)
0322 c322       3             Literal(7500)
0325 c325       3             Literal(7000)
0328 c328       1             BinOp(op '+')
0329 c329       3             Literal(&c0c8)
032c c32c       2             Call(count 3)
032e c32e       1             Pop(count 1)
032f c32f       1             LoadGlobal [4]
0330 c330       1             Literal(lit undefined)
0331 c331       3             Literal(&c0ce)
0334 c334       3             Literal(&c0ce)
0337 c337       1             BinOp(op '+')
0338 c338       1             LoadGlobal [5]
0339 c339       2             Branch &c36e
033b c33b    3  -         # Block block2
033b c33b       3             Literal(&c0d4)
033e c33e       0             <implicit fallthrough>
033e c33e   48  -         # Block block3
033e c33e       2             Call(count 3)
0340 c340       1             Pop(count 1)
0341 c341       1             LoadGlobal [4]
0342 c342       1             Literal(lit undefined)
0343 c343       3             Literal(&c0da)
0346 c346       1             Literal(lit 1)
0347 c347       1             BinOp(op '+')
0348 c348       3             Literal(&c0e4)
034b c34b       2             Call(count 3)
034d c34d       1             Pop(count 1)
034e c34e       1             LoadGlobal [4]
034f c34f       1             Literal(lit undefined)
0350 c350       3             Literal(-2)
0353 c353       3             Literal(&c0ee)
0356 c356       1             BinOp(op '+')
0357 c357       3             Literal(&c0da)
035a c35a       2             Call(count 3)
035c c35c       1             Pop(count 1)
035d c35d       1             LoadGlobal [4]
035e c35e       1             Literal(lit undefined)
035f c35f       3             Literal(&c0f8)
0362 c362       3             Literal(&c102)
0365 c365       1             BinOp(op '+')
0366 c366       3             Literal(-1000)
0369 c369       2             Call(count 3)
036b c36b       1             Pop(count 1)
036c c36c       1             Literal(lit undefined)
036d c36d       1             Return()
036e c36e    5  -         # Block block1
036e c36e       3             Literal(&c10c)
0371 c371       2             Jump &c33e
0375 c375       2         <unused>
0375           -2     !! WARNING: Overlapping regions from address 0373 to 0375
0373 c373       2     Header [Size: 140, Type: TC_REF_FUNCTION]
0375 c375  140  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testSubtraction
0375 c375       1         maxStackDepth: 4
0376 c376   83  -         # Block entry
0376 c376       1             LoadGlobal [4]
0377 c377       1             Literal(lit undefined)
0378 c378       3             Literal(3)
037b c37b       1             Literal(lit 2)
037c c37c       1             BinOp(op '-')
037d c37d       1             Literal(lit 1)
037e c37e       2             Call(count 3)
0380 c380       1             Pop(count 1)
0381 c381       1             LoadGlobal [4]
0382 c382       1             Literal(lit undefined)
0383 c383       3             Literal(3000)
0386 c386       3             Literal(2000)
0389 c389       1             BinOp(op '-')
038a c38a       3             Literal(1000)
038d c38d       2             Call(count 3)
038f c38f       1             Pop(count 1)
0390 c390       1             LoadGlobal [4]
0391 c391       1             Literal(lit undefined)
0392 c392       3             Literal(&c0aa)
0395 c395       3             Literal(8000)
0398 c398       1             BinOp(op '-')
0399 c399       3             Literal(2000)
039c c39c       2             Call(count 3)
039e c39e       1             Pop(count 1)
039f c39f       1             LoadGlobal [4]
03a0 c3a0       1             Literal(lit undefined)
03a1 c3a1       3             Literal(&c0b6)
03a4 c3a4       3             Literal(&c0bc)
03a7 c3a7       1             BinOp(op '-')
03a8 c3a8       3             Literal(&c0aa)
03ab c3ab       2             Call(count 3)
03ad c3ad       1             Pop(count 1)
03ae c3ae       1             LoadGlobal [4]
03af c3af       1             Literal(lit undefined)
03b0 c3b0       3             Literal(-7500)
03b3 c3b3       3             Literal(7000)
03b6 c3b6       1             BinOp(op '-')
03b7 c3b7       3             Literal(&c116)
03ba c3ba       2             Call(count 3)
03bc c3bc       1             Pop(count 1)
03bd c3bd       1             LoadGlobal [4]
03be c3be       1             Literal(lit undefined)
03bf c3bf       3             Literal(&c11c)
03c2 c3c2       3             Literal(&c0ce)
03c5 c3c5       1             BinOp(op '-')
03c6 c3c6       1             LoadGlobal [5]
03c7 c3c7       2             Branch &c3fa
03c9 c3c9    3  -         # Block block2
03c9 c3c9       3             Literal(&c122)
03cc c3cc       0             <implicit fallthrough>
03cc c3cc   46  -         # Block block3
03cc c3cc       2             Call(count 3)
03ce c3ce       1             Pop(count 1)
03cf c3cf       1             LoadGlobal [4]
03d0 c3d0       1             Literal(lit undefined)
03d1 c3d1       3             Literal(&c128)
03d4 c3d4       1             Literal(lit 1)
03d5 c3d5       1             BinOp(op '-')
03d6 c3d6       3             Literal(&c0ee)
03d9 c3d9       2             Call(count 3)
03db c3db       1             Pop(count 1)
03dc c3dc       1             LoadGlobal [4]
03dd c3dd       1             Literal(lit undefined)
03de c3de       1             Literal(lit 2)
03df c3df       3             Literal(&c0ee)
03e2 c3e2       1             BinOp(op '-')
03e3 c3e3       3             Literal(&c128)
03e6 c3e6       2             Call(count 3)
03e8 c3e8       1             Pop(count 1)
03e9 c3e9       1             LoadGlobal [4]
03ea c3ea       1             Literal(lit undefined)
03eb c3eb       3             Literal(&c132)
03ee c3ee       3             Literal(&c102)
03f1 c3f1       1             BinOp(op '-')
03f2 c3f2       3             Literal(1000)
03f5 c3f5       2             Call(count 3)
03f7 c3f7       1             Pop(count 1)
03f8 c3f8       1             Literal(lit undefined)
03f9 c3f9       1             Return()
03fa c3fa    5  -         # Block block1
03fa c3fa       3             Literal(&c13c)
03fd c3fd       2             Jump &c3cc
0401 c401       2         <unused>
0401           -2     !! WARNING: Overlapping regions from address 03ff to 0401
03ff c3ff       2     Header [Size: 129, Type: TC_REF_FUNCTION]
0401 c401  129  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testMultiplication
0401 c401       1         maxStackDepth: 4
0402 c402  100  -         # Block entry
0402 c402       1             LoadGlobal [4]
0403 c403       1             Literal(lit undefined)
0404 c404       3             Literal(5)
0407 c407       3             Literal(6)
040a c40a       1             BinOp(op '*')
040b c40b       3             Literal(30)
040e c40e       2             Call(count 3)
0410 c410       1             Pop(count 1)
0411 c411       1             LoadGlobal [4]
0412 c412       1             Literal(lit undefined)
0413 c413       3             Literal(&c146)
0416 c416       3             Literal(6)
0419 c419       1             BinOp(op '*')
041a c41a       3             Literal(33)
041d c41d       2             Call(count 3)
041f c41f       1             Pop(count 1)
0420 c420       1             LoadGlobal [4]
0421 c421       1             Literal(lit undefined)
0422 c422       3             Literal(-5)
0425 c425       3             Literal(-6)
0428 c428       1             BinOp(op '*')
0429 c429       3             Literal(30)
042c c42c       2             Call(count 3)
042e c42e       1             Pop(count 1)
042f c42f       1             LoadGlobal [4]
0430 c430       1             Literal(lit undefined)
0431 c431       3             Literal(5)
0434 c434       3             Literal(-6)
0437 c437       1             BinOp(op '*')
0438 c438       3             Literal(-30)
043b c43b       2             Call(count 3)
043d c43d       1             Pop(count 1)
043e c43e       1             LoadGlobal [4]
043f c43f       1             Literal(lit undefined)
0440 c440       3             Literal(5000)
0443 c443       3             Literal(5000)
0446 c446       1             BinOp(op '*')
0447 c447       3             Literal(&c150)
044a c44a       2             Call(count 3)
044c c44c       1             Pop(count 1)
044d c44d       1             LoadGlobal [4]
044e c44e       1             Literal(lit undefined)
044f c44f       3             Literal(&c156)
0452 c452       1             Literal(lit 2)
0453 c453       1             BinOp(op '*')
0454 c454       3             Literal(&c15c)
0457 c457       2             Call(count 3)
0459 c459       1             Pop(count 1)
045a c45a       1             LoadGlobal [4]
045b c45b       1             Literal(lit undefined)
045c c45c       3             Literal(&c162)
045f c45f       3             Literal(&c162)
0462 c462       1             BinOp(op '*')
0463 c463       1             LoadGlobal [5]
0464 c464       2             Branch &c47b
0466 c466    3  -         # Block block2
0466 c466       3             Literal(&c168)
0469 c469       0             <implicit fallthrough>
0469 c469   18  -         # Block block3
0469 c469       2             Call(count 3)
046b c46b       1             Pop(count 1)
046c c46c       1             LoadGlobal [4]
046d c46d       1             Literal(lit undefined)
046e c46e       3             Literal(&c16e)
0471 c471       1             Literal(lit 1)
0472 c472       1             BinOp(op '*')
0473 c473       3             Literal(&c16e)
0476 c476       2             Call(count 3)
0478 c478       1             Pop(count 1)
0479 c479       1             Literal(lit undefined)
047a c47a       1             Return()
047b c47b    5  -         # Block block1
047b c47b       3             Literal(&c16e)
047e c47e       2             Jump &c469
0482 c482       2         <unused>
0482           -2     !! WARNING: Overlapping regions from address 0480 to 0482
0480 c480       2     Header [Size: 330, Type: TC_REF_FUNCTION]
0482 c482  330  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testDivision
0482 c482       1         maxStackDepth: 7
0483 c483   80  -         # Block entry
0483 c483       1             LoadGlobal [4]
0484 c484       1             Literal(lit undefined)
0485 c485       3             Literal(6)
0488 c488       3             Literal(3)
048b c48b       1             BinOp(op '/')
048c c48c       1             Literal(lit 2)
048d c48d       2             Call(count 3)
048f c48f       1             Pop(count 1)
0490 c490       1             LoadGlobal [4]
0491 c491       1             Literal(lit undefined)
0492 c492       3             Literal(7)
0495 c495       1             Literal(lit 2)
0496 c496       1             BinOp(op '/')
0497 c497       3             Literal(&c178)
049a c49a       2             Call(count 3)
049c c49c       1             Pop(count 1)
049d c49d       1             LoadGlobal [4]
049e c49e       1             Literal(lit undefined)
049f c49f       3             Literal(&c182)
04a2 c4a2       3             Literal(&c18c)
04a5 c4a5       1             BinOp(op '/')
04a6 c4a6       3             Literal(&c196)
04a9 c4a9       2             Call(count 3)
04ab c4ab       1             Pop(count 1)
04ac c4ac       1             LoadGlobal [4]
04ad c4ad       1             Literal(lit undefined)
04ae c4ae       3             Literal(8)
04b1 c4b1       1             Literal(lit 0)
04b2 c4b2       1             BinOp(op '/')
04b3 c4b3       1             LoadGlobal [0]
04b4 c4b4       2             Call(count 3)
04b6 c4b6       1             Pop(count 1)
04b7 c4b7       1             LoadGlobal [4]
04b8 c4b8       1             Literal(lit undefined)
04b9 c4b9       3             Literal(8)
04bc c4bc       3             Literal(-0)
04bf c4bf       1             BinOp(op '/')
04c0 c4c0       1             LoadGlobal [0]
04c1 c4c1       1             UnOp(op '-')
04c2 c4c2       2             Call(count 3)
04c4 c4c4       1             Pop(count 1)
04c5 c4c5       1             LoadGlobal [4]
04c6 c4c6       1             Literal(lit undefined)
04c7 c4c7       3             Literal(8)
04ca c4ca       1             Literal(lit 1)
04cb c4cb       1             Literal(lit 1)
04cc c4cc       1             BinOp(op '-')
04cd c4cd       1             UnOp(op '-')
04ce c4ce       1             BinOp(op '/')
04cf c4cf       1             LoadGlobal [5]
04d0 c4d0       3             Branch &c5c5
04d3 c4d3    1  -         # Block block2
04d3 c4d3       1             LoadGlobal [0]
04d4 c4d4       0             <implicit fallthrough>
04d4 c4d4  241  -         # Block block3
04d4 c4d4       2             Call(count 3)
04d6 c4d6       1             Pop(count 1)
04d7 c4d7       1             LoadGlobal [4]
04d8 c4d8       1             Literal(lit undefined)
04d9 c4d9       3             Literal(-8)
04dc c4dc       1             Literal(lit 0)
04dd c4dd       1             BinOp(op '/')
04de c4de       1             LoadGlobal [0]
04df c4df       1             UnOp(op '-')
04e0 c4e0       2             Call(count 3)
04e2 c4e2       1             Pop(count 1)
04e3 c4e3       1             LoadGlobal [4]
04e4 c4e4       1             Literal(lit undefined)
04e5 c4e5       3             Literal(-8)
04e8 c4e8       3             Literal(-0)
04eb c4eb       1             BinOp(op '/')
04ec c4ec       1             LoadGlobal [0]
04ed c4ed       2             Call(count 3)
04ef c4ef       1             Pop(count 1)
04f0 c4f0       1             LoadGlobal [3]
04f1 c4f1       1             Literal(lit undefined)
04f2 c4f2       1             LoadGlobal [2]
04f3 c4f3       1             LoadVar(index 2)
04f4 c4f4       3             Literal(&c074)
04f7 c4f7       1             ObjectGet()
04f8 c4f8       1             LoadVar(index 2)
04f9 c4f9       1             LoadGlobal [0]
04fa c4fa       1             LoadGlobal [0]
04fb c4fb       1             BinOp(op '/')
04fc c4fc       2             Call(count 2)
04fe c4fe       1             StoreVar(index 2)
04ff c4ff       2             Call(count 2)
0501 c501       1             Pop(count 1)
0502 c502       1             LoadGlobal [4]
0503 c503       1             Literal(lit undefined)
0504 c504       3             Literal(6)
0507 c507       3             Literal(3)
050a c50a       1             BinOp(op 'DIVIDE_AND_TRUNC')
050b c50b       1             Literal(lit 2)
050c c50c       2             Call(count 3)
050e c50e       1             Pop(count 1)
050f c50f       1             LoadGlobal [4]
0510 c510       1             Literal(lit undefined)
0511 c511       3             Literal(7)
0514 c514       1             Literal(lit 2)
0515 c515       1             BinOp(op 'DIVIDE_AND_TRUNC')
0516 c516       3             Literal(3)
0519 c519       2             Call(count 3)
051b c51b       1             Pop(count 1)
051c c51c       1             LoadGlobal [4]
051d c51d       1             Literal(lit undefined)
051e c51e       3             Literal(&c182)
0521 c521       3             Literal(&c18c)
0524 c524       1             BinOp(op 'DIVIDE_AND_TRUNC')
0525 c525       3             Literal(3)
0528 c528       2             Call(count 3)
052a c52a       1             Pop(count 1)
052b c52b       1             LoadGlobal [4]
052c c52c       1             Literal(lit undefined)
052d c52d       3             Literal(-6)
0530 c530       3             Literal(-3)
0533 c533       1             BinOp(op 'DIVIDE_AND_TRUNC')
0534 c534       1             Literal(lit 2)
0535 c535       2             Call(count 3)
0537 c537       1             Pop(count 1)
0538 c538       1             LoadGlobal [4]
0539 c539       1             Literal(lit undefined)
053a c53a       3             Literal(-7)
053d c53d       3             Literal(-2)
0540 c540       1             BinOp(op 'DIVIDE_AND_TRUNC')
0541 c541       3             Literal(3)
0544 c544       2             Call(count 3)
0546 c546       1             Pop(count 1)
0547 c547       1             LoadGlobal [4]
0548 c548       1             Literal(lit undefined)
0549 c549       3             Literal(&c1a0)
054c c54c       3             Literal(&c1aa)
054f c54f       1             BinOp(op 'DIVIDE_AND_TRUNC')
0550 c550       3             Literal(3)
0553 c553       2             Call(count 3)
0555 c555       1             Pop(count 1)
0556 c556       1             LoadGlobal [4]
0557 c557       1             Literal(lit undefined)
0558 c558       3             Literal(-6)
055b c55b       3             Literal(3)
055e c55e       1             BinOp(op 'DIVIDE_AND_TRUNC')
055f c55f       3             Literal(-2)
0562 c562       2             Call(count 3)
0564 c564       1             Pop(count 1)
0565 c565       1             LoadGlobal [4]
0566 c566       1             Literal(lit undefined)
0567 c567       3             Literal(-7)
056a c56a       1             Literal(lit 2)
056b c56b       1             BinOp(op 'DIVIDE_AND_TRUNC')
056c c56c       3             Literal(-3)
056f c56f       2             Call(count 3)
0571 c571       1             Pop(count 1)
0572 c572       1             LoadGlobal [4]
0573 c573       1             Literal(lit undefined)
0574 c574       3             Literal(&c1a0)
0577 c577       3             Literal(&c18c)
057a c57a       1             BinOp(op 'DIVIDE_AND_TRUNC')
057b c57b       3             Literal(-3)
057e c57e       2             Call(count 3)
0580 c580       1             Pop(count 1)
0581 c581       1             LoadGlobal [4]
0582 c582       1             Literal(lit undefined)
0583 c583       3             Literal(8)
0586 c586       1             Literal(lit 0)
0587 c587       1             BinOp(op 'DIVIDE_AND_TRUNC')
0588 c588       1             Literal(lit 0)
0589 c589       2             Call(count 3)
058b c58b       1             Pop(count 1)
058c c58c       1             LoadGlobal [4]
058d c58d       1             Literal(lit undefined)
058e c58e       3             Literal(8)
0591 c591       3             Literal(-0)
0594 c594       1             BinOp(op 'DIVIDE_AND_TRUNC')
0595 c595       1             Literal(lit 0)
0596 c596       2             Call(count 3)
0598 c598       1             Pop(count 1)
0599 c599       1             LoadGlobal [4]
059a c59a       1             Literal(lit undefined)
059b c59b       3             Literal(-8)
059e c59e       1             Literal(lit 0)
059f c59f       1             BinOp(op 'DIVIDE_AND_TRUNC')
05a0 c5a0       1             Literal(lit 0)
05a1 c5a1       2             Call(count 3)
05a3 c5a3       1             Pop(count 1)
05a4 c5a4       1             LoadGlobal [4]
05a5 c5a5       1             Literal(lit undefined)
05a6 c5a6       3             Literal(-8)
05a9 c5a9       3             Literal(-0)
05ac c5ac       1             BinOp(op 'DIVIDE_AND_TRUNC')
05ad c5ad       1             Literal(lit 0)
05ae c5ae       2             Call(count 3)
05b0 c5b0       1             Pop(count 1)
05b1 c5b1       1             LoadGlobal [4]
05b2 c5b2       1             Literal(lit undefined)
05b3 c5b3       1             LoadGlobal [1]
05b4 c5b4       1             LoadGlobal [1]
05b5 c5b5       1             BinOp(op 'DIVIDE_AND_TRUNC')
05b6 c5b6       1             Literal(lit 0)
05b7 c5b7       2             Call(count 3)
05b9 c5b9       1             Pop(count 1)
05ba c5ba       1             LoadGlobal [4]
05bb c5bb       1             Literal(lit undefined)
05bc c5bc       1             LoadGlobal [0]
05bd c5bd       1             LoadGlobal [0]
05be c5be       1             BinOp(op 'DIVIDE_AND_TRUNC')
05bf c5bf       1             Literal(lit 0)
05c0 c5c0       2             Call(count 3)
05c2 c5c2       1             Pop(count 1)
05c3 c5c3       1             Literal(lit undefined)
05c4 c5c4       1             Return()
05c5 c5c5    5  -         # Block block1
05c5 c5c5       1             LoadGlobal [0]
05c6 c5c6       1             UnOp(op '-')
05c7 c5c7       3             Jump &c4d4
05cc c5cc       2         <unused>
05cc           -2     !! WARNING: Overlapping regions from address 05ca to 05cc
05ca c5ca       2     Header [Size: 207, Type: TC_REF_FUNCTION]
05cc c5cc  207  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testLessThan
05cc c5cc       1         maxStackDepth: 4
05cd c5cd  204  -         # Block entry
05cd c5cd       1             LoadGlobal [4]
05ce c5ce       1             Literal(lit undefined)
05cf c5cf       1             Literal(lit 1)
05d0 c5d0       1             Literal(lit 2)
05d1 c5d1       1             BinOp(op '<')
05d2 c5d2       1             Literal(lit true)
05d3 c5d3       2             Call(count 3)
05d5 c5d5       1             Pop(count 1)
05d6 c5d6       1             LoadGlobal [4]
05d7 c5d7       1             Literal(lit undefined)
05d8 c5d8       1             Literal(lit 2)
05d9 c5d9       1             Literal(lit 1)
05da c5da       1             BinOp(op '<')
05db c5db       1             Literal(lit false)
05dc c5dc       2             Call(count 3)
05de c5de       1             Pop(count 1)
05df c5df       1             LoadGlobal [4]
05e0 c5e0       1             Literal(lit undefined)
05e1 c5e1       1             Literal(lit 2)
05e2 c5e2       1             Literal(lit 2)
05e3 c5e3       1             BinOp(op '<')
05e4 c5e4       1             Literal(lit false)
05e5 c5e5       2             Call(count 3)
05e7 c5e7       1             Pop(count 1)
05e8 c5e8       1             LoadGlobal [4]
05e9 c5e9       1             Literal(lit undefined)
05ea c5ea       1             Literal(lit -1)
05eb c5eb       3             Literal(-2)
05ee c5ee       1             BinOp(op '<')
05ef c5ef       1             Literal(lit false)
05f0 c5f0       2             Call(count 3)
05f2 c5f2       1             Pop(count 1)
05f3 c5f3       1             LoadGlobal [4]
05f4 c5f4       1             Literal(lit undefined)
05f5 c5f5       3             Literal(-2)
05f8 c5f8       1             Literal(lit -1)
05f9 c5f9       1             BinOp(op '<')
05fa c5fa       1             Literal(lit true)
05fb c5fb       2             Call(count 3)
05fd c5fd       1             Pop(count 1)
05fe c5fe       1             LoadGlobal [4]
05ff c5ff       1             Literal(lit undefined)
0600 c600       3             Literal(-2)
0603 c603       3             Literal(-2)
0606 c606       1             BinOp(op '<')
0607 c607       1             Literal(lit false)
0608 c608       2             Call(count 3)
060a c60a       1             Pop(count 1)
060b c60b       1             LoadGlobal [4]
060c c60c       1             Literal(lit undefined)
060d c60d       3             Literal(&c096)
0610 c610       3             Literal(&c1b4)
0613 c613       1             BinOp(op '<')
0614 c614       1             Literal(lit true)
0615 c615       2             Call(count 3)
0617 c617       1             Pop(count 1)
0618 c618       1             LoadGlobal [4]
0619 c619       1             Literal(lit undefined)
061a c61a       3             Literal(&c1b4)
061d c61d       3             Literal(&c096)
0620 c620       1             BinOp(op '<')
0621 c621       1             Literal(lit false)
0622 c622       2             Call(count 3)
0624 c624       1             Pop(count 1)
0625 c625       1             LoadGlobal [4]
0626 c626       1             Literal(lit undefined)
0627 c627       3             Literal(&c1b4)
062a c62a       3             Literal(&c1b4)
062d c62d       1             BinOp(op '<')
062e c62e       1             Literal(lit false)
062f c62f       2             Call(count 3)
0631 c631       1             Pop(count 1)
0632 c632       1             LoadGlobal [4]
0633 c633       1             Literal(lit undefined)
0634 c634       1             Literal(lit 1)
0635 c635       1             Literal(lit 2)
0636 c636       1             BinOp(op '<=')
0637 c637       1             Literal(lit true)
0638 c638       2             Call(count 3)
063a c63a       1             Pop(count 1)
063b c63b       1             LoadGlobal [4]
063c c63c       1             Literal(lit undefined)
063d c63d       1             Literal(lit 2)
063e c63e       1             Literal(lit 1)
063f c63f       1             BinOp(op '<=')
0640 c640       1             Literal(lit false)
0641 c641       2             Call(count 3)
0643 c643       1             Pop(count 1)
0644 c644       1             LoadGlobal [4]
0645 c645       1             Literal(lit undefined)
0646 c646       1             Literal(lit 2)
0647 c647       1             Literal(lit 2)
0648 c648       1             BinOp(op '<=')
0649 c649       1             Literal(lit true)
064a c64a       2             Call(count 3)
064c c64c       1             Pop(count 1)
064d c64d       1             LoadGlobal [4]
064e c64e       1             Literal(lit undefined)
064f c64f       1             Literal(lit -1)
0650 c650       3             Literal(-2)
0653 c653       1             BinOp(op '<=')
0654 c654       1             Literal(lit false)
0655 c655       2             Call(count 3)
0657 c657       1             Pop(count 1)
0658 c658       1             LoadGlobal [4]
0659 c659       1             Literal(lit undefined)
065a c65a       3             Literal(-2)
065d c65d       1             Literal(lit -1)
065e c65e       1             BinOp(op '<=')
065f c65f       1             Literal(lit true)
0660 c660       2             Call(count 3)
0662 c662       1             Pop(count 1)
0663 c663       1             LoadGlobal [4]
0664 c664       1             Literal(lit undefined)
0665 c665       3             Literal(-2)
0668 c668       3             Literal(-2)
066b c66b       1             BinOp(op '<=')
066c c66c       1             Literal(lit true)
066d c66d       2             Call(count 3)
066f c66f       1             Pop(count 1)
0670 c670       1             LoadGlobal [4]
0671 c671       1             Literal(lit undefined)
0672 c672       3             Literal(&c096)
0675 c675       3             Literal(&c1b4)
0678 c678       1             BinOp(op '<=')
0679 c679       1             Literal(lit true)
067a c67a       2             Call(count 3)
067c c67c       1             Pop(count 1)
067d c67d       1             LoadGlobal [4]
067e c67e       1             Literal(lit undefined)
067f c67f       3             Literal(&c1b4)
0682 c682       3             Literal(&c096)
0685 c685       1             BinOp(op '<=')
0686 c686       1             Literal(lit false)
0687 c687       2             Call(count 3)
0689 c689       1             Pop(count 1)
068a c68a       1             LoadGlobal [4]
068b c68b       1             Literal(lit undefined)
068c c68c       3             Literal(&c1b4)
068f c68f       3             Literal(&c1b4)
0692 c692       1             BinOp(op '<=')
0693 c693       1             Literal(lit true)
0694 c694       2             Call(count 3)
0696 c696       1             Pop(count 1)
0697 c697       1             Literal(lit undefined)
0698 c698       1             Return()
069b c69b       2         <unused>
069b           -2     !! WARNING: Overlapping regions from address 0699 to 069b
0699 c699       2     Header [Size: 207, Type: TC_REF_FUNCTION]
069b c69b  207  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testGreaterThan
069b c69b       1         maxStackDepth: 4
069c c69c  204  -         # Block entry
069c c69c       1             LoadGlobal [4]
069d c69d       1             Literal(lit undefined)
069e c69e       1             Literal(lit 1)
069f c69f       1             Literal(lit 2)
06a0 c6a0       1             BinOp(op '>')
06a1 c6a1       1             Literal(lit false)
06a2 c6a2       2             Call(count 3)
06a4 c6a4       1             Pop(count 1)
06a5 c6a5       1             LoadGlobal [4]
06a6 c6a6       1             Literal(lit undefined)
06a7 c6a7       1             Literal(lit 2)
06a8 c6a8       1             Literal(lit 1)
06a9 c6a9       1             BinOp(op '>')
06aa c6aa       1             Literal(lit true)
06ab c6ab       2             Call(count 3)
06ad c6ad       1             Pop(count 1)
06ae c6ae       1             LoadGlobal [4]
06af c6af       1             Literal(lit undefined)
06b0 c6b0       1             Literal(lit 2)
06b1 c6b1       1             Literal(lit 2)
06b2 c6b2       1             BinOp(op '>')
06b3 c6b3       1             Literal(lit false)
06b4 c6b4       2             Call(count 3)
06b6 c6b6       1             Pop(count 1)
06b7 c6b7       1             LoadGlobal [4]
06b8 c6b8       1             Literal(lit undefined)
06b9 c6b9       1             Literal(lit -1)
06ba c6ba       3             Literal(-2)
06bd c6bd       1             BinOp(op '>')
06be c6be       1             Literal(lit true)
06bf c6bf       2             Call(count 3)
06c1 c6c1       1             Pop(count 1)
06c2 c6c2       1             LoadGlobal [4]
06c3 c6c3       1             Literal(lit undefined)
06c4 c6c4       3             Literal(-2)
06c7 c6c7       1             Literal(lit -1)
06c8 c6c8       1             BinOp(op '>')
06c9 c6c9       1             Literal(lit false)
06ca c6ca       2             Call(count 3)
06cc c6cc       1             Pop(count 1)
06cd c6cd       1             LoadGlobal [4]
06ce c6ce       1             Literal(lit undefined)
06cf c6cf       3             Literal(-2)
06d2 c6d2       3             Literal(-2)
06d5 c6d5       1             BinOp(op '>')
06d6 c6d6       1             Literal(lit false)
06d7 c6d7       2             Call(count 3)
06d9 c6d9       1             Pop(count 1)
06da c6da       1             LoadGlobal [4]
06db c6db       1             Literal(lit undefined)
06dc c6dc       3             Literal(&c096)
06df c6df       3             Literal(&c1b4)
06e2 c6e2       1             BinOp(op '>')
06e3 c6e3       1             Literal(lit false)
06e4 c6e4       2             Call(count 3)
06e6 c6e6       1             Pop(count 1)
06e7 c6e7       1             LoadGlobal [4]
06e8 c6e8       1             Literal(lit undefined)
06e9 c6e9       3             Literal(&c1b4)
06ec c6ec       3             Literal(&c096)
06ef c6ef       1             BinOp(op '>')
06f0 c6f0       1             Literal(lit true)
06f1 c6f1       2             Call(count 3)
06f3 c6f3       1             Pop(count 1)
06f4 c6f4       1             LoadGlobal [4]
06f5 c6f5       1             Literal(lit undefined)
06f6 c6f6       3             Literal(&c1b4)
06f9 c6f9       3             Literal(&c1b4)
06fc c6fc       1             BinOp(op '>')
06fd c6fd       1             Literal(lit false)
06fe c6fe       2             Call(count 3)
0700 c700       1             Pop(count 1)
0701 c701       1             LoadGlobal [4]
0702 c702       1             Literal(lit undefined)
0703 c703       1             Literal(lit 1)
0704 c704       1             Literal(lit 2)
0705 c705       1             BinOp(op '>=')
0706 c706       1             Literal(lit false)
0707 c707       2             Call(count 3)
0709 c709       1             Pop(count 1)
070a c70a       1             LoadGlobal [4]
070b c70b       1             Literal(lit undefined)
070c c70c       1             Literal(lit 2)
070d c70d       1             Literal(lit 1)
070e c70e       1             BinOp(op '>=')
070f c70f       1             Literal(lit true)
0710 c710       2             Call(count 3)
0712 c712       1             Pop(count 1)
0713 c713       1             LoadGlobal [4]
0714 c714       1             Literal(lit undefined)
0715 c715       1             Literal(lit 2)
0716 c716       1             Literal(lit 2)
0717 c717       1             BinOp(op '>=')
0718 c718       1             Literal(lit true)
0719 c719       2             Call(count 3)
071b c71b       1             Pop(count 1)
071c c71c       1             LoadGlobal [4]
071d c71d       1             Literal(lit undefined)
071e c71e       1             Literal(lit -1)
071f c71f       3             Literal(-2)
0722 c722       1             BinOp(op '>=')
0723 c723       1             Literal(lit true)
0724 c724       2             Call(count 3)
0726 c726       1             Pop(count 1)
0727 c727       1             LoadGlobal [4]
0728 c728       1             Literal(lit undefined)
0729 c729       3             Literal(-2)
072c c72c       1             Literal(lit -1)
072d c72d       1             BinOp(op '>=')
072e c72e       1             Literal(lit false)
072f c72f       2             Call(count 3)
0731 c731       1             Pop(count 1)
0732 c732       1             LoadGlobal [4]
0733 c733       1             Literal(lit undefined)
0734 c734       3             Literal(-2)
0737 c737       3             Literal(-2)
073a c73a       1             BinOp(op '>=')
073b c73b       1             Literal(lit true)
073c c73c       2             Call(count 3)
073e c73e       1             Pop(count 1)
073f c73f       1             LoadGlobal [4]
0740 c740       1             Literal(lit undefined)
0741 c741       3             Literal(&c096)
0744 c744       3             Literal(&c1b4)
0747 c747       1             BinOp(op '>=')
0748 c748       1             Literal(lit false)
0749 c749       2             Call(count 3)
074b c74b       1             Pop(count 1)
074c c74c       1             LoadGlobal [4]
074d c74d       1             Literal(lit undefined)
074e c74e       3             Literal(&c1b4)
0751 c751       3             Literal(&c096)
0754 c754       1             BinOp(op '>=')
0755 c755       1             Literal(lit true)
0756 c756       2             Call(count 3)
0758 c758       1             Pop(count 1)
0759 c759       1             LoadGlobal [4]
075a c75a       1             Literal(lit undefined)
075b c75b       3             Literal(&c1b4)
075e c75e       3             Literal(&c1b4)
0761 c761       1             BinOp(op '>=')
0762 c762       1             Literal(lit true)
0763 c763       2             Call(count 3)
0765 c765       1             Pop(count 1)
0766 c766       1             Literal(lit undefined)
0767 c767       1             Return()
076a c76a       2         <unused>
076a           -2     !! WARNING: Overlapping regions from address 0768 to 076a
0768 c768       2     Header [Size: 209, Type: TC_REF_FUNCTION]
076a c76a  209  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testRemainder
076a c76a       1         maxStackDepth: 7
076b c76b  206  -         # Block entry
076b c76b       1             LoadGlobal [4]
076c c76c       1             Literal(lit undefined)
076d c76d       1             Literal(lit 2)
076e c76e       1             Literal(lit 1)
076f c76f       1             BinOp(op '%')
0770 c770       1             Literal(lit 0)
0771 c771       2             Call(count 3)
0773 c773       1             Pop(count 1)
0774 c774       1             LoadGlobal [4]
0775 c775       1             Literal(lit undefined)
0776 c776       3             Literal(5)
0779 c779       1             Literal(lit 2)
077a c77a       1             BinOp(op '%')
077b c77b       1             Literal(lit 1)
077c c77c       2             Call(count 3)
077e c77e       1             Pop(count 1)
077f c77f       1             LoadGlobal [4]
0780 c780       1             Literal(lit undefined)
0781 c781       3             Literal(550)
0784 c784       3             Literal(100)
0787 c787       1             BinOp(op '%')
0788 c788       3             Literal(50)
078b c78b       2             Call(count 3)
078d c78d       1             Pop(count 1)
078e c78e       1             LoadGlobal [4]
078f c78f       1             Literal(lit undefined)
0790 c790       3             Literal(-8)
0793 c793       3             Literal(3)
0796 c796       1             BinOp(op '%')
0797 c797       3             Literal(-2)
079a c79a       2             Call(count 3)
079c c79c       1             Pop(count 1)
079d c79d       1             LoadGlobal [4]
079e c79e       1             Literal(lit undefined)
079f c79f       3             Literal(8)
07a2 c7a2       3             Literal(-3)
07a5 c7a5       1             BinOp(op '%')
07a6 c7a6       1             Literal(lit 2)
07a7 c7a7       2             Call(count 3)
07a9 c7a9       1             Pop(count 1)
07aa c7aa       1             LoadGlobal [4]
07ab c7ab       1             Literal(lit undefined)
07ac c7ac       3             Literal(-8)
07af c7af       3             Literal(-3)
07b2 c7b2       1             BinOp(op '%')
07b3 c7b3       3             Literal(-2)
07b6 c7b6       2             Call(count 3)
07b8 c7b8       1             Pop(count 1)
07b9 c7b9       1             LoadGlobal [4]
07ba c7ba       1             Literal(lit undefined)
07bb c7bb       3             Literal(&c1be)
07be c7be       1             Literal(lit 1)
07bf c7bf       1             BinOp(op '%')
07c0 c7c0       3             Literal(&c1c8)
07c3 c7c3       2             Call(count 3)
07c5 c7c5       1             Pop(count 1)
07c6 c7c6       1             LoadGlobal [4]
07c7 c7c7       1             Literal(lit undefined)
07c8 c7c8       3             Literal(&c1d2)
07cb c7cb       1             Literal(lit 2)
07cc c7cc       1             BinOp(op '%')
07cd c7cd       3             Literal(&c1dc)
07d0 c7d0       2             Call(count 3)
07d2 c7d2       1             Pop(count 1)
07d3 c7d3       1             LoadGlobal [4]
07d4 c7d4       1             Literal(lit undefined)
07d5 c7d5       3             Literal(&c1e6)
07d8 c7d8       3             Literal(100)
07db c7db       1             BinOp(op '%')
07dc c7dc       3             Literal(&c1f0)
07df c7df       2             Call(count 3)
07e1 c7e1       1             Pop(count 1)
07e2 c7e2       1             LoadGlobal [4]
07e3 c7e3       1             Literal(lit undefined)
07e4 c7e4       3             Literal(&c1fa)
07e7 c7e7       3             Literal(4)
07ea c7ea       1             BinOp(op '%')
07eb c7eb       3             Literal(&c204)
07ee c7ee       2             Call(count 3)
07f0 c7f0       1             Pop(count 1)
07f1 c7f1       1             LoadGlobal [4]
07f2 c7f2       1             Literal(lit undefined)
07f3 c7f3       3             Literal(&c20e)
07f6 c7f6       3             Literal(-4)
07f9 c7f9       1             BinOp(op '%')
07fa c7fa       3             Literal(&c218)
07fd c7fd       2             Call(count 3)
07ff c7ff       1             Pop(count 1)
0800 c800       1             LoadGlobal [4]
0801 c801       1             Literal(lit undefined)
0802 c802       3             Literal(&c1fa)
0805 c805       3             Literal(-4)
0808 c808       1             BinOp(op '%')
0809 c809       3             Literal(&c204)
080c c80c       2             Call(count 3)
080e c80e       1             Pop(count 1)
080f c80f       1             LoadGlobal [3]
0810 c810       1             Literal(lit undefined)
0811 c811       1             LoadGlobal [2]
0812 c812       1             LoadVar(index 2)
0813 c813       3             Literal(&c074)
0816 c816       1             ObjectGet()
0817 c817       1             LoadVar(index 2)
0818 c818       3             Literal(5)
081b c81b       1             Literal(lit 0)
081c c81c       1             BinOp(op '%')
081d c81d       2             Call(count 2)
081f c81f       1             StoreVar(index 2)
0820 c820       2             Call(count 2)
0822 c822       1             Pop(count 1)
0823 c823       1             LoadGlobal [3]
0824 c824       1             Literal(lit undefined)
0825 c825       1             LoadGlobal [2]
0826 c826       1             LoadVar(index 2)
0827 c827       3             Literal(&c074)
082a c82a       1             ObjectGet()
082b c82b       1             LoadVar(index 2)
082c c82c       3             Literal(&c222)
082f c82f       1             Literal(lit 0)
0830 c830       1             BinOp(op '%')
0831 c831       2             Call(count 2)
0833 c833       1             StoreVar(index 2)
0834 c834       2             Call(count 2)
0836 c836       1             Pop(count 1)
0837 c837       1             Literal(lit undefined)
0838 c838       1             Return()
083b c83b       2         <unused>
083b           -2     !! WARNING: Overlapping regions from address 0839 to 083b
0839 c839       2     Header [Size: 58, Type: TC_REF_FUNCTION]
083b c83b   58  -     # Function ./test/end-to-end/tests/number-operations.test.mvms:testPower
083b c83b       1         maxStackDepth: 7
083c c83c   55  -         # Block entry
083c c83c       1             LoadGlobal [4]
083d c83d       1             Literal(lit undefined)
083e c83e       1             Literal(lit 2)
083f c83f       3             Literal(3)
0842 c842       1             BinOp(op '**')
0843 c843       3             Literal(8)
0846 c846       2             Call(count 3)
0848 c848       1             Pop(count 1)
0849 c849       1             LoadGlobal [4]
084a c84a       1             Literal(lit undefined)
084b c84b       1             Literal(lit 2)
084c c84c       1             Literal(lit 0)
084d c84d       1             BinOp(op '**')
084e c84e       1             Literal(lit 1)
084f c84f       2             Call(count 3)
0851 c851       1             Pop(count 1)
0852 c852       1             LoadGlobal [4]
0853 c853       1             Literal(lit undefined)
0854 c854       3             Literal(&c18c)
0857 c857       1             Literal(lit 1)
0858 c858       1             BinOp(op '**')
0859 c859       3             Literal(&c18c)
085c c85c       2             Call(count 3)
085e c85e       1             Pop(count 1)
085f c85f       1             LoadGlobal [3]
0860 c860       1             Literal(lit undefined)
0861 c861       1             LoadGlobal [2]
0862 c862       1             LoadVar(index 2)
0863 c863       3             Literal(&c074)
0866 c866       1             ObjectGet()
0867 c867       1             LoadVar(index 2)
0868 c868       1             Literal(lit 1)
0869 c869       1             LoadGlobal [0]
086a c86a       1             BinOp(op '**')
086b c86b       2             Call(count 2)
086d c86d       1             StoreVar(index 2)
086e c86e       2             Call(count 2)
0870 c870       1             Pop(count 1)
0871 c871       1             Literal(lit undefined)
0872 c872       1             Return()
0875 c875       2         <unused>
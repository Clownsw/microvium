export 0 = &function run;

slot ['global:assertEqual'] = host function 3;
slot ['global:print'] = host function 1;
slot test_minimalTryCatch = &function test_minimalTryCatch;
slot test_uncaughtException = &function test_uncaughtException;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'test_minimalTryCatch');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'test_uncaughtException');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_minimalTryCatch() {
  entry:
    Literal(lit deleted);
    ArrayNew();
    StoreVar(index 0);
    StartTry(@block1);
    LoadVar(index 0);
    LoadVar(index 3);
    Literal(lit 'push');
    ObjectGet();
    LoadVar(index 3);
    Literal(lit 42);
    Call(count 2);
    StoreVar(index 3);
    Pop(count 1);
    Literal(lit 'boo!');
    Throw();
    LoadVar(index 0);
    LoadVar(index 3);
    Literal(lit 'push');
    ObjectGet();
    LoadVar(index 3);
    Literal(lit 43);
    Call(count 2);
    StoreVar(index 3);
    Pop(count 1);
    EndTry();
    Jump(@block2);
  block1:
    Pop(count 1);
    LoadVar(index 0);
    LoadVar(index 1);
    Literal(lit 'push');
    ObjectGet();
    LoadVar(index 1);
    Literal(lit 44);
    Call(count 2);
    StoreVar(index 1);
    Pop(count 1);
    Jump(@block2);
  block2:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 0);
    ObjectGet();
    Literal(lit 42);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 1);
    ObjectGet();
    Literal(lit 44);
    Call(count 3);
    Pop(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_uncaughtException() {
  entry:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'foo');
    Call(count 2);
    Pop(count 1);
    // Should print
    Literal(lit 'My uncaught exception');
    Throw();
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'bar');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 3 = {
  push: &function Array_push,
};
[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'print'
[free var] 'assertEqual'
[global slot] 'thisModule'
[global slot] 'test_uncaughtException'
[global slot] 'test_minimalTryCatch'
[global slot] 'test_catchWithoutThrow'
[global slot] 'test_throwUnwinding'
[global slot] 'test_normalUnwinding'
[global slot] 'test_throwAcrossFrames'
[global slot] 'test_conditionalThrow'
[global slot] 'test_exceptionParameter'
[global slot] 'test_exceptionParameterWithClosure'
[global slot] 'test_rethrow'
[global slot] 'test_breakOutOfTry'
[global slot] 'test_breakOutOfTryWithClosure'
[global slot] 'test_breakOutOfCatch'
[global slot] 'test_breakOutOfDoubleCatch'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'test_uncaughtException' # binding_2 @ global['test_uncaughtException'];
    function 'test_minimalTryCatch' # binding_3 @ global['test_minimalTryCatch'];
    function 'test_catchWithoutThrow' # binding_4 @ global['test_catchWithoutThrow'];
    function 'test_throwUnwinding' # binding_5 @ global['test_throwUnwinding'];
    function 'test_normalUnwinding' # binding_6 @ global['test_normalUnwinding'];
    function 'test_throwAcrossFrames' # binding_7 @ global['test_throwAcrossFrames'];
    function 'test_conditionalThrow' # binding_8 @ global['test_conditionalThrow'];
    function 'test_exceptionParameter' # binding_9 @ global['test_exceptionParameter'];
    function 'test_exceptionParameterWithClosure' # binding_10 @ global['test_exceptionParameterWithClosure'];
    function 'test_rethrow' # binding_11 @ global['test_rethrow'];
    function 'test_breakOutOfTry' # binding_12 @ global['test_breakOutOfTry'];
    function 'test_breakOutOfTryWithClosure' # binding_13 @ global['test_breakOutOfTryWithClosure'];
    function 'test_breakOutOfCatch' # binding_14 @ global['test_breakOutOfCatch'];
    function 'test_breakOutOfDoubleCatch' # binding_15 @ global['test_breakOutOfDoubleCatch']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]
    func 'test_uncaughtException' -> global['test_uncaughtException']
    func 'test_minimalTryCatch' -> global['test_minimalTryCatch']
    func 'test_catchWithoutThrow' -> global['test_catchWithoutThrow']
    func 'test_throwUnwinding' -> global['test_throwUnwinding']
    func 'test_normalUnwinding' -> global['test_normalUnwinding']
    func 'test_throwAcrossFrames' -> global['test_throwAcrossFrames']
    func 'test_conditionalThrow' -> global['test_conditionalThrow']
    func 'test_exceptionParameter' -> global['test_exceptionParameter']
    func 'test_exceptionParameterWithClosure' -> global['test_exceptionParameterWithClosure']
    func 'test_rethrow' -> global['test_rethrow']
    func 'test_breakOutOfTry' -> global['test_breakOutOfTry']
    func 'test_breakOutOfTryWithClosure' -> global['test_breakOutOfTryWithClosure']
    func 'test_breakOutOfCatch' -> global['test_breakOutOfCatch']
    func 'test_breakOutOfDoubleCatch' -> global['test_breakOutOfDoubleCatch']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_16 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        test_minimalTryCatch @ binding_3
        test_catchWithoutThrow @ binding_4
        test_throwUnwinding @ binding_5
        test_normalUnwinding @ binding_6
        test_throwAcrossFrames @ binding_7
        test_conditionalThrow @ binding_8
        test_exceptionParameter @ binding_9
        test_exceptionParameterWithClosure @ binding_10
        test_rethrow @ binding_11
        test_breakOutOfTry @ binding_12
        test_breakOutOfTryWithClosure @ binding_13
        test_breakOutOfCatch @ binding_14
        test_breakOutOfDoubleCatch @ binding_15
        test_uncaughtException @ binding_2
      }
    }
  }

  function test_uncaughtException as 'test_uncaughtException' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_17 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references { print @ free print; print @ free print }
    }
  }

  function test_minimalTryCatch as 'test_minimalTryCatch' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_18 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_19 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_19
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references { s @ binding_19; s @ binding_19 }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Stack has exception; Pop exception }

        epilogue {  }

        references { s @ binding_19 }
      }
    }
  }

  function test_catchWithoutThrow as 'test_catchWithoutThrow' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_20 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_21 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_21
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references { s @ binding_21; s @ binding_21 }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Stack has exception; Pop exception }

        epilogue {  }

        references { s @ binding_21 }
      }
    }
  }

  function test_throwUnwinding as 'test_throwUnwinding' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_22 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_23 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_23
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          s @ binding_23; s @ binding_23; s @ binding_23
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue { StartTry }

          epilogue { !EndTry }

          references { s @ binding_23; s @ binding_23 }
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue { Stack has exception; Pop exception }

          epilogue {  }

          references { s @ binding_23 }
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Stack has exception; Pop exception }

        epilogue {  }

        references { s @ binding_23 }
      }
    }
  }

  function test_normalUnwinding as 'test_normalUnwinding' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_24 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_25 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_25
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          s @ binding_25; s @ binding_25; s @ binding_25
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue { StartTry }

          epilogue { !EndTry }

          references { s @ binding_25; s @ binding_25 }
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue { Stack has exception; Pop exception }

          epilogue {  }

          references { s @ binding_25 }
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Stack has exception; Pop exception }

        epilogue {  }

        references { s @ binding_25 }
      }
    }
  }

  function test_throwAcrossFrames as 'test_throwAcrossFrames' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_26 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 's' # binding_27 @ scoped[!0];
        function 'functionThatThrows' # binding_28 @ local[0]
      }

      prologue {
        func 'functionThatThrows' -> local[0] [capture scope]
      }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual
        s @ binding_27 using relative slot index 1
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          s @ binding_27 using relative slot index 1
          functionThatThrows @ binding_28
          s @ binding_27 using relative slot index 1
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Stack has exception; Pop exception }

        epilogue {  }

        references {
          s @ binding_27 using relative slot index 1
        }
      }

      closure function functionThatThrows as 'functionThatThrows' {
        [no closure scope]; [0 var declarations]

        bindings { this '#this' # binding_29 @ arg[0] }

        No references

        prologue {  }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            s @ binding_27 using relative slot index 1
            s @ binding_27 using relative slot index 1
          }
        }
      }
    }
  }

  function test_conditionalThrow as 'test_conditionalThrow' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_30 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_31 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_31
      }

      block {
        sameLifetimeAsParent: false

        bindings {
          writable let 'i' # binding_32 @ local[1]
        }

        prologue { new let -> local[1] }

        epilogue { Pop(1) }

        references { i @ binding_32; i @ binding_32 }

        block {
          sameLifetimeAsParent: false

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            s @ binding_31; i @ binding_32; s @ binding_31
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { StartTry }

            epilogue { !EndTry }

            references {
              s @ binding_31
              i @ binding_32
              s @ binding_31
              i @ binding_32
              s @ binding_31
            }

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { s @ binding_31 }
            }

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { s @ binding_31 }
            }

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { s @ binding_31 }
            }
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { Stack has exception; Pop exception }

            epilogue {  }

            references { s @ binding_31 }
          }
        }
      }
    }
  }

  function test_exceptionParameter as 'test_exceptionParameter' {
    [no closure scope]; [2 var declarations]

    bindings {
      this '#this' # binding_33 @ arg[0];
      var 'v0' # binding_34 @ local[0];
      var 'v1' # binding_35 @ local[1]
    }

    No references

    prologue { new var -> local[0]; new var -> local[1] }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 'x' # binding_36 @ local[2] }

      prologue { new let -> local[2] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; x @ binding_36
      }

      block {
        sameLifetimeAsParent: true

        bindings { let 'y' # binding_37 @ local[5] }

        prologue { StartTry; new let -> local[5] }

        epilogue { Pop(1); !EndTry }

        No references
      }

      block {
        sameLifetimeAsParent: true; [1 var declarations]

        bindings {
          catch-param 'e' # binding_38 @ local[3];
          var 'v2' # binding_39 @ local[4];
          let 'z' # binding_40 @ local[5]
        }

        prologue {
          Stack has exception
          new var -> local[4]
          new let -> local[5]
        }

        epilogue { Pop(3) }

        references { x @ binding_36; e @ binding_38 }
      }
    }
  }

  function test_exceptionParameterWithClosure as 'test_exceptionParameterWithClosure' {
    [closure scope with 1 slots]; [2 var declarations]

    bindings {
      this '#this' # binding_41 @ arg[0];
      var 'v0' # binding_42 @ local[0];
      var 'v1' # binding_43 @ local[1]
    }

    No references

    prologue {
      new scope[1]; new var -> local[0]; new var -> local[1]
    }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'x' # binding_44 @ local[2];
        writable let 'f' # binding_45 @ local[3]
      }

      prologue { new let -> local[2]; new let -> local[3] }

      epilogue { Pop(2) }

      references {
        assertEqual @ free assertEqual
        x @ binding_44
        assertEqual @ free assertEqual
        f @ binding_45
      }

      block {
        sameLifetimeAsParent: true

        bindings { let 'y' # binding_46 @ local[6] }

        prologue { StartTry; new let -> local[6] }

        epilogue { Pop(1); !EndTry }

        No references
      }

      block {
        sameLifetimeAsParent: true; [1 var declarations]

        bindings {
          catch-param 'e' # binding_47 @ scoped[!0];
          var 'v2' # binding_48 @ local[4];
          let 'z' # binding_49 @ local[5]
        }

        prologue {
          Stack has exception
          Pop exception -> scoped[+1]
          new var -> local[4]
          new let -> local[5]
        }

        epilogue { Pop(2) }

        references {
          x @ binding_44
          e @ binding_47 using relative slot index 1
          f @ binding_45
        }

        closure function '<anonymous>' as 'anonymous' {
          [no closure scope]; [0 var declarations]

          bindings {  }

          references {
            e @ binding_47 using relative slot index 1
          }

          prologue {  }
        }
      }
    }
  }

  function test_rethrow as 'test_rethrow' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_50 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        No references

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue { StartTry }

          epilogue { !EndTry }

          No references
        }

        block {
          sameLifetimeAsParent: true

          bindings {
            catch-param 'e' # binding_51 @ local[2]
          }

          prologue { Stack has exception }

          epilogue { Pop(1) }

          references { e @ binding_51 }
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings { catch-param 'e' # binding_52 @ local[0] }

        prologue { Stack has exception }

        epilogue { Pop(1) }

        references {
          assertEqual @ free assertEqual; e @ binding_52
        }
      }
    }
  }

  function test_breakOutOfTry as 'test_breakOutOfTry' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_53 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'flow' # binding_54 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; flow @ binding_54
      }

      block {
        sameLifetimeAsParent: false

        bindings {
          writable let 'i' # binding_55 @ local[1]
        }

        prologue { new let -> local[1] }

        epilogue { Pop(1) }

        references { i @ binding_55; i @ binding_55 }

        block {
          sameLifetimeAsParent: false

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            flow @ binding_54
            i @ binding_55
            flow @ binding_54
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { StartTry }

            epilogue { !EndTry }

            references { i @ binding_55 }

            block {
              sameLifetimeAsParent: true

              bindings { let 'x' # binding_56 @ local[4] }

              prologue { new let -> local[4] }

              epilogue { Pop(1) }

              references { flow @ binding_54 }
            }
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { Stack has exception; Pop exception }

            epilogue {  }

            references { flow @ binding_54 }
          }
        }
      }
    }
  }

  function test_breakOutOfTryWithClosure as 'test_breakOutOfTryWithClosure' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_57 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'flow' # binding_58 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; flow @ binding_58
      }

      block {
        sameLifetimeAsParent: false

        bindings {
          writable let 'i' # binding_59 @ scoped[!0]
        }

        prologue { new scope[1] }

        epilogue { ScopePop }

        references {
          i @ binding_59 using relative slot index 1
          i @ binding_59 using relative slot index 1
        }

        block {
          sameLifetimeAsParent: false

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            flow @ binding_58
            i @ binding_59 using relative slot index 1
            flow @ binding_58
          }

          closure function '<anonymous>' as 'anonymous1' {
            [no closure scope]; [0 var declarations]

            bindings {  }

            references {
              i @ binding_59 using relative slot index 1
            }

            prologue {  }
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { StartTry }

            epilogue { !EndTry }

            references {
              i @ binding_59 using relative slot index 1
            }

            block {
              sameLifetimeAsParent: true

              bindings { let 'x' # binding_60 @ local[3] }

              prologue { new let -> local[3] }

              epilogue { Pop(1) }

              references { flow @ binding_58 }
            }
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { Stack has exception; Pop exception }

            epilogue {  }

            references { flow @ binding_58 }
          }
        }
      }
    }
  }

  function test_breakOutOfCatch as 'test_breakOutOfCatch' {
    [no closure scope]; [6 var declarations]

    bindings {
      this '#this' # binding_61 @ arg[0];
      var 'v1' # binding_62 @ local[0];
      var 'v2' # binding_63 @ local[1];
      var 'v3' # binding_64 @ local[2];
      var 'v4' # binding_65 @ local[3];
      var 'v5' # binding_66 @ local[4];
      var 'v8' # binding_67 @ local[5]
    }

    No references

    prologue {
      new var -> local[0]
      new var -> local[1]
      new var -> local[2]
      new var -> local[3]
      new var -> local[4]
      new var -> local[5]
    }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'flow' # binding_68 @ local[6]
      }

      prologue { new let -> local[6] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; flow @ binding_68
      }

      block {
        sameLifetimeAsParent: false

        bindings {
          writable let 'i' # binding_69 @ local[7]
        }

        prologue { new let -> local[7] }

        epilogue { Pop(1) }

        references { i @ binding_69; i @ binding_69 }

        block {
          sameLifetimeAsParent: false

          bindings { let 'a' # binding_70 @ local[8] }

          prologue { new let -> local[8] }

          epilogue { Pop(1) }

          references {
            flow @ binding_68
            i @ binding_69
            flow @ binding_68
          }

          block {
            sameLifetimeAsParent: true

            bindings { let 'b' # binding_71 @ local[11] }

            prologue { StartTry; new let -> local[11] }

            epilogue { Pop(1); !EndTry }

            No references

            block {
              sameLifetimeAsParent: true

              bindings { let 'c' # binding_72 @ local[14] }

              prologue { StartTry; new let -> local[14] }

              epilogue { Pop(1); !EndTry }

              references { i @ binding_69 }

              block {
                sameLifetimeAsParent: true

                bindings {
                  let 'd' # binding_73 @ local[15]
                }

                prologue { new let -> local[15] }

                epilogue { Pop(1) }

                references { flow @ binding_68 }
              }
            }

            block {
              sameLifetimeAsParent: true
              [1 var declarations]

              bindings {
                catch-param 'e1' # binding_74 @ local[12];
                var 'v6' # binding_75 @ local[13];
                let 'x' # binding_76 @ local[14]
              }

              prologue {
                Stack has exception
                new var -> local[13]
                new let -> local[14]
              }

              epilogue { Pop(3) }

              references { flow @ binding_68 }
            }
          }

          block {
            sameLifetimeAsParent: true; [1 var declarations]

            bindings {
              catch-param 'e2' # binding_77 @ local[9];
              var 'v7' # binding_78 @ local[10]
            }

            prologue {
              Stack has exception; new var -> local[10]
            }

            epilogue { Pop(2) }

            references { flow @ binding_68 }
          }
        }
      }
    }
  }

  function test_breakOutOfDoubleCatch as 'test_breakOutOfDoubleCatch' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_79 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'flow' # binding_80 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; flow @ binding_80
      }

      block {
        sameLifetimeAsParent: false

        bindings {
          writable let 'i' # binding_81 @ local[1]
        }

        prologue { new let -> local[1] }

        epilogue { Pop(1) }

        references { i @ binding_81; i @ binding_81 }

        block {
          sameLifetimeAsParent: false

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            flow @ binding_80
            i @ binding_81
            flow @ binding_80
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { StartTry }

            epilogue { !EndTry }

            references { flow @ binding_80 }

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue { StartTry }

              epilogue { !EndTry }

              references {
                flow @ binding_80; i @ binding_81
              }

              block {
                sameLifetimeAsParent: true

                bindings {  }

                prologue {  }

                epilogue {  }

                references { flow @ binding_80 }
              }
            }

            block {
              sameLifetimeAsParent: true

              bindings {
                catch-param 'e' # binding_82 @ local[4]
              }

              prologue { Stack has exception }

              epilogue { Pop(1) }

              references { flow @ binding_80 }
            }
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { Stack has exception; Pop exception }

            epilogue {  }

            references { flow @ binding_80 }
          }
        }
      }
    }
  }
}
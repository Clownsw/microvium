[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'print'
[free var] 'assertEqual'
[global slot] 'thisModule'
[global slot] 'test_uncaughtException'
[global slot] 'test_minimalTryCatch'
[global slot] 'test_catchWithoutThrow'
[global slot] 'test_throwUnwinding'
[global slot] 'test_normalUnwinding'
[global slot] 'test_throwAcrossFrames'
[global slot] 'test_conditionalThrow'
[global slot] 'test_exceptionParameter'
[global slot] 'test_exceptionParameterWithClosure'
[global slot] 'test_rethrow'
[global slot] 'test_breakInsideTry'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'test_uncaughtException' # binding_2 @ global['test_uncaughtException'];
    function 'test_minimalTryCatch' # binding_3 @ global['test_minimalTryCatch'];
    function 'test_catchWithoutThrow' # binding_4 @ global['test_catchWithoutThrow'];
    function 'test_throwUnwinding' # binding_5 @ global['test_throwUnwinding'];
    function 'test_normalUnwinding' # binding_6 @ global['test_normalUnwinding'];
    function 'test_throwAcrossFrames' # binding_7 @ global['test_throwAcrossFrames'];
    function 'test_conditionalThrow' # binding_8 @ global['test_conditionalThrow'];
    function 'test_exceptionParameter' # binding_9 @ global['test_exceptionParameter'];
    function 'test_exceptionParameterWithClosure' # binding_10 @ global['test_exceptionParameterWithClosure'];
    function 'test_rethrow' # binding_11 @ global['test_rethrow'];
    function 'test_breakInsideTry' # binding_12 @ global['test_breakInsideTry']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]
    func 'test_uncaughtException' -> global['test_uncaughtException']
    func 'test_minimalTryCatch' -> global['test_minimalTryCatch']
    func 'test_catchWithoutThrow' -> global['test_catchWithoutThrow']
    func 'test_throwUnwinding' -> global['test_throwUnwinding']
    func 'test_normalUnwinding' -> global['test_normalUnwinding']
    func 'test_throwAcrossFrames' -> global['test_throwAcrossFrames']
    func 'test_conditionalThrow' -> global['test_conditionalThrow']
    func 'test_exceptionParameter' -> global['test_exceptionParameter']
    func 'test_exceptionParameterWithClosure' -> global['test_exceptionParameterWithClosure']
    func 'test_rethrow' -> global['test_rethrow']
    func 'test_breakInsideTry' -> global['test_breakInsideTry']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_13 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        test_minimalTryCatch @ binding_3
        test_catchWithoutThrow @ binding_4
        test_throwUnwinding @ binding_5
        test_normalUnwinding @ binding_6
        test_throwAcrossFrames @ binding_7
        test_conditionalThrow @ binding_8
        test_exceptionParameter @ binding_9
        test_exceptionParameterWithClosure @ binding_10
        test_rethrow @ binding_11
        test_breakInsideTry @ binding_12
        test_uncaughtException @ binding_2
      }
    }
  }

  function test_uncaughtException as 'test_uncaughtException' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_14 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references { print @ free print; print @ free print }
    }
  }

  function test_minimalTryCatch as 'test_minimalTryCatch' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_15 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_16 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_16
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue { !EndTry }

        references { s @ binding_16; s @ binding_16 }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Pop exception }

        epilogue {  }

        references { s @ binding_16 }
      }
    }
  }

  function test_catchWithoutThrow as 'test_catchWithoutThrow' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_17 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_18 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_18
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue { !EndTry }

        references { s @ binding_18; s @ binding_18 }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Pop exception }

        epilogue {  }

        references { s @ binding_18 }
      }
    }
  }

  function test_throwUnwinding as 'test_throwUnwinding' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_19 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_20 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_20
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue { !EndTry }

        references {
          s @ binding_20; s @ binding_20; s @ binding_20
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue {  }

          epilogue { !EndTry }

          references { s @ binding_20; s @ binding_20 }
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue { Pop exception }

          epilogue {  }

          references { s @ binding_20 }
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Pop exception }

        epilogue {  }

        references { s @ binding_20 }
      }
    }
  }

  function test_normalUnwinding as 'test_normalUnwinding' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_21 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_22 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_22
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue { !EndTry }

        references {
          s @ binding_22; s @ binding_22; s @ binding_22
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue {  }

          epilogue { !EndTry }

          references { s @ binding_22; s @ binding_22 }
        }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue { Pop exception }

          epilogue {  }

          references { s @ binding_22 }
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Pop exception }

        epilogue {  }

        references { s @ binding_22 }
      }
    }
  }

  function test_throwAcrossFrames as 'test_throwAcrossFrames' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_23 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 's' # binding_24 @ scoped[!0];
        function 'functionThatThrows' # binding_25 @ local[0]
      }

      prologue {
        func 'functionThatThrows' -> local[0] [capture scope]
      }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual
        s @ binding_24 using relative slot index 1
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue { !EndTry }

        references {
          s @ binding_24 using relative slot index 1
          functionThatThrows @ binding_25
          s @ binding_24 using relative slot index 1
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue { Pop exception }

        epilogue {  }

        references {
          s @ binding_24 using relative slot index 1
        }
      }

      closure function functionThatThrows as 'functionThatThrows' {
        [no closure scope]; [0 var declarations]

        bindings { this '#this' # binding_26 @ arg[0] }

        No references

        prologue {  }

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            s @ binding_24 using relative slot index 1
            s @ binding_24 using relative slot index 1
          }
        }
      }
    }
  }

  function test_conditionalThrow as 'test_conditionalThrow' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_27 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 's' # binding_28 @ local[0] }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; s @ binding_28
      }

      block {
        sameLifetimeAsParent: false

        bindings {
          writable let 'i' # binding_29 @ local[1]
        }

        prologue { new let -> local[1] }

        epilogue { Pop(1) }

        references { i @ binding_29; i @ binding_29 }

        block {
          sameLifetimeAsParent: false

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            s @ binding_28; i @ binding_29; s @ binding_28
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue { !EndTry }

            references {
              s @ binding_28
              i @ binding_29
              s @ binding_28
              i @ binding_29
              s @ binding_28
            }

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { s @ binding_28 }
            }

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { s @ binding_28 }
            }

            block {
              sameLifetimeAsParent: true

              bindings {  }

              prologue {  }

              epilogue {  }

              references { s @ binding_28 }
            }
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { Pop exception }

            epilogue {  }

            references { s @ binding_28 }
          }
        }
      }
    }
  }

  function test_exceptionParameter as 'test_exceptionParameter' {
    [no closure scope]; [2 var declarations]

    bindings {
      this '#this' # binding_30 @ arg[0];
      var 'v0' # binding_31 @ local[0];
      var 'v1' # binding_32 @ local[1]
    }

    No references

    prologue { new var -> local[0]; new var -> local[1] }

    block {
      sameLifetimeAsParent: true

      bindings { writable let 'x' # binding_33 @ local[2] }

      prologue { new let -> local[2] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; x @ binding_33
      }

      block {
        sameLifetimeAsParent: true

        bindings { let 'y' # binding_34 @ local[5] }

        prologue { new let -> local[5] }

        epilogue { !EndTry }

        No references
      }

      block {
        sameLifetimeAsParent: true; [1 var declarations]

        bindings {
          catch-param 'e' # binding_35 @ local[3];
          var 'v2' # binding_36 @ local[4];
          let 'z' # binding_37 @ local[5]
        }

        prologue {
          new var -> local[4]; new let -> local[5]
        }

        epilogue { Pop(3) }

        references { x @ binding_33; e @ binding_35 }
      }
    }
  }

  function test_exceptionParameterWithClosure as 'test_exceptionParameterWithClosure' {
    [closure scope with 1 slots]; [2 var declarations]

    bindings {
      this '#this' # binding_38 @ arg[0];
      var 'v0' # binding_39 @ local[0];
      var 'v1' # binding_40 @ local[1]
    }

    No references

    prologue {
      new scope[1]; new var -> local[0]; new var -> local[1]
    }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'x' # binding_41 @ local[2];
        writable let 'f' # binding_42 @ local[3]
      }

      prologue { new let -> local[2]; new let -> local[3] }

      epilogue { Pop(2) }

      references {
        assertEqual @ free assertEqual
        x @ binding_41
        assertEqual @ free assertEqual
        f @ binding_42
      }

      block {
        sameLifetimeAsParent: true

        bindings { let 'y' # binding_43 @ local[6] }

        prologue { new let -> local[6] }

        epilogue { !EndTry }

        No references
      }

      block {
        sameLifetimeAsParent: true; [1 var declarations]

        bindings {
          catch-param 'e' # binding_44 @ scoped[!0];
          var 'v2' # binding_45 @ local[4];
          let 'z' # binding_46 @ local[5]
        }

        prologue {
          Pop exception -> scoped[+1]
          new var -> local[4]
          new let -> local[5]
        }

        epilogue { Pop(2) }

        references {
          x @ binding_41
          e @ binding_44 using relative slot index 1
          f @ binding_42
        }

        closure function '<anonymous>' as 'anonymous' {
          [no closure scope]; [0 var declarations]

          bindings {  }

          references {
            e @ binding_44 using relative slot index 1
          }

          prologue {  }
        }
      }
    }
  }

  function test_rethrow as 'test_rethrow' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_47 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameLifetimeAsParent: true

        bindings {  }

        prologue {  }

        epilogue { !EndTry }

        No references

        block {
          sameLifetimeAsParent: true

          bindings {  }

          prologue {  }

          epilogue { !EndTry }

          No references
        }

        block {
          sameLifetimeAsParent: true

          bindings {
            catch-param 'e' # binding_48 @ local[2]
          }

          prologue {  }

          epilogue { Pop(1) }

          references { e @ binding_48 }
        }
      }

      block {
        sameLifetimeAsParent: true

        bindings { catch-param 'e' # binding_49 @ local[0] }

        prologue {  }

        epilogue { Pop(1) }

        references {
          assertEqual @ free assertEqual; e @ binding_49
        }
      }
    }
  }

  function test_breakInsideTry as 'test_breakInsideTry' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_50 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {
        writable let 'flow' # binding_51 @ local[0]
      }

      prologue { new let -> local[0] }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual; flow @ binding_51
      }

      block {
        sameLifetimeAsParent: false

        bindings {
          writable let 'i' # binding_52 @ local[1]
        }

        prologue { new let -> local[1] }

        epilogue { Pop(1) }

        references { i @ binding_52; i @ binding_52 }

        block {
          sameLifetimeAsParent: false

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            flow @ binding_51
            i @ binding_52
            flow @ binding_51
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue {  }

            epilogue { !EndTry }

            references { i @ binding_52 }

            block {
              sameLifetimeAsParent: true

              bindings { let 'x' # binding_53 @ local[4] }

              prologue { new let -> local[4] }

              epilogue { Pop(1) }

              references { flow @ binding_51 }
            }
          }

          block {
            sameLifetimeAsParent: true

            bindings {  }

            prologue { Pop exception }

            epilogue {  }

            references { flow @ binding_51 }
          }
        }
      }
    }
  }
}
export 0 = &function ['./test/end-to-end/tests/conversions.test.mvms:run'];

slot ['./test/end-to-end/tests/conversions.test.mvms:testConvertToBoolean'] = &function ['./test/end-to-end/tests/conversions.test.mvms:testConvertToBoolean'];
slot ['./test/end-to-end/tests/conversions.test.mvms:testConvertToNumber'] = &function ['./test/end-to-end/tests/conversions.test.mvms:testConvertToNumber'];
slot ['global:Number'] = &allocation 2;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;

function ['./test/end-to-end/tests/conversions.test.mvms:run']() {
  entry:
    LoadGlobal(name './test/end-to-end/tests/conversions.test.mvms:testConvertToNumber');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name './test/end-to-end/tests/conversions.test.mvms:testConvertToBoolean');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/conversions.test.mvms:testConvertToBoolean']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 1);
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit true);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 0);
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit false);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit -1);
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit true);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit undefined);
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit false);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit null);
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit false);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    ObjectNew();
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit true);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    ArrayNew();
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit true);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '');
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit false);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'x');
    UnOp(op '!');
    UnOp(op '!');
    Literal(lit true);
    Call(count 3);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/conversions.test.mvms:testConvertToNumber']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 1);
    Literal(lit 1);
    BinOp(op '+');
    UnOp(op '+');
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 1.1);
    Literal(lit 2);
    BinOp(op '+');
    UnOp(op '+');
    Literal(lit 3.1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assert');
    Literal(lit undefined);
    LoadGlobal(name 'global:Number');
    Dup();
    Literal(lit 'isNaN');
    ObjectGet();
    LoadVar(index 2);
    Literal(lit undefined);
    UnOp(op '+');
    Call(count 2);
    StoreVar(index 2);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assert');
    Literal(lit undefined);
    LoadGlobal(name 'global:Number');
    Dup();
    Literal(lit 'isNaN');
    ObjectGet();
    LoadVar(index 2);
    ObjectNew();
    UnOp(op '+');
    Call(count 2);
    StoreVar(index 2);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit null);
    UnOp(op '+');
    Literal(lit 0);
    Call(count 3);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['<builtin>:Number_isNaN']() {
  entry:
    LoadArg(index 1);
    // NaN is the only value that is not equal to itself
    LoadVar(index 0);
    LoadVar(index 0);
    BinOp(op '!==');
    Return();
}

allocation 2 = {
  isNaN: &function ['<builtin>:Number_isNaN'],
};
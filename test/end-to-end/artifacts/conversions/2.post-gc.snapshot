export 0 = &function ['./test/end-to-end/tests/conversions.test.mvms:run'];

slot ['./test/end-to-end/tests/conversions.test.mvms:testConvertToNumber'] = &function ['./test/end-to-end/tests/conversions.test.mvms:testConvertToNumber'];
slot ['global:Infinity'] = Infinity;
slot ['global:NaN'] = NaN;
slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:isNaN'] = host function 65533;
slot ['global:overflowChecks'] = false;
slot ['global:print'] = host function 1;
slot ['global:undefined'] = undefined;
slot ['global:vmExport'] = &ephemeral vmExport;

function ['./test/end-to-end/tests/conversions.test.mvms:run']() {
  entry:
    LoadGlobal(name './test/end-to-end/tests/conversions.test.mvms:testConvertToNumber');
    Call(count 0);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/conversions.test.mvms:testConvertToNumber']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 1);
    Literal(lit 1);
    BinOp(op '+');
    UnOp(op '+');
    Literal(lit 2);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit 1.1);
    Literal(lit 2);
    BinOp(op '+');
    UnOp(op '+');
    Literal(lit 3.1);
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assert');
    LoadGlobal(name 'global:isNaN');
    Literal(lit undefined);
    UnOp(op '+');
    Call(count 1);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 1 = {
};
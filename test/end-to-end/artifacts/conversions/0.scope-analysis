[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'assertEqual'
[free var] 'assert'
[free var] 'Number'
[free var] 'undefined'
[global slot] 'thisModule'
[global slot] 'testConvertToNumber'
[global slot] 'testConvertToBoolean'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'testConvertToNumber' # binding_2 @ global['testConvertToNumber'];
    function 'testConvertToBoolean' # binding_3 @ global['testConvertToBoolean']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]
    func 'testConvertToNumber' -> global['testConvertToNumber']
    func 'testConvertToBoolean' -> global['testConvertToBoolean']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_4 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        testConvertToNumber @ binding_2
        testConvertToBoolean @ binding_3
      }
    }
  }

  function testConvertToNumber as 'testConvertToNumber' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_5 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assert @ free assert
        Number @ free Number
        undefined @ free undefined
        assert @ free assert
        Number @ free Number
        assertEqual @ free assertEqual
      }
    }
  }

  function testConvertToBoolean as 'testConvertToBoolean' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_6 @ arg[0] }

    No references

    prologue {  }

    block {
      sameLifetimeAsParent: true

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        undefined @ free undefined
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
        assertEqual @ free assertEqual
      }
    }
  }
}
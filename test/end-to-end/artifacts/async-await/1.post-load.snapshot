export 0 = &function run;

slot ['global:print'] = host function 1;
slot myAsyncFunc = &function myAsyncFunc;
slot test_minimal = &function test_minimal;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function myAsyncFunc() {
  entry:
    AsyncStart(count 2, true);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'Inside async function');
    Call(count 2, true);
    Literal(lit undefined);
    AsyncReturn();
}

function run() {
  entry:
    LoadGlobal(name 'test_minimal');
    Literal(lit undefined);
    Call(count 1, true);
    Literal(lit undefined);
    Return();
}

// *
 * Void-calling async function with no await points or variable bindings
function test_minimal() {
  entry:
    // Void-calling async func (does not require promise support or job queue support)
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'Before async function');
    Call(count 2, true);
    LoadGlobal(name 'myAsyncFunc');
    Literal(lit undefined);
    Call(count 1, true);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'After async synchronous return');
    Call(count 2, true);
    Literal(lit undefined);
    Return();
}

allocation 5 = {
  push: &function Array_push,
};
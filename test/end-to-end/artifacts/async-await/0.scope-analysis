[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'asyncTestComplete'
[free var] 'undefined'
[free var] 'print'
[free var] 'assertEqual'
[free var] 'assert'
[global slot] 'thisModule'
[global slot] 'runAsync'
[global slot] 'test_minimal'
[global slot] 'test_awaitReturnValue'
[global slot] 'test_asyncVariablesFromNested'
[global slot] 'test_asyncInExpression'
[global slot] 'test_asyncFunctionArguments'
[global slot] 'test_asyncThisArgument'
[global slot] 'test_asyncArrowFunctions'
[global slot] 'test_implicitReturn'
[global slot] 'test_asyncClosure'
[global slot] 'test_syncClosureInAsync'
[global slot] 'test_exceptionsBasic'
[global slot] 'test_exceptionsNested'
[global slot] 'test_multipleJobs'
[global slot] 'test_nestedClosure'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'runAsync' # binding_2 @ global['runAsync'];
    function 'test_minimal' # binding_3 @ global['test_minimal'];
    function 'test_awaitReturnValue' # binding_4 @ global['test_awaitReturnValue'];
    function 'test_asyncVariablesFromNested' # binding_5 @ global['test_asyncVariablesFromNested'];
    function 'test_asyncInExpression' # binding_6 @ global['test_asyncInExpression'];
    function 'test_asyncFunctionArguments' # binding_7 @ global['test_asyncFunctionArguments'];
    function 'test_asyncThisArgument' # binding_8 @ global['test_asyncThisArgument'];
    function 'test_asyncArrowFunctions' # binding_9 @ global['test_asyncArrowFunctions'];
    function 'test_implicitReturn' # binding_10 @ global['test_implicitReturn'];
    function 'test_asyncClosure' # binding_11 @ global['test_asyncClosure'];
    function 'test_syncClosureInAsync' # binding_12 @ global['test_syncClosureInAsync'];
    function 'test_exceptionsBasic' # binding_13 @ global['test_exceptionsBasic'];
    function 'test_exceptionsNested' # binding_14 @ global['test_exceptionsNested'];
    function 'test_multipleJobs' # binding_15 @ global['test_multipleJobs'];
    function 'test_nestedClosure' # binding_16 @ global['test_nestedClosure']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]
    func 'runAsync' -> global['runAsync']
    func 'test_minimal' -> global['test_minimal']
    func 'test_awaitReturnValue' -> global['test_awaitReturnValue']
    func 'test_asyncVariablesFromNested' -> global['test_asyncVariablesFromNested']
    func 'test_asyncInExpression' -> global['test_asyncInExpression']
    func 'test_asyncFunctionArguments' -> global['test_asyncFunctionArguments']
    func 'test_asyncThisArgument' -> global['test_asyncThisArgument']
    func 'test_asyncArrowFunctions' -> global['test_asyncArrowFunctions']
    func 'test_implicitReturn' -> global['test_implicitReturn']
    func 'test_asyncClosure' -> global['test_asyncClosure']
    func 'test_syncClosureInAsync' -> global['test_syncClosureInAsync']
    func 'test_exceptionsBasic' -> global['test_exceptionsBasic']
    func 'test_exceptionsNested' -> global['test_exceptionsNested']
    func 'test_multipleJobs' -> global['test_multipleJobs']
    func 'test_nestedClosure' -> global['test_nestedClosure']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_17 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      references { runAsync @ binding_2 }
    }
  }

  function runAsync as 'runAsync' {
    [closure scope with 3 slots: async-continuation, async-callback, this]
    [0 var declarations]

    bindings { this '#this' # binding_18 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(3, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          test_minimal @ binding_3
          test_awaitReturnValue @ binding_4
          test_asyncVariablesFromNested @ binding_5
          test_asyncInExpression @ binding_6
          test_asyncFunctionArguments @ binding_7
          test_asyncThisArgument @ binding_8
          test_asyncArrowFunctions @ binding_9
          test_implicitReturn @ binding_10
          test_asyncClosure @ binding_11
          test_syncClosureInAsync @ binding_12
          test_exceptionsBasic @ binding_13
          test_exceptionsNested @ binding_14
          test_multipleJobs @ binding_15
          test_nestedClosure @ binding_16
          asyncTestComplete @ free asyncTestComplete
          undefined @ free undefined
        }
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { catch-param 'e' # binding_19 @ local[3] }

        prologue { Stack has exception }

        epilogue { Pop(1) }

        references {
          asyncTestComplete @ free asyncTestComplete
          e @ binding_19
        }
      }
    }
  }

  function test_minimal as 'test_minimal' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_20 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        function 'myAsyncFunc' # binding_21 @ local[0]
      }

      prologue { func 'myAsyncFunc' -> local[0] }

      epilogue { Pop(1) }

      references {
        print @ free print
        myAsyncFunc @ binding_21
        print @ free print
      }

      function myAsyncFunc as 'myAsyncFunc' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_22 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references { print @ free print }
        }
      }
    }
  }

  function test_awaitReturnValue as 'test_awaitReturnValue' {
    [closure scope with 3 slots: async-continuation, async-callback, this]
    [0 var declarations]

    bindings { this '#this' # binding_23 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(3, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'result' # binding_24 @ local[4];
        function 'asyncFunction' # binding_25 @ local[3]
      }

      prologue {
        func 'asyncFunction' -> local[3]
        new let -> local[4]
      }

      epilogue { Pop(2) }

      references {
        asyncFunction @ binding_25
        assertEqual @ free assertEqual
        result @ binding_24
      }

      function asyncFunction as 'asyncFunction' {
        [closure scope with 4 slots: async-continuation, async-callback, this, arg]
        [0 var declarations]

        bindings {
          this '#this' # binding_26 @ scoped[!2];
          param 'arg' # binding_27 @ scoped[!3]
        }

        No references

        prologue {
          AsyncStart(4, false)
          arg[0] as this -> scoped[+2]
          arg[1] -> scoped[+3]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            arg @ binding_27 using relative slot index 3
          }
        }
      }
    }
  }

  function test_asyncVariablesFromNested as 'test_asyncVariablesFromNested' {
    [closure scope with 6 slots: async-continuation,
    async-callback,
    this,
    nested2,
    x1,
    y1]
    [0 var declarations]

    bindings { this '#this' # binding_28 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(6, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 'x1' # binding_29 @ scoped[!4];
        writable let 'x2' # binding_30 @ local[3];
        function 'nested2' # binding_31 @ scoped[!3]
      }

      prologue {
        func 'nested2' -> scoped[+3] [non-embedded closure]
        new let -> local[3]
      }

      epilogue { Pop(1) }

      references {
        assertEqual @ free assertEqual
        x1 @ binding_29 using relative slot index 4
        assertEqual @ free assertEqual
        x2 @ binding_30
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {
          writable let 'y1' # binding_32 @ scoped[!5];
          writable let 'y2' # binding_33 @ local[7];
          function 'nestedFunc' # binding_34 @ local[6]
        }

        prologue {
          StartTry
          func 'nestedFunc' -> local[6] [non-embedded closure]
          new let -> local[7]
        }

        epilogue { !EndTry }

        references {
          nestedFunc @ binding_34
          x1 @ binding_29 using relative slot index 4
          y1 @ binding_32 using relative slot index 5
          x2 @ binding_30
          y2 @ binding_33
          assertEqual @ free assertEqual
          y1 @ binding_32 using relative slot index 5
          assertEqual @ free assertEqual
          y2 @ binding_33
        }

        closure function nestedFunc as 'nestedFunc' {
          [closure scope with 4 slots: async-continuation,
          async-callback,
          this,
          parent-reference]
          [0 var declarations]

          bindings {
            this '#this' # binding_35 @ scoped[!2]
          }

          No references

          prologue {
            AsyncStart(4, true)
            arg[0] as this -> scoped[+2]
          }

          block {
            sameInstanceCountAsParent: true
            [no closure scope]

            bindings {  }

            prologue {  }

            epilogue {  }

            references {
              x1 @ binding_29 using relative slot index 10
              y1 @ binding_32 using relative slot index 11
              nested2 @ binding_31 using relative slot index 9
              x1 @ binding_29 using relative slot index 10
              y1 @ binding_32 using relative slot index 11
            }
          }
        }
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {  }

        prologue { Stack has exception; Pop exception }

        epilogue {  }

        references {
          x1 @ binding_29 using relative slot index 4
          x2 @ binding_30
        }
      }

      closure function nested2 as 'nested2' {
        [closure scope with 4 slots: async-continuation,
        async-callback,
        this,
        parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_36 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(4, true); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            x1 @ binding_29 using relative slot index 10
          }
        }
      }
    }
  }

  function test_asyncInExpression as 'test_asyncInExpression' {
    [closure scope with 3 slots: async-continuation, async-callback, this]
    [0 var declarations]

    bindings { this '#this' # binding_37 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(3, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'x' # binding_38 @ local[6];
        readonly const 'y' # binding_39 @ local[7];
        function 'nestedFunc' # binding_40 @ local[3];
        function 'nestedFunc2' # binding_41 @ local[4];
        function 'nestedFunc3' # binding_42 @ local[5]
      }

      prologue {
        func 'nestedFunc1' -> local[3]
        func 'nestedFunc2' -> local[4]
        func 'nestedFunc3' -> local[5]
        new let -> local[6]
        new let -> local[7]
      }

      epilogue { Pop(5) }

      references {
        nestedFunc @ binding_40
        nestedFunc2 @ binding_41
        assertEqual @ free assertEqual
        x @ binding_38
        assertEqual @ free assertEqual
        x @ binding_38
        assertEqual @ free assertEqual
        x @ binding_38
        assertEqual @ free assertEqual
        x @ binding_38
        assertEqual @ free assertEqual
        x @ binding_38
        nestedFunc3 @ binding_42
        nestedFunc @ binding_40
        nestedFunc2 @ binding_41
        assertEqual @ free assertEqual
        y @ binding_39
      }

      function nestedFunc as 'nestedFunc1' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_43 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }

      function nestedFunc2 as 'nestedFunc2' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_44 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }

      function nestedFunc3 as 'nestedFunc3' {
        [closure scope with 7 slots: async-continuation, async-callback, this, a, b, c, d]
        [0 var declarations]

        bindings {
          this '#this' # binding_45 @ scoped[!2];
          param 'a' # binding_46 @ scoped[!3];
          param 'b' # binding_47 @ scoped[!4];
          param 'c' # binding_48 @ scoped[!5];
          param 'd' # binding_49 @ scoped[!6]
        }

        No references

        prologue {
          AsyncStart(7, false)
          arg[0] as this -> scoped[+2]
          arg[1] -> scoped[+3]
          arg[2] -> scoped[+4]
          arg[3] -> scoped[+5]
          arg[4] -> scoped[+6]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            a @ binding_46 using relative slot index 3
            b @ binding_47 using relative slot index 4
            c @ binding_48 using relative slot index 5
            d @ binding_49 using relative slot index 6
          }
        }
      }
    }
  }

  function test_asyncFunctionArguments as 'test_asyncFunctionArguments' {
    [closure scope with 4 slots: async-continuation, async-callback, this, nestedFunc2]
    [0 var declarations]

    bindings { this '#this' # binding_50 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(4, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        function 'nestedFunc' # binding_51 @ local[3];
        function 'nestedFunc2' # binding_52 @ scoped[!3]
      }

      prologue {
        func 'nestedFunc4' -> local[3] [non-embedded closure]
        func 'nestedFunc5' -> scoped[+3]
      }

      epilogue { Pop(1) }

      references { nestedFunc @ binding_51 }

      closure function nestedFunc as 'nestedFunc4' {
        [closure scope with 7 slots: async-continuation,
        async-callback,
        this,
        a,
        b,
        c,
        parent-reference]
        [0 var declarations]

        bindings {
          this '#this' # binding_53 @ scoped[!2];
          param 'a' # binding_54 @ scoped[!3];
          param 'b' # binding_55 @ scoped[!4];
          param 'c' # binding_56 @ scoped[!5]
        }

        No references

        prologue {
          AsyncStart(7, true)
          arg[0] as this -> scoped[+2]
          arg[1] -> scoped[+3]
          arg[2] -> scoped[+4]
          arg[3] -> scoped[+5]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            assertEqual @ free assertEqual
            a @ binding_54 using relative slot index 3
            assertEqual @ free assertEqual
            b @ binding_55 using relative slot index 4
            assertEqual @ free assertEqual
            c @ binding_56 using relative slot index 5
            nestedFunc2 @ binding_52 using relative slot index 12
            assertEqual @ free assertEqual
            a @ binding_54 using relative slot index 3
            assertEqual @ free assertEqual
            b @ binding_55 using relative slot index 4
            assertEqual @ free assertEqual
            c @ binding_56 using relative slot index 5
          }
        }
      }

      function nestedFunc2 as 'nestedFunc5' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_57 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_asyncThisArgument as 'test_asyncThisArgument' {
    [closure scope with 4 slots: async-continuation, async-callback, this, nestedFunc2]
    [0 var declarations]

    bindings { this '#this' # binding_58 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(4, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'obj' # binding_59 @ local[4];
        function 'nestedFunc' # binding_60 @ local[3];
        function 'nestedFunc2' # binding_61 @ scoped[!3]
      }

      prologue {
        func 'nestedFunc6' -> local[3] [non-embedded closure]
        func 'nestedFunc7' -> scoped[+3]
        new let -> local[4]
      }

      epilogue { Pop(2) }

      references {
        nestedFunc @ binding_60; obj @ binding_59
      }

      closure function nestedFunc as 'nestedFunc6' {
        [closure scope with 5 slots: async-continuation,
        async-callback,
        this,
        c,
        parent-reference]
        [0 var declarations]

        bindings {
          this '#this' # binding_62 @ scoped[!2];
          param 'c' # binding_63 @ scoped[!3]
        }

        No references

        prologue {
          AsyncStart(5, true)
          arg[0] as this -> scoped[+2]
          arg[1] -> scoped[+3]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            assertEqual @ free assertEqual
            '#this' @ binding_62 using relative slot index 2
            assertEqual @ free assertEqual
            '#this' @ binding_62 using relative slot index 2
            assertEqual @ free assertEqual
            c @ binding_63 using relative slot index 3
            nestedFunc2 @ binding_61 using relative slot index 10
            assertEqual @ free assertEqual
            '#this' @ binding_62 using relative slot index 2
            assertEqual @ free assertEqual
            '#this' @ binding_62 using relative slot index 2
            assertEqual @ free assertEqual
            c @ binding_63 using relative slot index 3
          }
        }
      }

      function nestedFunc2 as 'nestedFunc7' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_64 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_asyncArrowFunctions as 'test_asyncArrowFunctions' {
    [closure scope with 5 slots: async-continuation, async-callback, this, nestedFunc, c]
    [0 var declarations]

    bindings { this '#this' # binding_65 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(5, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        let 'c' # binding_66 @ scoped[!4];
        readonly const 'func' # binding_67 @ local[3];
        readonly const 'result' # binding_68 @ local[4];
        function 'nestedFunc' # binding_69 @ scoped[!3]
      }

      prologue {
        func 'nestedFunc8' -> scoped[+3]
        new let -> local[3]
        new let -> local[4]
      }

      epilogue { Pop(2) }

      references {
        func @ binding_67
        assertEqual @ free assertEqual
        result @ binding_68
      }

      closure function '<anonymous>' as 'anonymous' {
        [closure scope with 5 slots: async-continuation,
        async-callback,
        a,
        b,
        parent-reference]
        [0 var declarations]

        bindings {
          param 'a' # binding_70 @ scoped[!2];
          param 'b' # binding_71 @ scoped[!3]
        }

        No references

        prologue {
          AsyncStart(5, true)
          arg[1] -> scoped[+2]
          arg[2] -> scoped[+3]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            nestedFunc @ binding_69 using relative slot index 10
            a @ binding_70 using relative slot index 2
            b @ binding_71 using relative slot index 3
            c @ binding_66 using relative slot index 11
          }
        }
      }

      function nestedFunc as 'nestedFunc8' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_72 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_implicitReturn as 'test_implicitReturn' {
    [closure scope with 4 slots: async-continuation, async-callback, this, nestedFunc]
    [0 var declarations]

    bindings { this '#this' # binding_73 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(4, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'result1' # binding_74 @ local[7];
        readonly const 'result2' # binding_75 @ local[8];
        readonly const 'result3' # binding_76 @ local[9];
        readonly const 'result4' # binding_77 @ local[10];
        function 'implicitReturn1' # binding_78 @ local[3];
        function 'explicitReturn1' # binding_79 @ local[4];
        function 'implicitReturn2' # binding_80 @ local[5];
        function 'explicitReturn2' # binding_81 @ local[6];
        function 'nestedFunc' # binding_82 @ scoped[!3]
      }

      prologue {
        func 'implicitReturn1' -> local[3]
        func 'explicitReturn1' -> local[4]
        func 'implicitReturn2' -> local[5] [non-embedded closure]
        func 'explicitReturn2' -> local[6] [non-embedded closure]
        func 'nestedFunc9' -> scoped[+3]
        new let -> local[7]
        new let -> local[8]
        new let -> local[9]
        new let -> local[10]
      }

      epilogue { Pop(8) }

      references {
        implicitReturn1 @ binding_78
        explicitReturn1 @ binding_79
        implicitReturn2 @ binding_80
        explicitReturn2 @ binding_81
        assertEqual @ free assertEqual
        result1 @ binding_74
        undefined @ free undefined
        assertEqual @ free assertEqual
        result2 @ binding_75
        assertEqual @ free assertEqual
        result3 @ binding_76
        undefined @ free undefined
        assertEqual @ free assertEqual
        result4 @ binding_77
      }

      function implicitReturn1 as 'implicitReturn1' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_83 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }

      function explicitReturn1 as 'explicitReturn1' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_84 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }

      closure function implicitReturn2 as 'implicitReturn2' {
        [closure scope with 4 slots: async-continuation,
        async-callback,
        this,
        parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_85 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(4, true); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            nestedFunc @ binding_82 using relative slot index 9
          }
        }
      }

      closure function explicitReturn2 as 'explicitReturn2' {
        [closure scope with 4 slots: async-continuation,
        async-callback,
        this,
        parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_86 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(4, true); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            nestedFunc @ binding_82 using relative slot index 9
          }
        }
      }

      function nestedFunc as 'nestedFunc9' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_87 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_asyncClosure as 'test_asyncClosure' {
    [closure scope with 5 slots: async-continuation, async-callback, this, nestedFunc, c]
    [0 var declarations]

    bindings { this '#this' # binding_88 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(5, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        let 'c' # binding_89 @ scoped[!4];
        readonly const 'obj' # binding_90 @ local[4];
        function 'method' # binding_91 @ local[3];
        readonly const 'result' # binding_92 @ local[5];
        function 'nestedFunc' # binding_93 @ scoped[!3]
      }

      prologue {
        func 'method' -> local[3] [non-embedded closure]
        func 'nestedFunc10' -> scoped[+3]
        new let -> local[4]
        new let -> local[5]
      }

      epilogue { Pop(3) }

      references {
        method @ binding_91
        obj @ binding_90
        assertEqual @ free assertEqual
        result @ binding_92
      }

      closure function method as 'method' {
        [closure scope with 3 slots: embedded-closure:anonymous, this, parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_94 @ scoped[!1] }

        No references

        prologue {
          ScopePush(3); arg[0] as this -> scoped[+1]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references

          embedded closure function '<anonymous>' as 'anonymous1' {
            [closure scope with 5 slots: async-continuation,
            async-callback,
            a,
            b,
            parent-reference]
            [0 var declarations]

            bindings {
              param 'a' # binding_95 @ scoped[!2];
              param 'b' # binding_96 @ scoped[!3]
            }

            No references

            prologue {
              AsyncStart(5, true)
              arg[1] -> scoped[+2]
              arg[2] -> scoped[+3]
            }

            block {
              sameInstanceCountAsParent: true
              [no closure scope]

              bindings { let 'e' # binding_97 @ local[3] }

              prologue { new let -> local[3] }

              epilogue { Pop(1) }

              references {
                nestedFunc @ binding_93 using relative slot index 13
                a @ binding_95 using relative slot index 2
                b @ binding_96 using relative slot index 3
                c @ binding_89 using relative slot index 14
                '#this' @ binding_94 using relative slot index 6
                e @ binding_97
              }
            }
          }
        }
      }

      function nestedFunc as 'nestedFunc10' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_98 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_syncClosureInAsync as 'test_syncClosureInAsync' {
    [closure scope with 4 slots: async-continuation, async-callback, this, c]
    [0 var declarations]

    bindings { this '#this' # binding_99 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(4, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        let 'c' # binding_100 @ scoped[!3];
        readonly const 'obj' # binding_101 @ local[5];
        function 'method' # binding_102 @ local[3];
        readonly const 'f' # binding_103 @ local[6];
        function 'nestedFunc' # binding_104 @ local[4]
      }

      prologue {
        func 'method1' -> local[3] [non-embedded closure]
        func 'nestedFunc11' -> local[4]
        new let -> local[5]
        new let -> local[6]
      }

      epilogue { Pop(4) }

      references {
        method @ binding_102
        assertEqual @ free assertEqual
        obj @ binding_101
        obj @ binding_101
        nestedFunc @ binding_104
        assertEqual @ free assertEqual
        obj @ binding_101
        assertEqual @ free assertEqual
        f @ binding_103
      }

      closure function method as 'method1' {
        [closure scope with 3 slots: embedded-closure:anonymous, this, parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_105 @ scoped[!1] }

        No references

        prologue {
          ScopePush(3); arg[0] as this -> scoped[+1]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references

          embedded closure function '<anonymous>' as 'anonymous2' {
            [no closure scope]; [0 var declarations]

            bindings {
              param 'a' # binding_106 @ arg[1];
              param 'b' # binding_107 @ arg[2]
            }

            No references

            prologue {  }

            block {
              sameInstanceCountAsParent: true
              [no closure scope]

              bindings { let 'e' # binding_108 @ local[0] }

              prologue { new let -> local[0] }

              epilogue { Pop(1) }

              references {
                a @ binding_106
                b @ binding_107
                c @ binding_100 using relative slot index 8
                '#this' @ binding_105 using relative slot index 1
                e @ binding_108
              }
            }
          }
        }
      }

      function nestedFunc as 'nestedFunc11' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_109 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_exceptionsBasic as 'test_exceptionsBasic' {
    [closure scope with 3 slots: async-continuation, async-callback, this]
    [0 var declarations]

    bindings { this '#this' # binding_110 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(3, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        function 'nestedFunc' # binding_111 @ local[3]
      }

      prologue { func 'nestedFunc12' -> local[3] }

      epilogue { Pop(1) }

      No references

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          nestedFunc @ binding_111; assert @ free assert
        }
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {
          catch-param 'e' # binding_112 @ local[4]
        }

        prologue { Stack has exception }

        epilogue { Pop(1) }

        references {
          assertEqual @ free assertEqual; e @ binding_112
        }
      }

      function nestedFunc as 'nestedFunc12' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_113 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_exceptionsNested as 'test_exceptionsNested' {
    [closure scope with 4 slots: async-continuation, async-callback, this, nestedFunc2]
    [0 var declarations]

    bindings { this '#this' # binding_114 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(4, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 'x' # binding_115 @ local[4];
        function 'nestedFunc' # binding_116 @ local[3];
        function 'nestedFunc2' # binding_117 @ scoped[!3]
      }

      prologue {
        func 'nestedFunc13' -> local[3] [non-embedded closure]
        func 'nestedFunc14' -> scoped[+3]
        new let -> local[4]
      }

      epilogue { Pop(2) }

      references {
        assertEqual @ free assertEqual; x @ binding_115
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { let 'y' # binding_118 @ local[7] }

        prologue { StartTry; new let -> local[7] }

        epilogue { !EndTry }

        No references

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue { StartTry }

          epilogue { !EndTry }

          references {
            x @ binding_115
            y @ binding_118
            x @ binding_115
            nestedFunc @ binding_116
          }
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {
            catch-param 'e' # binding_119 @ local[8]
          }

          prologue { Stack has exception }

          epilogue { Pop(1) }

          references {
            x @ binding_115
            e @ binding_119
            x @ binding_115
            y @ binding_118
          }
        }
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {
          catch-param 'e' # binding_120 @ local[5]
        }

        prologue { Stack has exception }

        epilogue { Pop(1) }

        references { x @ binding_115; e @ binding_120 }
      }

      closure function nestedFunc as 'nestedFunc13' {
        [closure scope with 4 slots: async-continuation,
        async-callback,
        this,
        parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_121 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(4, true); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references

          block {
            sameInstanceCountAsParent: true
            [no closure scope]

            bindings {  }

            prologue { StartTry }

            epilogue { !EndTry }

            references {
              nestedFunc2 @ binding_117 using relative slot index 9
            }
          }

          block {
            sameInstanceCountAsParent: true
            [no closure scope]

            bindings {
              catch-param 'e' # binding_122 @ local[3]
            }

            prologue { Stack has exception }

            epilogue { Pop(1) }

            references { e @ binding_122 }
          }
        }
      }

      function nestedFunc2 as 'nestedFunc14' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_123 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_multipleJobs as 'test_multipleJobs' {
    [closure scope with 5 slots: async-continuation, async-callback, this, nestedFunc, s]
    [0 var declarations]

    bindings { this '#this' # binding_124 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(5, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 's' # binding_125 @ scoped[!4];
        function 'task1' # binding_126 @ local[3];
        function 'task2' # binding_127 @ local[4];
        function 'nestedFunc' # binding_128 @ scoped[!3]
      }

      prologue {
        func 'task1' -> local[3] [non-embedded closure]
        func 'task2' -> local[4] [non-embedded closure]
        func 'nestedFunc15' -> scoped[+3]
      }

      epilogue { Pop(2) }

      references {
        task1 @ binding_126
        task2 @ binding_127
        s @ binding_125 using relative slot index 4
        nestedFunc @ binding_128 using relative slot index 3
        assertEqual @ free assertEqual
        s @ binding_125 using relative slot index 4
      }

      closure function task1 as 'task1' {
        [closure scope with 4 slots: async-continuation,
        async-callback,
        this,
        parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_129 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(4, true); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            nestedFunc @ binding_128 using relative slot index 9
            s @ binding_125 using relative slot index 10
          }
        }
      }

      closure function task2 as 'task2' {
        [closure scope with 4 slots: async-continuation,
        async-callback,
        this,
        parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_130 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(4, true); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references {
            nestedFunc @ binding_128 using relative slot index 9
            s @ binding_125 using relative slot index 10
          }
        }
      }

      function nestedFunc as 'nestedFunc15' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_131 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }

  function test_nestedClosure as 'test_nestedClosure' {
    [closure scope with 5 slots: async-continuation, async-callback, this, nestedFunc, x]
    [0 var declarations]

    bindings { this '#this' # binding_132 @ scoped[!2] }

    No references

    prologue {
      AsyncStart(5, false); arg[0] as this -> scoped[+2]
    }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        writable let 'x' # binding_133 @ scoped[!4];
        function 'func1' # binding_134 @ local[3];
        function 'nestedFunc' # binding_135 @ scoped[!3]
      }

      prologue {
        func 'func1' -> local[3] [non-embedded closure]
        func 'nestedFunc16' -> scoped[+3]
      }

      epilogue { Pop(1) }

      references {
        func1 @ binding_134
        assertEqual @ free assertEqual
        x @ binding_133 using relative slot index 4
      }

      closure function func1 as 'func1' {
        [closure scope with 4 slots: async-continuation,
        async-callback,
        this,
        parent-reference]
        [0 var declarations]

        bindings { this '#this' # binding_136 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(4, true); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {
            function 'func2' # binding_137 @ local[3]
          }

          prologue {
            func 'func2' -> local[3] [non-embedded closure]
          }

          epilogue { Pop(1) }

          references {
            func2 @ binding_137
            nestedFunc @ binding_135 using relative slot index 9
            func2 @ binding_137
          }

          closure function func2 as 'func2' {
            [closure scope with 4 slots: async-continuation,
            async-callback,
            this,
            parent-reference]
            [0 var declarations]

            bindings {
              this '#this' # binding_138 @ scoped[!2]
            }

            No references

            prologue {
              AsyncStart(4, true)
              arg[0] as this -> scoped[+2]
            }

            block {
              sameInstanceCountAsParent: true
              [no closure scope]

              bindings {
                function 'func3' # binding_139 @ local[3]
              }

              prologue {
                func 'func3' -> local[3] [non-embedded closure]
              }

              epilogue { Pop(1) }

              references {
                func3 @ binding_139
                nestedFunc @ binding_135 using relative slot index 15
                func3 @ binding_139
              }

              closure function func3 as 'func3' {
                [closure scope with 4 slots: async-continuation,
                async-callback,
                this,
                parent-reference]
                [0 var declarations]

                bindings {
                  this '#this' # binding_140 @ scoped[!2]
                }

                No references

                prologue {
                  AsyncStart(4, true)
                  arg[0] as this -> scoped[+2]
                }

                block {
                  sameInstanceCountAsParent: true
                  [no closure scope]

                  bindings {  }

                  prologue {  }

                  epilogue {  }

                  references {
                    x @ binding_133 using relative slot index 22
                    nestedFunc @ binding_135 using relative slot index 21
                    x @ binding_133 using relative slot index 22
                  }
                }
              }
            }
          }
        }
      }

      function nestedFunc as 'nestedFunc16' {
        [closure scope with 3 slots: async-continuation, async-callback, this]
        [0 var declarations]

        bindings { this '#this' # binding_141 @ scoped[!2] }

        No references

        prologue {
          AsyncStart(3, false); arg[0] as this -> scoped[+2]
        }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          No references
        }
      }
    }
  }
}
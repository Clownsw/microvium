[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'asyncTestComplete'
[free var] 'undefined'
[free var] 'print'
[free var] 'assertEqual'
[global slot] 'thisModule'
[global slot] 'runAsync'
[global slot] 'test_minimal'
[global slot] 'test_awaitReturnValue'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings {
    function 'run' # binding_1 @ local[0];
    function 'runAsync' # binding_2 @ global['runAsync'];
    function 'test_minimal' # binding_3 @ global['test_minimal'];
    function 'test_awaitReturnValue' # binding_4 @ global['test_awaitReturnValue']
  }

  references { vmExport @ free vmExport; run @ binding_1 }

  prologue {
    func 'run' -> local[0]
    func 'runAsync' -> global['runAsync']
    func 'test_minimal' -> global['test_minimal']
    func 'test_awaitReturnValue' -> global['test_awaitReturnValue']
  }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_5 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      references { runAsync @ binding_2 }
    }
  }

  function runAsync as 'runAsync' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_6 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      No references

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings {  }

        prologue { StartTry }

        epilogue { !EndTry }

        references {
          test_minimal @ binding_3
          test_awaitReturnValue @ binding_4
          asyncTestComplete @ free asyncTestComplete
          undefined @ free undefined
        }
      }

      block {
        sameInstanceCountAsParent: true; [no closure scope]

        bindings { catch-param 'e' # binding_7 @ local[3] }

        prologue { Stack has exception }

        epilogue { Pop(1) }

        references {
          asyncTestComplete @ free asyncTestComplete
          e @ binding_7
        }
      }
    }
  }

  function test_minimal as 'test_minimal' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_8 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        function 'myAsyncFunc' # binding_9 @ local[0]
      }

      prologue { func 'myAsyncFunc' -> local[0] }

      epilogue { Pop(1) }

      references {
        print @ free print
        myAsyncFunc @ binding_9
        print @ free print
      }

      function myAsyncFunc as 'myAsyncFunc' {
        [closure scope with 2 slots: async-continuation, async-callback]
        [0 var declarations]

        bindings { this '#this' # binding_10 @ arg[0] }

        No references

        prologue { AsyncStart(2, false) }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references { print @ free print }
        }
      }
    }
  }

  function test_awaitReturnValue as 'test_awaitReturnValue' {
    [closure scope with 2 slots: async-continuation, async-callback]
    [0 var declarations]

    bindings { this '#this' # binding_11 @ arg[0] }

    No references

    prologue { AsyncStart(2, false) }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {
        readonly const 'result' # binding_12 @ local[4];
        function 'asyncFunction' # binding_13 @ local[3]
      }

      prologue {
        func 'asyncFunction' -> local[3]
        new let -> local[4]
      }

      epilogue { Pop(2) }

      references {
        asyncFunction @ binding_13
        assertEqual @ free assertEqual
        result @ binding_12
      }

      function asyncFunction as 'asyncFunction' {
        [closure scope with 2 slots: async-continuation, async-callback]
        [0 var declarations]

        bindings {
          this '#this' # binding_14 @ arg[0];
          param 'arg' # binding_15 @ arg[1]
        }

        No references

        prologue { AsyncStart(2, false) }

        block {
          sameInstanceCountAsParent: true
          [no closure scope]

          bindings {  }

          prologue {  }

          epilogue {  }

          references { arg @ binding_15 }
        }
      }
    }
  }
}
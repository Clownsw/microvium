unit ['./test/end-to-end/tests/arrays.test.mvm.js'];

entry ['#entry'];

external vmExport from free-variable 'vmExport';
external assertEqual from free-variable 'assertEqual';
external undefined from free-variable 'undefined';
external assert from free-variable 'assert';

global thisModule;
global a;
global b;
global c;
global d;
global init;
global testArrays;

function ['#entry']() {
  entry:
    LoadArg(index 0);
    StoreGlobal(name 'thisModule');
    Literal(lit &function run);
    Literal(lit &function init);
    StoreGlobal(name 'init');
    Literal(lit &function testArrays);
    StoreGlobal(name 'testArrays');
    // ---
    // runExportedFunction: 0
    // ---
    Literal(lit undefined);
    StoreGlobal(name 'a');
    Literal(lit undefined);
    StoreGlobal(name 'b');
    Literal(lit undefined);
    StoreGlobal(name 'c');
    Literal(lit undefined);
    StoreGlobal(name 'd');
    LoadGlobal(name 'init');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'vmExport');
    Literal(lit undefined);
    Literal(lit 0);
    LoadVar(index 0);
    Call(count 3);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function run() {
  entry:
    // Run the test twice. Particularly, when running after a snapshot
    // restoration, the first time will be running against the arrays in the
    // snapshot, while the second time will be running against newly-allocated
    // arrays.
    LoadGlobal(name 'testArrays');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name 'testArrays');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function init() {
  entry:
    ArrayNew();
    LoadVar(index 0);
    StoreGlobal(name 'a');
    Pop(count 1);
    ArrayNew();
    LoadVar(index 0);
    Literal(lit 0);
    Literal(lit 1);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 1);
    Literal(lit 2);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 2);
    Literal(lit 3);
    ObjectSet();
    LoadVar(index 0);
    StoreGlobal(name 'b');
    Pop(count 1);
    ArrayNew();
    LoadVar(index 0);
    Literal(lit 0);
    Literal(lit 1);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 2);
    Literal(lit 3);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 'length');
    Literal(lit 4);
    ObjectSet();
    LoadVar(index 0);
    StoreGlobal(name 'c');
    Pop(count 1);
    ArrayNew();
    LoadVar(index 0);
    Literal(lit 0);
    ArrayNew();
    LoadVar(index 3);
    Literal(lit 0);
    ArrayNew();
    LoadVar(index 6);
    Literal(lit 0);
    Literal(lit 1);
    ObjectSet();
    LoadVar(index 6);
    Literal(lit 1);
    Literal(lit 2);
    ObjectSet();
    ObjectSet();
    LoadVar(index 3);
    Literal(lit 1);
    ArrayNew();
    LoadVar(index 6);
    Literal(lit 0);
    Literal(lit 3);
    ObjectSet();
    LoadVar(index 6);
    Literal(lit 1);
    Literal(lit 4);
    ObjectSet();
    ObjectSet();
    LoadVar(index 3);
    Literal(lit 2);
    Literal(lit 5);
    ObjectSet();
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 1);
    Literal(lit 6);
    ObjectSet();
    LoadVar(index 0);
    StoreGlobal(name 'd');
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function testArrays() {
  entry:
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 0);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 0);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Mutation
    Literal(lit 24);
    LoadGlobal(name 'b');
    Literal(lit 1);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 24);
    Call(count 3);
    Pop(count 1);
    // Extend the array
    Literal(lit 5);
    LoadGlobal(name 'b');
    Literal(lit 4);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 5);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Write to a hole
    Literal(lit 4);
    LoadGlobal(name 'b');
    Literal(lit 3);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit 4);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    // Shorten the array
    Literal(lit 3);
    LoadGlobal(name 'b');
    Literal(lit 'length');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Make the array longer by setting the length (this is likely not to increase
    // the _capacity_ of the array, since the capacity is probably still large
    // from earlier, so this tests that making the array shorter and then longer
    // does not expose stale values)
    Literal(lit 5);
    LoadGlobal(name 'b');
    Literal(lit 'length');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Make the array longer by setting the length, but to a value that exceeds the original capacity
    Literal(lit 8);
    LoadGlobal(name 'b');
    Literal(lit 'length');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit 8);
    LoadGlobal(name 'b');
    Literal(lit 7);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 7);
    ObjectGet();
    Literal(lit 8);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'b');
    Literal(lit 8);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Grow an empty array (`a` is an empty array so far)
    Literal(lit 10);
    LoadGlobal(name 'a');
    Literal(lit 0);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit 20);
    LoadGlobal(name 'a');
    Literal(lit 1);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 10);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 20);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 2);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Test elision
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'c');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 4);
    Call(count 3);
    Pop(count 1);
    // Length is 4, even though it ends in a hole
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'c');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'c');
    Literal(lit 1);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'c');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'c');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Test Array.push
    LoadGlobal(name 'assert');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit '__proto__');
    ObjectGet();
    Literal(lit null);
    BinOp(op '!==');
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'assert');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit '__proto__');
    ObjectGet();
    Literal(lit 'push');
    ObjectGet();
    Literal(lit undefined);
    BinOp(op '!==');
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'assert');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 'push');
    ObjectGet();
    Literal(lit undefined);
    BinOp(op '!==');
    Call(count 2);
    Pop(count 1);
    LoadGlobal(name 'a');
    LoadVar(index 0);
    Literal(lit 'push');
    ObjectGet();
    LoadVar(index 0);
    Literal(lit 30);
    Call(count 2);
    StoreVar(index 0);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'a');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 30);
    Call(count 3);
    Pop(count 1);
    // See that the nested arrays are correct
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 0);
    ObjectGet();
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    ObjectGet();
    Literal(lit 0);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    ObjectGet();
    Literal(lit 1);
    ObjectGet();
    Literal(lit 4);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 2);
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'd');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 6);
    Call(count 3);
    Pop(count 1);
    // Reset the arrays to their initial state, because this test runs multiple
    // times (before and after the snapshot)
    LoadGlobal(name 'init');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}
export 0 = &function ['./test/end-to-end/tests/arrays.test.mvms:run'];

slot ['./test/end-to-end/tests/arrays.test.mvms:a'] = &allocation 5;
slot ['./test/end-to-end/tests/arrays.test.mvms:b'] = &allocation 6;
slot ['./test/end-to-end/tests/arrays.test.mvms:testArrays'] = &function ['./test/end-to-end/tests/arrays.test.mvms:testArrays'];
slot ['global:assertEqual'] = host function 3;

function ['./test/end-to-end/tests/arrays.test.mvms:run']() {
  entry:
    // Run the test twice. Particularly, when running after a snapshot
    // restoration, the first time will be running against the arrays in the
    // snapshot, while the second time will be running against newly-allocated
    // arrays.
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:testArrays');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:testArrays');
    Literal(lit undefined);
    Call(count 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['./test/end-to-end/tests/arrays.test.mvms:testArrays']() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 0);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 0);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Mutation
    Literal(lit 24);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 1);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 24);
    Call(count 3);
    Pop(count 1);
    // Extend the array
    Literal(lit 5);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 4);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 5);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Write to a hole
    Literal(lit 4);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 3);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit 4);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    // Shorten the array
    Literal(lit 3);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 'length');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Make the array longer by setting the length (this is likely not to increase
    // the _capacity_ of the array, since the capacity is probably still large
    // from earlier, so this tests that making the array shorter and then longer
    // does not expose stale values)
    Literal(lit 5);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 'length');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Make the array longer by setting the length, but to a value that exceeds the original capacity
    Literal(lit 8);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 'length');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit 8);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 7);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 3);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 4);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 7);
    ObjectGet();
    Literal(lit 8);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Literal(lit 8);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Grow an empty array (a is an empty array so far)
    Literal(lit 10);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 0);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit 20);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 1);
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 10);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 20);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Literal(lit 2);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // // var c = [4, 5, 6];
    // // TODO: Test elisions
    // // TODO: Property assignment
    // // TODO: Array prototype methods
    // Reset the arrays to their initial state, because this test runs multiple
    // times (once before and once after the snapshot)
    ArrayNew();
    LoadVar(index 0);
    StoreGlobal(name './test/end-to-end/tests/arrays.test.mvms:a');
    Pop(count 1);
    ArrayNew();
    LoadVar(index 0);
    Literal(lit 0);
    Literal(lit 1);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 1);
    Literal(lit 2);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 2);
    Literal(lit 3);
    ObjectSet();
    LoadVar(index 0);
    StoreGlobal(name './test/end-to-end/tests/arrays.test.mvms:b');
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 5 = [
];

allocation 6 = [
  1,
  2,
  3,
];
export 0 = &function run;

slot foo = &function foo;
slot ['global:assertEqual'] = host function 3;
slot ['global:console'] = &allocation 6;

function foo() {
  entry:
    LoadArg(index 1);
    Branch(@block1, @block2);
  block1:
    LoadGlobal(name 'global:console');
    LoadVar(index 0);
    Literal(lit 'log');
    ObjectGet();
    LoadVar(index 0);
    Literal(lit 'Consequent path');
    Call(count 2, flag true);
    Pop(count 1);
    Literal(lit 1);
    Return();
  block2:
    LoadGlobal(name 'global:console');
    LoadVar(index 0);
    Literal(lit 'log');
    ObjectGet();
    LoadVar(index 0);
    Literal(lit 'Alternate path');
    Call(count 2, flag true);
    Pop(count 1);
    Literal(lit 2);
    Return();
  block3:
    LoadGlobal(name 'global:console');
    LoadVar(index 0);
    Literal(lit 'log');
    ObjectGet();
    LoadVar(index 0);
    Literal(lit 'Shouldn\'t get here');
    Call(count 2, flag true);
    Pop(count 1);
    Literal(lit 3);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'foo');
    Literal(lit undefined);
    Literal(lit true);
    Call(count 2, flag false);
    Literal(lit 1);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'foo');
    Literal(lit undefined);
    Literal(lit false);
    Call(count 2, flag false);
    Literal(lit 2);
    Call(count 3, flag true);
    Literal(lit undefined);
    Return();
}

allocation 6 = {
  log: host function 1,
};
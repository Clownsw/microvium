[this module slot] 'thisModule'; [global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings { function 'foo' # binding_1 @ local[0] }

  No references

  prologue { func 'foo' -> local[0] }

  function foo as 'foo' {
    [closure scope with 1 slots]; [0 var declarations]

    bindings { this '#this' # binding_2 @ arg[0] }

    No references

    prologue { new scope[1] }

    block {
      epiloguePopCount: 1

      bindings {
        let 'x' # binding_3 @ scoped[0];
        function 'bar' # binding_4 @ local[0]
      }

      prologue {
        func 'bar' -> local[0] [capture scope]
        new let -> scoped[0]
      }

      No references

      closure function bar as 'bar' {
        [no closure scope]; [0 var declarations]

        bindings { this '#this' # binding_5 @ arg[0] }

        No references

        prologue {  }

        block {
          epiloguePopCount: 1

          bindings { function 'baz' # binding_6 @ local[0] }

          prologue {
            func 'baz' -> local[0] [capture scope]
          }

          No references

          closure function baz as 'baz' {
            [no closure scope]; [0 var declarations]

            bindings { this '#this' # binding_7 @ arg[0] }

            No references

            prologue {  }

            block {
              epiloguePopCount: 0

              bindings {  }

              prologue {  }

              references {
                x @ binding_3 using relative slot index 0
              }
            }
          }
        }
      }
    }
  }
}
# To do

  - It occurs to me that objects don't need a "next" slot. We currently use 10 bytes per new property, which is more than double the normal property size. If we just scaled the object allocation geometrically like we do for arrays, the worst case would be that it takes about twice the space. And the garbage collector would be simpler if it didn't have to traverse the linked list. And it would save 2 bytes in the object. Come to think of it, it probably doesn't need the `__proto__` slot either since most objects in Microvium don't have a prototype. This would also mean that setting or getting the prototype would not be special cases for objects.
  - `Microvium.onRestore` event
  - `process.env` and `process.argv`
  - Fix numeric object properties like `obj['123']`
  - Promises
  - Async-await
  - `for-of` for arrays (can throw if non-array - just transform to normal `for`)
  - Make all port definitions optional with `ifndef...`
  - FFI library and glue generator, where microvium.c and the port file are part of the generated glue.
  - Runtime measurement of RAM usage
  - JSON parse/stringify library

  - All the TODOs in the code (technical debt)
  - Improve test coverage of C VM
  - Some amount of the builtin JS library (e.g. `Array.map`, etc)
  - Dynamic stack size (expand as needed), so I don't need to keep quoting the stack size as part of the size.
  - Job loop?
  - Add a hash ID to the bytecode file and make a way to create a crash dump to diagnose errors

  - Optional chaining (`x?.y`, `x?[y]`, `new x?.()`) -- will only be a compiler front-end change.
  - Nullish coalescing `??` (probably by transpiler plugin https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator)
  - Class inheritance
  - Start integrating test262
  - Iterators
  - [Handled-promise](https://github.com/tc39/proposal-eventual-send)
  - Top-level await (compile-time await)
  - Variadic calls
  - Symbol type
  - Virtual types and BigInt
  - RegExp
  - Proxy
  - The rest of the builtins, e.g. Regexp, Date, Map, Set, etc., as optional libraries.
